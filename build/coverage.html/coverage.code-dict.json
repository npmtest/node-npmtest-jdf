{"/home/travis/build/npmtest/node-npmtest-jdf/test.js":"/* istanbul instrument in package npmtest_jdf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - init-after\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - init-after\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jdf/lib.npmtest_jdf.js":"/* istanbul instrument in package npmtest_jdf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_jdf = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_jdf = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-jdf/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-jdf && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_jdf */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - init-before\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_jdf\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // init-after\n    // run browser js-env code - init-after\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - init-after\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_jdf.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_jdf.rollup.js'] =\n            local.assetsDict['/assets.npmtest_jdf.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_jdf.__dirname + '/lib.npmtest_jdf.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/index.js":"var jdf = require('./lib/jdf.js');\n\nmodule.exports = {\n\tinit: function(argv) {\n\t\tjdf.init(argv);\n\t}\n};","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/jdf.js":"/**\n * @jdf\n */\nvar path = require('path');\nvar util = require('util');\nvar updateNotifier = require('update-notifier');\nvar pkg = require('../package.json');\n\n//lib自身组件\nvar $ = require('./base.js');\nvar f = require('./file.js');\n\nvar Config = require(\"./config.js\");\nvar Log = require(\"./log.js\");\n\n//define\nvar jdf = module.exports;\n\n/**\n * @配置项\n */\njdf.config = Config;\n\n/**\n * @commoder help --> old\n */\njdf.help = function() {\n    var content = [];\n    content = content.concat([\n        '',\n        '  Usage: jdf <Command>',\n        '',\n        '  Command:',\n        '',\n        '    install      install init dir, demo',\n        //'  init         project directory init',\n        '    build        build project',\n        '      -open      auto open html/index.html',\n        '      -combo     combo debug for online/RD debug',\n        //'      -css       compile less/scss file in current dir',\n        // '      -plain     output project with plain',\n        // '',\n        //'    release      release project',\n        '',\n        '    output       output css/js/widget',\n        '      dirname    output your own custom dirname',\n        //'      -html      output css/js/widget/html',\n        '      -debug     output uncompressed js,css,images for test',\n        //'      -rjs      output project based requirejs',\n        //'      -backup    backup outputdir to tags dir',\n        //'      -path [p]  replace projectPath to specified path option',\n        '',\n        '    upload       upload css/js/widget dir to \"serverDir\"',\n        '      dirname    upload output your own custom dirname',\n        //'      -html      upload css/js/widget/html dir to \"serverDir\"',\n        '      -debug     upload uncompressed js,css,images for test',\n        '      -custom    upload a dir/file to server',\n        // '      -preview   upload html dir to remote \"previewServerDir\"',\n        //'      -nc        upload css/js dir to preview server dir use newcdn url',\n        //'      -nh        upload html dir to preview server dir use newcdn url',\n        //'      -list      upload file list from config.json to server',\n        '',\n        '    widget',\n        '      -all       preview all widget',\n        '      -list      get widget list from server',\n        '      -preview xxx  preview a widget',\n        '      -install xxx  install a widget to local',\n        '      -publish xxx  publish a widget to server',\n        '      -create xxx   create a widget to local',\n        //'    -w    watch upload output files to remote sever',\n        '',\n        '    server       debug for online/RD debug',\n        '    lint         file lint',\n        '    format       file formater',\n        ' ',\n        '  Extra commands:',\n        '',\n        '    compress     compress js/css (jdf compress input output)',\n        '    clean        clean cache folder',\n        '    -h           get help information',\n        '    -v           get the version number',\n        ''\n    ]);\n    console.log(content.join('\\n'));\n}\n\n\n\n/**\n * @总的初始化函数 from ../index.js\n * @commander\n */\njdf.init = function(argv) {\n    //设置全局时间戳\n    jdf.config.suffix = $.getTimestamp();\n\n    //读取配置文件\n    jdf.getConfig(function(configData) {\n        var cmd2 = argv[2];\n        jdf.currentDir = f.currentDir();\n        jdf.config.argv=argv;\n\n        if (argv.length < 3 || cmd2 === '-h' || cmd2 === '--help') {\n            Log.send('help');\n            jdf.help();\n\n        } else if (cmd2 === '-v' || cmd2 === '--version') {\n            Log.send('version');\n            jdf.version();\n\n        } else if (cmd2[0] === '-') {\n            Log.send('help');\n            jdf.help();\n\n        } else if (cmd2 === 'b' || cmd2 === 'build') {\n            Log.send('build');\n            jdf.argvInit('build', argv);\n\n        } else if (cmd2 === 'r' || cmd2 === 'release') {\n            Log.send('release');\n            jdf.argvInit('release', argv);\n\n        } else if (cmd2 === 'o' || cmd2 === 'output') {\n            Log.send('output');\n            jdf.argvInit('output', argv);\n\n        } else if (cmd2 === 'u' || cmd2 === 'upload') {\n            var FtpUpload = require('./ftpUpload');\n            Log.send('upload');\n            FtpUpload.init(argv, configData);\n\n        } else if (cmd2 === 'i' || cmd2 === 'install') {\n            switch (argv[3]) {\n                case 'demo':\n                    Log.send('install-demo');\n                    jdf.install('demo', argv[4]);\n                    return;\n                case 'init':\n                    Log.send('install-init');\n                    jdf.install('init', argv[4]);\n                    return;\n                default:\n                    console.log('You can \"jdf install demo or \"jdf install init\"');\n            }\n\n        } else if (cmd2 === 'c' || cmd2 === 'compress') {\n            var Compress = require('./compress.js');\n            Log.send('compress');\n            Compress.dir(argv[3], argv[4]);\n\n            //widget\n        } else if (cmd2 === 'w' || cmd2 === 'widget') {\n            var Widget = require(\"./widget.js\");\n\n            var cmd3 = argv[3],\n                cmd4 = argv[4],\n                cmd5 = argv[5];\n            var force = cmd5 != 'undefined' && cmd5 == '-force' ? true : false\n\n            if (cmd3 == '-all' || cmd3 == '-a') {\n                Log.send('widget-all');\n                Widget.all(cmd4);\n            }\n\n            if (cmd3 == '-list' || cmd3 == '-l') {\n                Log.send('widget-list');\n                Widget.list(cmd4);\n            }\n\n            var hasCmd4 = function() {\n                if (cmd4) {\n                    return true;\n                } else {\n                    console.log('jdf tips [jdf.init] Please input widget name');\n                    return false;\n                }\n            }\n\n            var widgetCmd = function() {\n                var content = [];\n                content = content.concat([\n                    '',\n                    '  Command:',\n                    '',\n                    '    widget',\n                    '      -all     preview all widget',\n                    '      -list    get widget list from server',\n                    '      -preview xxx     preview a widget',\n                    '      -install xxx     install a widget to local',\n                    '      -publish xxx     publish a widget to server',\n                    '      -create  xxx     create a widget to local',\n                    ''\n                ]);\n                console.log(content.join('\\n'));\n            }\n\n            if (cmd3) {\n                if (cmd3 == '-preview' || cmd3 == '-pre' && hasCmd4()) {\n                    Log.send('widget-preview');\n                    Widget.preview(cmd4);\n\n                } else if (cmd3 == '-install' || cmd3 == '-i' && hasCmd4()) {\n                    Log.send('widget-install');\n                    Widget.install(cmd4, force);\n\n                } else if (cmd3 == '-publish' || cmd3 == '-p' && hasCmd4()) {\n                    Log.send('widget-publish');\n                    Widget.publish(cmd4, force);\n\n                } else if ((cmd3 == '-create' || cmd3 == '-c') && hasCmd4()) {\n                    Log.send('widget-create');\n                    Widget.create(cmd4);\n\n                }\n            }\n\n            if (!cmd3) {\n                widgetCmd();\n            }\n\n            //extra commands\n            //server\n        } else if (cmd2 === 'server') {\n            Log.send('server');\n            if (argv[3]) {\n                jdf.config.localServerPort = argv[3];\n            };\n            jdf.server(f.currentDir())\n\n            //file lint\n        } else if (cmd2 === 'lint' || cmd2 === 'l') {\n            var cmd3 = argv[3];\n            var filename = (typeof(cmd3) == 'undefined') ? f.currentDir() : cmd3;\n            Log.send('file lint');\n            var FileLint = require('./fileLint');\n            FileLint.init(filename);\n\n            //file format\n        } else if (cmd2 === 'format' || cmd2 === 'f') {\n            var cmd3 = argv[3];\n            var filename = (typeof(cmd3) == 'undefined') ? f.currentDir() : cmd3;\n            Log.send('file format');\n            var FileFormat = require('./fileFormat');\n            FileFormat.init(filename);\n\n            //clean\n        } else if (cmd2 === 'clean') {\n            Log.send('clean');\n            jdf.clean();\n\n            //todo: beautiful/jsbin/\n        } else {\n            console.log('jdf error [jdf.init] invalid option: ' + cmd2 + ' \\rType \"jdf -h\" for usage.');\n        }\n    });\n};\n\n/**\n * @输入命令的初始化 build, release, output\n */\njdf.argvInit = function(runType, argv, callback) {\n    if (runType == 'build' || runType == 'release') {\n        if (runType == 'build' && typeof(argv[3]) != 'undefined' && argv[3] == '-css') {\n            jdf.buildCss();\n        } else {\n            var autoOpenurl = false,\n                comboDebug = false;\n            if (typeof(argv[3]) != 'undefined') {\n                if (argv[3] == '-open' || argv[3] == '-o') autoOpenurl = true;\n                if (argv[3] == '-combo' || argv[3] == '-c') comboDebug = true;\n            }\n\n            jdf.bgMkdir();\n            jdf.bgCopyDir();\n            jdf.buildMain(runType, argv[3] || argv[4]);\n\n            //plain mode\n            if(argv[3] == '-plain' || argv[4] == '-plain'){\n                var outputdirName = jdf.config.outputDirName;\n                var outputdir = outputdirName+'/'+jdf.getProjectPath();\n                f.copy(jdf.bgCurrentDir, outputdir);\n\n                console.log('jdf build plain success!');\n            }else{\n                console.log(\"at precess:<<\"+process.pid+\">>\");\n\n                jdf.server(jdf.bgCurrentDir, autoOpenurl, comboDebug, function(data) {\n                    jdf.watch(runType, callback, data);\n                });\n            }\n        }\n    } else if (runType == 'output') {\n        // jdf.bgMkdir();\n        // var _bgdir=jdf.bgCurrentDir+\"_\"+Math.random();\n        // f.renameFile(jdf.bgCurrentDir,_bgdir);\n        // console.log(_bgdir);\n        // f.delAsync(_bgdir);\n        // f.mkdir(jdf.bgCurrentDir);\n\n        jdf.bgMkdir();\n        f.del(jdf.bgCurrentDir, function() {\n            jdf.bgCopyDir();\n            jdf.buildMain(runType);\n            //默认\n            var outputType = 'default',\n                projectPath = null,\n                outputList, isbackup = false,\n                isdebug = false;\n\n            if (typeof(argv[3]) != 'undefined') {\n                var cmd3 = argv[3];\n                var cmd4 = argv[4];\n\n                //custom自定义\n                outputType = 'custom';\n                outputList = cmd3;\n\n                //projectPath自定义\n                if (cmd3 == '-path') {\n                    projectPath = cmd4;\n                    outputType = 'default';\n                }\n\n                //debug(不压缩)\n                if (cmd3 == '-debug' || cmd4 == '-debug') {\n                    isdebug = true;\n                    if (!cmd4) outputType = 'default';\n\n                    //按配置项来输出\n                    if (jdf.config.outputCustom) {\n                        outputType = 'custom';\n                        outputList = jdf.config.outputCustom;\n                    }\n                }\n\n                //hashtml\n                //if (cmd3 == '-html' || cmd4 == '-html'||cmd3 == '-h' || cmd4 == '-h') {\n                //    outputType = 'hashtml';\n                //    outputList = null;\n                //}\n\n                //backup\n                if (cmd3 == '-backup' || cmd4 == '-backup') {\n                    outputType = 'backup';\n                    isbackup = true;\n                    if (cmd4 == '-backup') {\n                        outputType = 'custom';\n                        outputList = cmd3;\n                    }\n                }\n\n                //prod(produce)预发布\n                if (cmd3 == '-prod' || cmd4 == '-prod') {\n                    outputType = 'prod';\n                    if (cmd4 == '-prod') {\n                        outputType = 'prod';\n                        outputList = cmd3;\n                    }\n                }\n\n                //pub(publish)正式发布\n                if (cmd3 == '-pub' || cmd4 == '-pub') {\n                    outputType = 'pub';\n                    if (cmd4 == '-pub') {\n                        outputType = 'pub';\n                        outputList = cmd3;\n                    }\n                }\n\n                //r.js\n                if(cmd3 == '-rjs' || cmd4 == '-rjs'){\n                    outputType = 'default';\n                    jdf.config.output.rjs = true;\n                }\n\n            } else {\n                //按配置项来输出\n                if (jdf.config.outputCustom) {\n                    outputType = 'custom';\n                    outputList = jdf.config.outputCustom;\n                }\n            }\n\n            var Output = require(\"./output.js\");\n\n            try {\n                //设置成全局compress.js会用到\n                jdf.config.outputType = outputType;\n                Output.init({\n                    type: outputType,\n                    list: outputList,\n                    projectPath: projectPath,\n                    isbackup: isbackup,\n                    isdebug: isdebug,\n                    callback: callback\n                });\n            } catch (e) {\n                console.log(e);\n            }\n\n        });\n    }\n}\n\n/**\n * @读取jdf version 有更新时提示更新\n */\njdf.version = function() {\n    var notifier = updateNotifier({\n        pkg,\n        updateCheckInterval: 0\n    });\n\n    // console.log(notifier);\n    \n    notifier.notify();\n\n    if (notifier.update) {\n        console.log(notifier.update);\n    } else {\n        console.log(pkg.version);\n    }\n}\n\n/**\n * @读取配置文件config.json, 覆盖默认配置\n */\njdf.getConfig = function(callback) {\n    var res = null;\n    var url = f.currentDir() + '/' + jdf.config.configFileName;\n    if (f.exists(url)) {\n        try {\n            var data = f.read(url);\n            if (data) {\n                data = JSON.parse(data);\n                if (typeof(data) == 'object') {\n                    data = $.merageObj(jdf.config, data);\n                }\n                //console.log(data);\n                res = data;\n            }\n            if (callback) callback(res);\n        } catch (e) {\n            console.log('jdf error [jdf.getConfig] - config.json format error');\n            console.log(e);\n            if (callback) callback(res);\n        }\n    } else {\n        if (callback) callback(res);\n    }\n}\n\n/**\n * @工程后台文件夹生成\n * @jdf.bgCurrentDir 为后台文件根目录\n */\njdf.bgMkdir = function() {\n    var list = ['LOCALAPPDATA', 'HOME', 'APPDATA'];\n    var temp;\n    for (var i = 0, len = list.length; i < len; i++) {\n        if (temp = process.env[list[i]]) {\n            break;\n        }\n    }\n    if (temp) {\n        temp = temp || __dirname + '/../';\n        temp += '/.jdf-temp/';\n        temp = path.normalize(temp);\n        f.mkdir(temp);\n\n        //创建文件夹\n        var creatDir = function(filename) {\n            var dir = path.normalize(temp + '/' + filename + '/');\n            f.mkdir(dir);\n            jdf[filename + 'Dir'] = dir;\n        };\n\n        //项目缓存文件夹\n        creatDir('cache');\n        //项目temp文件夹\n        creatDir('temp');\n        //项目lib文件夹\n        //todo:自动从服务器下载最新版的jdj和jdm,现在是需要install手动下载\n        creatDir('lib');\n        //creatDir('jdj');\n        //creatDir('jdm');\n\n        creatDir('backup');\n\n        //复制当前项目至temp文件夹(除outputdir)\n        //取得当前工程名\n        var currentDirName = path.basename(jdf.currentDir);\n        jdf.bgCurrentDir = path.normalize(jdf.tempDir + '/' + currentDirName);\n\n        jdf.bgCurrentDirName = currentDirName;\n        f.mkdir(jdf.bgCurrentDir);\n    }\n}\n/**\n * @复制当前项目至工程后台目录\n * @仅copy app,html,widget, config文件\n */\njdf.bgCopyDir = function() {\n    var excludeFiles = $.excludeFiles();\n\n    if(jdf.config.build.excludeFiles){\n        excludeFiles += '|' + jdf.config.build.excludeFiles;\n    }\n\n    excludeFiles = excludeFiles.replace('||','|')\n\n    if (jdf.config.baseDir != '' || jdf.config.outputCustom) {\n        f.copy(jdf.currentDir + '/' + jdf.config.baseDir, jdf.bgCurrentDir + '/' + jdf.config.baseDir, null, excludeFiles);\n    }else{\n        f.copy(jdf.currentDir + '/' + jdf.config.cssDir, jdf.bgCurrentDir + '/' + jdf.config.cssDir, null, excludeFiles);\n        f.copy(jdf.currentDir + '/' + jdf.config.imagesDir, jdf.bgCurrentDir + '/' + jdf.config.imagesDir, null, excludeFiles);\n        f.copy(jdf.currentDir + '/' + jdf.config.jsDir, jdf.bgCurrentDir + '/' + jdf.config.jsDir, null, excludeFiles);\n        f.copy(jdf.currentDir + '/' + jdf.config.htmlDir, jdf.bgCurrentDir + '/' + jdf.config.htmlDir, null, excludeFiles);\n        f.copy(jdf.currentDir + '/' + jdf.config.widgetDir, jdf.bgCurrentDir + '/' + jdf.config.widgetDir, null, excludeFiles);\n        f.copy(jdf.currentDir + '/' + jdf.config.configFileName, jdf.bgCurrentDir + '/' + jdf.config.configFileName, null, excludeFiles);\n    }\n}\n\n/**\n * @屏幕打点器\n * @time 2014-3-14 07:08\n * @example\n *  begin: jdf.dot.begin()  end: jdf.dot.end();\n */\njdf.dot = {\n    timer: null,\n    begin: function() {\n        this.date = new Date();\n        process.stdout.write('.');\n        this.timer = setInterval(function() {\n            process.stdout.write('.');\n        }, 1000);\n    },\n    end: function(haslog) {\n        var haslog = typeof(haslog) == 'undefined' ? true : haslog;\n        if (this.timer) {\n            var date = new Date();\n            clearInterval(this.timer);\n            if (haslog) {\n                console.log('jdf spend ' + (date - this.date) / 1000 + 's');\n            } else {\n                console.log();\n            }\n        }\n    }\n}\n\n/**\n * @从服务器端下载文件 todo:检查版本号\n */\njdf.download = function(pathItem, targetDir) {\n    var url = jdf.config[pathItem];\n    var cacheDir = path.normalize(jdf.cacheDir + '/' + pathItem + '.tar');\n\n    console.log('jdf downloading');\n    jdf.dot.begin();\n\n    f.download(url, cacheDir, function(data) {\n        if (data == 'ok') {\n            f.tar(cacheDir, targetDir, function() {\n                console.log('\\r\\njdf [' + pathItem + '] install done');\n                jdf.dot.end(false);\n            });\n        } else if (data == 'error') {\n            jdf.dot.end(false);\n        }\n    })\n}\n\n/**\n * @从服务器端下载jdj, jdm, demo 或其它文件\n */\njdf.install = function(type, dir) {\n    jdf.bgMkdir();\n\n    /**\n    widget模块安装走jdf widget -install widget/header\n    console.log('jdf downloading');\n    jdf.download('jdj', jdf.libDir);\n    jdf.download('jdm', jdf.libDir);\n    */\n    if (type == 'demo') {\n        jdf.download('demo', jdf.currentDir, dir);\n    } else if (type == 'init') {\n        jdf.createStandardDir(dir);\n    }\n}\n\n/**\n* @getIp\n*/\njdf.getIp = function(){\n    var net = require('os').networkInterfaces();\n    for(var key in net){\n        if(net.hasOwnProperty(key)){\n            var items = net[key];\n            if(items && items.length){\n                for(var i = 0; i < items.length; i++){\n                    var ip = String(items[i].address).trim();\n                    if(ip && /^\\d+(?:\\.\\d+){3}$/.test(ip) && ip !== '127.0.0.1'){\n                        return ip;\n                    }\n                }\n            }\n        }\n    }\n    return '127.0.0.1';\n};\n\n/**\n* @扫描服务器的启始端口是否在运行\n* @param {String}  host host\n* @param {Number}  start 开始的端口号\n* @param {Number}  end 结束的端口号\n* @param {Function}  callback回调函数\n*/\njdf.scan = function(host, start, end, callback) {\n    var net = require('net');\n    var count = end - start;\n    var result = [];\n\n    for (var i = start; i <= end; i++) {\n        var item = net.connect({\n                host: host,\n                port: i\n            },\n            function(i) {\n                return function() {\n                    result.push(i);\n                    this.destroy();\n                };\n            }(i)\n        );\n \n        item.on('error', function(err) {\n            if (err.errno == 'ECONNREFUSED') {\n                this.destroy();\n            }\n        });\n \n        item.on('close', function() {\n            if (!count--) {\n                callback(result);\n            }\n        });\n    }\n}\n\n/**\n * @取localServerPort\n */\njdf.getLocalServerPort = function(callback){\n    var localServerPort = jdf.config.localServerPort;\n    jdf.scan('localhost', localServerPort, localServerPort, function(result) {\n        if(result.length){\n            jdf.scan('localhost', 3000, 3050, function(result) {\n                var r = result.length == 0 ? 3000 : $.arrayMax(result) + 1;\n                callback(r);\n            });\n        }else{\n            callback(localServerPort);\n        }\n    });\n}\n\n/**\n* @服务器\n* @param {Boolse}\n* @param autoOpenurl true: html/index.html存在的话则打开, 不存在打开 http://localhost:3000/\n* @param autoOpenurl false: 只启动不打开网页\n* @param {Boolse}  comboDebug 联调/线上调试模式\n*/\njdf.server = function(currentDir, autoOpenurl, comboDebug, callback) {\n    var Server = require('./server.js');\n    // var FindPort = require('./findPort');\n    var Colors = require('colors');\n\n    jdf.getLocalServerPort(function(localServerPort){\n        if(jdf.config.build.hasBrowserSync){\n            //use \"browser-sync\" server \n            //doc https://browsersync.io/docs/options\n            var bs = require(\"browser-sync\").create();\n            bs.watch(\"*.html\").on(\"change\", bs.reload);\n            bs.watch(\"*.js\").on(\"change\", bs.reload);\n            bs.watch(\"*.css\").on(\"change\", bs.reload);\n            bs.init({\n                server: currentDir,\n                port: localServerPort,\n                ui: {\n                    // port: 3001, //81 error\n                    weinre: {\n                        // port: 8080\n                    }\n                }\n            });\n            if (callback) callback(1);\n        }else{\n            var Compress = require('./compress.js');\n            Server.init( currentDir, localServerPort, jdf.config.cdn, jdf.getProjectPath(), comboDebug, Compress.addJsDepends);\n\n            if (typeof(autoOpenurl) != 'undefined' && autoOpenurl) {\n                var homepage = '/' + jdf.config.htmlDir + '/index.html';\n                if (!f.exists(jdf.currentDir + homepage)) {\n                    homepage = '';\n                }\n                require(\"./openurl.js\").open('http://localhost:' + localServerPort);\n            }\n            console.log('jdf server : running at '+ localServerPort);\n            console.log(Colors.gray('----------------------------------------'));\n            console.log('   Local: '+Colors.magenta('http://localhost:' + localServerPort + '/'));\n            var externalIp = 'http://'+jdf.getIp()+':' + localServerPort + '/';\n            console.log('External: '+Colors.magenta(externalIp));\n            console.log(Colors.gray('----------------------------------------'));\n\n            if(jdf.config.build.qrcode != false){\n                require(\"qrcode-terminal\").generate(externalIp, { small: false }, function(qrcode){\n                    console.log(Colors.gray(qrcode));\n                    console.log(Colors.gray('----------------------------------------'));\n                });\n            }\n\n            console.log('Current files from: '+jdf.currentDir);\n            console.log('Serving files from: '+currentDir);\n            if (callback) callback(1);\n        }\n    });\n}\n\n/**\n * @检测路径是否为项目文件夹内路径 即 baseDir htmlDir widgetDir configFile\n * @param {String} filename 文件路径\n */\njdf.checkProjectDir = function(filename) {\n    var dirname = filename.replace(jdf.currentDir, '');\n    dirname = dirname.replace(/\\\\/, '');\n    if (/^\\//.test(dirname)) dirname = dirname.replace(/\\//, '');\n\n    var checkTag = false;\n    var checkProjectDir = function(i, j) {\n        var reg = new RegExp('^' + i);\n        if (reg.test(j)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    if (checkProjectDir(jdf.config.baseDir, dirname) || checkProjectDir(jdf.config.htmlDir, dirname) || checkProjectDir(jdf.config.widgetDir, dirname) || checkProjectDir(jdf.config.configFileName, dirname)) {\n        checkTag = true;\n    }\n    return checkTag;\n}\n\n/**\n * @watch && Livereload\n * @复制有变动的文件\n */\njdf.watch = function(type, callback, data) {\n    var Node_watch = require('node-watch');\n    var Livereload = require('./livereloadServer');\n\n    if (!data) {\n        //如果有另外一个进程那么livereload会直接关闭\n        jdf.config.build.livereload = false;\n        //console.log(\"another jdf process running , jdf livereload closed\");\n    }\n\n    //livereload\n    if (jdf.config.build.livereload) Livereload.init();\n\n    var regStr = '\\\\.(vm|tpl|shtml|html|smarty|js|css|less|sass|scss|json|babel|' + $.imageFileType() + ')$';\n    var reg = new RegExp(regStr);\n\n    //todo初始化时前后台文件夹同步\n    Node_watch(jdf.currentDir, function(filename) {\n        //文件过滤\n        if (f.isFile(filename)) {\n            if (!reg.test(filename)) return;\n        }\n\n        var target = jdf.bgCurrentDir + filename.replace(jdf.currentDir, '');\n        if (jdf.checkProjectDir(filename)) {\n            if (f.exists(filename)) {\n                f.copy(filename, target, regStr);\n                //build\n                jdf.buildMain(type);\n                //livereload\n                if (jdf.config.build.livereload) Livereload.reloadBrowser([target]);\n                if (callback) callback(filename);\n            } else {\n                f.del(target, function() {\n                    if (callback) callback(filename);\n                });\n            }\n        }\n    });\n\n    if (callback) callback();\n}\n\n/**\n * @获取项目前缀名字\n * @仅从配置文件中取,不再支持branch/trunk 2014-5-24\n * @del --> 1. d:\\product\\index\\trunk ===> product/index\n * @del --> 2. d:\\product\\index\\branches\\homebranches ===> product/index\n * @del --> 3. d:\\product\\index\\homebranches ===> product\n */\njdf.getProjectPath = function() {\n    var currentDir = f.currentDir(),\n        result = '';\n    if (jdf.config.projectPath != null) {\n        result = jdf.config.projectPath;\n    } else {\n        result = path.basename(f.currentDir());\n    }\n    return result;\n}\n\n/**\n * @项目工程目录初始化\n * @time 2014-2-19 10:21:37\n */\njdf.createStandardDir = function(dir) {\n    var dirArray = [];\n    dirArray[0] = jdf.config.baseDir;\n    dirArray[1] = jdf.config.cssDir;\n    dirArray[2] = jdf.config.imagesDir;\n    dirArray[3] = jdf.config.jsDir;\n    dirArray[4] = jdf.config.htmlDir;\n    dirArray[5] = jdf.config.widgetDir;\n\n    if(dir){\n        dir += '/';\n    }else{\n        dir = 'jdf_init/';\n    }\n\n    for (var i = 0; i < dirArray.length; i++) {\n        f.mkdir(dir+dirArray[i]);\n    }\n\n    var fileArray = [];\n    fileArray[0] = jdf.config.configFileName;\n    fileArray[1] = jdf.config.htmlDir + '/index.html';\n\n    var templateDir = path.resolve(__dirname, '../template/');\n\n    for (var i = 0; i < fileArray.length; i++) {\n        if (!f.exists(fileArray[i])) f.write(dir+'/'+fileArray[i], f.read(templateDir + '/' + fileArray[i]));\n    }\n    console.log('jdf project directory \"'+dir.replace('/','')+'\" init done!');\n}\n\n/**\n * @清除项目缓存文件夹\n */\njdf.clean = function() {\n    jdf.bgMkdir();\n    f.del(jdf.tempDir, function() {\n        console.log('jdf cache dir clean done');\n    });\n}\n\n/**\n * @在当前文件夹下编译less/sass\n */\njdf.buildCss = function() {\n    var BuildCss = require(\"./buildCss.js\");\n    var Node_watch = require('node-watch');\n\n    console.log('jdf buildCss ...');\n    var currentDir = jdf.currentDir;\n    BuildCss.init(currentDir, currentDir);\n\n    var regStr = '\\\\.(less|sass|scss)$';\n    var reg = new RegExp(regStr);\n\n    Node_watch(currentDir, function(filename) {\n        if (f.isFile(filename)) {\n            if (!reg.test(filename)) return;\n        }\n\n        console.log(filename.replace(currentDir, ''));\n        BuildCss.init(currentDir, currentDir);\n    });\n}\n\n/**\n * @build html(widget), css(sass, less), js(es6)\n */\njdf.buildMain = function(type, param) {\n    if(jdf.config.build.hasCmdLog) console.log('jdf build ...');\n    //console.log('['+$.getTime(':', false)+'] build ...');\n\n    //build css\n    if(jdf.config.build.hasCmdLog) console.log('jdf build css ...');\n\n    var BuildCss = require(\"./buildCss.js\");\n    if(jdf.config.outputCustom){\n        var list = jdf.config.outputCustom;\n        var listArray = list.split(',');\n        for (var i=0; i<listArray.length; i++ ){\n            var item = listArray[i];\n            if ( f.exists(item) ) {\n                BuildCss.init(item, jdf.bgCurrentDir + '/' + item);\n            }\n        }\n    }else{\n        BuildCss.init(jdf.config.cssDir, jdf.bgCurrentDir + '/' + jdf.config.cssDir);\n        BuildCss.init(jdf.config.widgetDir, jdf.bgCurrentDir + '/' + jdf.config.widgetDir);\n    }\n\n    //build es6 js\n    if(jdf.config.build.isEs6){\n        if(jdf.config.build.hasCmdLog) console.log('jdf build js ...');\n\n        if(jdf.config.build.es6Entry){\n            //config.json\n            // \"build\":{\n            //     \"isEs6\": true,\n            //     \"es6Entry\": {\n            //         \"index\": [\"./js/index.js\"],\n            //         \"list\": [\"./js/list.js\"]\n            //     }\n            // }\n\n            // //unify entrance\n            // var dist = type == \"output\"\n            //     ? jdf.currentDir+ '/'+jdf.config.outputDirName+'/'+jdf.getProjectPath() + '/' + jdf.config.jsDir\n            //     : jdf.bgCurrentDir + '/' + jdf.config.jsDir ;\n\n            // // use webpack && babel build es6\n            // var BuildByWebpack = require('./buildByWebpack.js');\n            // BuildByWebpack.init(\n            //     jdf.currentDir + '/' ,\n            //     jdf.config.build.es6Entry,\n            //     dist,\n            //     type == \"output\"\n            // );\n        }else{\n            var BuildJs = require('./BuildJs.js');\n\n            if(jdf.config.outputCustom) {\n                var list = jdf.config.outputCustom;\n                var listArray = list.split(',');\n                for (var i=0; i<listArray.length; i++ ){\n                    var item = listArray[i];\n                    if ( f.exists(item) ) {\n                        BuildJs.init(item, jdf.bgCurrentDir);\n                    }\n                }\n            }else{\n                BuildJs.init(jdf.config.jsDir, jdf.bgCurrentDir);\n                BuildJs.init(jdf.config.widgetDir, jdf.bgCurrentDir);\n            }\n        }\n    }\n\n    //build html (todo jdf.config.outputCustom)\n    var buildHtmlDir = '/' + jdf.config.buildDirName + '/';\n    var buildHtmlDirFull = jdf.currentDir + buildHtmlDir;\n    if (f.exists(buildHtmlDirFull)) {\n        var BuildWidget = require(\"./buildWidget.js\");\n        if(jdf.config.build.hasCmdLog) console.log('jdf build html...');\n        var encoding = jdf.config.output.encoding;\n        var basedirlist = f.getdirlist(buildHtmlDirFull, '.html$');\n        basedirlist.forEach(function(source) {\n            var target = path.normalize(jdf.bgCurrentDir + buildHtmlDir + source.replace(buildHtmlDirFull, ''));\n            BuildWidget.init(source, f.read(source), type, function(data) {\n                if(f.excludeFiles(target)){\n                    f.write(target, data.tpl, encoding);\n                }\n                return 'ok';\n            }, param);\n            //require('./buildByNunjucks').init(source);\n        });\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/base.js":"/**\n * @公用方法\n */\nvar path = require('path');\nvar fs = require('fs');\nvar util = require('util');\nvar crypto = require('crypto');\n\nvar $ = module.exports = {\n    reg: {\n        widget: function() {\n            //检测是否存在和取widget name\n            return new RegExp('{%widget\\\\s.*?name=\"(.*?)\".*?%}', 'gm');\n        },\n        widgetType: function() {\n            //取widget type\n            return new RegExp('{%widget\\\\s.*?type=\"(.*?)\".*?%}', 'gm');\n        },\n        widgetData: function() {\n            //取widget data\n            return new RegExp('{%widget\\\\s.*?data=\\'(.*?)\\'.*?%}', 'gm');\n        },\n        widgetComment: function() {\n            //取widget 是否有注释\n            return new RegExp('{%widget\\\\s.*?comment=[\\'|\"](.*?)[\\'|\"].*?%}', 'gm');\n        },\n        widgetPosition: function() {\n            //取widget position\n            return new RegExp('{%widget\\\\s.*?position=\"(.*?)\".*?%}', 'gm');\n        },\n        widgetOutputName: function() {\n            //当前页面输出的widget name\n            return new RegExp('{%widgetOutputName=\"(.*?)\".*?%}', 'gm');\n        },\n        commentWidget: function() {\n            //匹配注释的widget\n            return new RegExp('<!--\\\\s*{%widget\\\\s.*?name=\"(.*?)\".*?%}\\\\s*-->', 'gm');\n        },\n        notCommentWidget: function() {\n            //匹配非注释的widget\n            return new RegExp('^(<!--){0}[.\\\\n\\\\t\\\\r\\\\s]*{%widget\\\\s.*?name=\"(.*?)\".*?%}[.\\\\n\\\\r\\\\t\\\\s]*(-->){0}$', 'gm');\n        },\n        cssStr: '<link\\\\s.*?stylesheet\\\\s*.*href=\"(.*?)\".*?>',\n        cssLink: function() {\n            return new RegExp(this.cssStr, 'gm');\n        },\n        jsStr: '<script\\\\s.*?src=\"(.*?)\".*?</script>',\n        jsLink: function() {\n            return new RegExp(this.jsStr, 'gm');\n        },\n        staticPre: function() {\n            return new RegExp('.*?static', 'gm');\n        },\n        htmlComment: function() {\n            return new RegExp('<!--[\\\\S\\\\s]*?-->', 'g');\n        }\n    },\n    placeholder: {\n        csscomboLink: function(url) {\n            return '<link type=\"text/css\" rel=\"stylesheet\"  href=\"' + url + '\" source=\"combo\"/>\\r\\n';\n        },\n        cssLink: function(url) {\n            return '<link type=\"text/css\" rel=\"stylesheet\"  href=\"' + url + '\" source=\"widget\"/>\\r\\n';\n        },\n        jscomboLink: function(url) {\n            return '<script type=\"text/javascript\" src=\"' + url + '\" source=\"widget\"></script>\\r\\n';\n        },\n        jsLink: function(url) {\n            return '<script type=\"text/javascript\" src=\"' + url + '\" source=\"widget\"></script>\\r\\n';\n        },\n        insertHead: function(content, str) {\n            //innsertBefore </head>\n            if (/<\\/head>/.test(content)) {\n                return content.replace('</head>', str + '</head>');\n            //innsertBefore <body>    \n            } else if(/<body/.test(content)){\n                return content.replace('<body', str + '<body');\n            } else {\n                return str + content;\n            }\n        },\n        insertBody: function(content, str) {\n            if (/<\\/body>/.test(content)) {\n                return content.replace('</body>', str + '</body>');\n            } else {\n                return content + str;\n            }\n        }\n    },\n    is: {\n        //数据源文件\n        dataSourceSuffix: '.json',\n        dataSource: function(pathName) {\n            return path.extname(pathName) === this.dataSourceSuffix;\n        },\n        tplSuffix: '.tpl',\n        tpl: function(pathName) {\n            return path.extname(pathName) === this.tplSuffix;\n        },\n        vmSuffix: '.vm',\n        vm: function(pathName) {\n            return path.extname(pathName) === this.vmSuffix;\n        },\n        smartySuffix: '.smarty',\n        smarty: function(pathName) {\n            return path.extname(pathName) === this.smartySuffix;\n        },\n        html: function(pathName) {\n            return path.extname(pathName) === '.html';\n        },\n        cssSuffix: '.css',\n        css: function(pathName) {\n            return path.extname(pathName) === this.cssSuffix;\n        },\n        less: function(pathName) {\n            return path.extname(pathName) === '.less';\n        },\n        //这个扩展名比较悲剧\n        sass: function(pathName) {\n            return path.extname(pathName) === '.scss';\n        },\n        jsSuffix: '.js',\n        js: function(pathName) {\n            return path.extname(pathName) === this.jsSuffix;\n        },\n        jpg: function(pathName) {\n            return path.extname(pathName) === '.jpg';\n        },\n        png: function(pathName) {\n            return path.extname(pathName) === '.png';\n        },\n        //图片文件\n        img: function(pathName) {\n            var name = path.extname(pathName);\n            return name === '.jpg' || name === '.jpeg' || name === '.png' || name === '.gif';\n        },\n        //含有http,https\n        httpLink: function(str) {\n            return /^http:\\/\\/|https:\\/\\/|\\/\\/|^\\/\\//.test(str);\n        },\n        //是否为图片url\n        imageFile: function(str) {\n            var reg = new RegExp('.' + '(' + $.imageFileType() + ')');\n            return reg.test(str);\n        },\n        babel: function(pathName) {\n            return path.extname(pathName) === '.babel';\n        }\n    },\n    /**\n     * @过滤的文件名，不参与copy、deploy、output\n     */\n    excludeFiles: function(){\n        return '\\\\.svn|Thumbs\\\\.db|\\\\.DS_Store|\\\\.git|\\\\.eslintrc|\\\\.gitignore|npm-debug\\\\.log|\\\\.npmignore|\\\\.vm|\\\\.smarty|\\\\.tpl|\\\\.scss|\\\\.less|\\\\.psd';\n    },\n    imageFileType: function() {\n        return 'svg|tiff|wbmp|png|bmp|fax|gif|ico|jfif|jpe|jpeg|jpg|cur|eot|ttf|woff';\n    },\n    /**\n     * @去掉path中的//\n     */\n    replaceSlash: function(path) {\n        return path.replace(/\\/\\//gm, '/');\n    },\n    /**\n     * @去空格\n     */\n    trim: function(str) {\n        return str.replace(/\\s/g, '');\n    },\n    /**\n     * @变量存在返回变量,变量不存在返回''\n     */\n    getVar: function(t) {\n        if (typeof(t) != 'undefined') {\n            return t;\n        }\n        return '';\n    }\n}\n\n/**\n * @取当前时间 2014-01-14 \n * @return 2014-01-14\n */\n$.getDay = function(separator) {\n    if (typeof(separator) == 'undefined') {\n        separator = '-';\n    }\n    var myDate = new Date();\n    var year = myDate.getFullYear();\n    var month = myDate.getMonth() + 1;\n    month = month < 10 ? '0' + month : month;\n    var day = myDate.getDate();\n    day = day < 10 ? '0' + day : day;\n    return year + separator + month + separator + day;\n}\n\n/**\n * @取当前时间 12:11:10 \n * @return 14:44:55\n */\n$.getTime = function(separator, hasMs) {\n    if (typeof(separator) == 'undefined') {\n        separator = ':';\n    }\n    var myDate = new Date();\n    var hour = myDate.getHours();\n    hour = hour < 10 ? '0' + hour : hour;\n    var mint = myDate.getMinutes();\n    mint = mint < 10 ? '0' + mint : mint;\n    var seconds = myDate.getSeconds();\n    seconds = seconds < 10 ? '0' + seconds : seconds;\n    var ms = myDate.getMilliseconds();\n    var result = hour + separator + mint + separator + seconds;\n    if (typeof(hasMs) != 'undeinfed' && hasMs) {\n        result += separator + ms;\n    }\n    return result;\n}\n\n/**\n * @取当前时间戳\n * @return 1439361919265\n */\n$.getTimestamp = function() {\n    return new Date().getTime();\n}\n\n/**\n * @name $.isArray\n * @param {All} obj 主体\n * @return {Boolean} true/false\n */\n$.isArray = function(obj) {\n    return Object.prototype.toString.apply(obj) === '[object Array]';\n}\n\n/**\n * @less/sass文件名称转css后缀\n * @time 2014-3-5\n * @example  a.less ==> a.css; a.sass ==> a.css\n */\n$.getCssExtname = function(filename) {\n    return filename.replace(/(scss|less)$/g, 'css');\n}\n\n$.getJsExtname = function(filename) {\n    return filename.replace(/babel$/, 'js');\n}\n\n/**\n * @getUrlParam\n * @time 2014-10-8\n */\n$.getUrlParam = function(url) {\n    var urlParseRE = /^(((([^:\\/#\\?]+:)?(?:(\\/\\/)((?:(([^:@\\/#\\?]+)(?:\\:([^:@\\/#\\?]+))?)@)?(([^:\\/#\\?\\]\\[]+|\\[[^\\/\\]@#?]+\\])(?:\\:([0-9]+))?))?)?)?((\\/?(?:[^\\/\\?#]+\\/+)*)([^\\?#]*)))?(\\?[^#]+)?)(#.*)?/;\n    return urlParseRE.exec(url);\n}\n\n/**\n * @http get\n * @param {String} url 域名\n * @param {Function} callback 回调\n * @example \n\t$.httpget('http://www.baidu.com/?tn=sitehao123', function (data){\n\t\tconsole.log(data);\n\t});\n */\n$.httpget = function(url, callback) {\n    var http = require('http');\n\n    var matches = $.getUrlParam(url);\n    var host = matches[6];\n    var param = (matches[13] ? matches[13] : '') + (matches[16] ? matches[16] : '') + (matches[17] ? matches[17] : '');\n\n    if (typeof(callback) == 'undefined') {\n        var callback = null;\n    }\n\n    var options = {\n        host: host,\n        path: param,\n        callback: callback\n    };\n\n    var requestCallback = function(response) {\n        var str = '';\n\n        response.on('data', function(chunk) {\n            str += chunk;\n        });\n\n        response.on('end', function() {\n            if (options.callback) options.callback(str);\n        });\n    }\n\n    var req = http.request(options, requestCallback);\n    req.on('error', function(e) {\n        //console.log(e);\n    });\n    req.end();\n\n    req.setTimeout(500, function() {\n        req.abort();\n    });\n}\n\n/**\n * @数组去重\n * @算法: 设置成一个对象的属性\n */\n$.uniq = function(arr) {\n    if ($.isArray(arr)) {\n        var obj = {};\n        for (var i = 0; i < arr.length; i++) {\n            obj[arr[i]] = i;\n        }\n        arr = [];\n        var j = 0;\n        for (var i in obj) {\n            arr[j] = i;\n            j += 1;\n        }\n    }\n    return arr;\n}\n\n/**\n * @对象merage\n * @obj2的权重大\n */\n$.merageObj = function(obj1, obj2) {\n    for (var p in obj2) {\n        try {\n            if (obj2[p].constructor == Object) {\n                obj1[p] = $.merageObj(obj1[p], obj2[p]);\n            } else {\n                obj1[p] = obj2[p];\n            }\n        } catch (e) {\n            obj1[p] = obj2[p];\n        }\n    }\n    return obj1;\n}\n\n/**\n * @inArray\n * @param {Array} arr 主体\n * @param {String} str字符串\n * @param {Boolean} include是否和匹配的字符串完全相同或者是包含的关系\n */\n$.inArray = function(arr, str, include) {\n    if (util.isArray(arr)) {\n        var res = false;\n        arr.forEach(function(item) {\n            if (typeof(include) != 'undefined' && include) {\n                var reg = new RegExp(str, 'gm')\n                if (reg.test(item)) {\n                    res = true;\n                }\n            } else {\n                if (item == str) {\n                    res = true;\n                }\n            }\n        });\n        return res;\n    }\n}\n\n/**\n * @md5\n * @param {String} str 字符串\n */\n$.md5 = function(str) {\n    return crypto.createHash('md5').update(str).digest('hex');\n}\n\n/**\n * @arrayMax\n * @param {Array} arr 传入的数组 \n */\n$.arrayMax = function(arr) {\n    if (util.isArray(arr)) {\n        var arrTemp=arr[0];\n        for (var i=0; i<arr.length; i++){\n            if(arr[i]>arrTemp){\n                arrTemp = arr[i];\n            }\n        }\n        return arrTemp;\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/file.js":"/**\n* @文件操作 \n*/\n\n//原生组件\nvar path = require('path');\nvar fs = require('fs');\nvar util = require('util');\nvar Url = require('url');\nvar iconv = require('iconv-lite');\n//var crypto = require('crypto');\n\n//core function\nvar f = module.exports = {\n\texists:fs.existsSync || path.existsSync,\n\tisFile : function(path){\n\t\treturn this.exists(path) && fs.statSync(path).isFile();\n\t},\n\tisDir : function(path){\n\t\treturn this.exists(path) && fs.statSync(path).isDirectory();\n\t},\n\tisBlankDir: function(path){\n\t\treturn f.getdirlist(path).length == 0;\n\t},\n\tisWin : process.platform.indexOf('win') === 0,\n\trealpath : function(path){\n\t\tif(path && f.exists(path)){\n\t\t\tpath = fs.realpathSync(path);\n\t\t\tif(this.isWin){\n\t\t\t\tpath = path.replace(/\\\\/g, '/');\n\t\t\t}\n\t\t\tif(path !== '/'){\n\t\t\t\tpath = path.replace(/\\/$/, '');\n\t\t\t}\n\t\t\treturn path;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t},\n\t/**\n\t* @路径格式化 \\ ==> /\n\t*/\n\tpathFormat:function(str){\n\t\treturn str.replace(/\\\\/g,'\\/');\n\t},\n\tcurrentDir:function(){\n\t\treturn fs.realpathSync('.');\n\t},\n\t/**\n\t* @读文件\n\t* @update \n\t*/\n\tread:function(path,encodeing){\n\t\tif (this.exists(path)){\n\t\t\ttry {\n\t\t\t\tif(typeof(encodeing) != 'undefined' && encodeing == null){\n\t\t\t\t\treturn fs.readFileSync(path);\n\t\t\t\t}else{\n\t\t\t\t\tvar encodeing = encodeing || 'utf8';\n\t\t\t\t\treturn fs.readFileSync(path, encodeing);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tconsole.log(\"jdf error [f.read]\");\n\t\t\t\tconsole.log(path);\n\t\t\t\tconsole.log(e);\n\t\t\t}\t\t\n\t\t}\n\t},\n\t/**\n\t* @写文件\n\t*/\n\twrite:function(path,source,encodeing){\n\t\ttry {\n\t\t\tvar encodeing = encodeing || 'utf8';\n\n\t\t\tif(encodeing == 'gbk'){\n\t\t\t\tvar s = iconv.decode(source, 'gbk');\n    \t\t\tsource = iconv.encode(s, 'gbk');\n    \t\t}\n\n\t\t\tfs.writeFileSync(path , source, encodeing);\n\t\t} catch (e) {\n\t\t\tconsole.log(\"jdf error [f.write] \" + path);\n\t\t\tconsole.log(e);\n\t\t}\n\t},\n    /**\n     * @copy二进制文件\n     */\n    copyBinary:function(srcFile, destFile){\n    \tvar BUF_LENGTH = 64 * 1024;\n\t\tvar _buff = new Buffer(BUF_LENGTH);\n\t\t\n        try {\n            var fdr = fs.openSync(srcFile, 'r')\n            var stat = fs.fstatSync(fdr)\n            var fdw = fs.openSync(destFile, 'w', stat.mode)\n            var bytesRead = 1\n            var pos = 0\n\n            while (bytesRead > 0) {\n                bytesRead = fs.readSync(fdr, _buff, 0, BUF_LENGTH, pos)\n                fs.writeSync(fdw, _buff, 0, bytesRead)\n                pos += bytesRead\n            }\n\n            fs.closeSync(fdr)\n            fs.closeSync(fdw)\n        } catch (e) {\n            console.log(\"jdf error [f.copyBinary] \" + srcFile);\n            console.log(e);\n        }\n    },\n\t/**\n\t* @删除文件\n\t* @param source {String} 原始路径\n\t* @param callback {Function} 回调函数\n\t*/\n\tdel:function(source,callback){\n\t\tvar removedAll = true;\n\t\tvar source = f.realpath(source);\n\n\t\tif(source){\n\t\t\tif(f.isDir(source)){\n\t\t\t\tvar files;\n\t\t\t\ttry {\n\t\t\t\t\tfiles = fs.readdirSync(source);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tconsole.log(err);\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tfiles.forEach(function(name){\n\t\t\t\t\tif(name != '.' && name != '..') {\n\t\t\t\t\t\tremovedAll = f.del(source + '/' + name) && removedAll;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tif(removedAll) {\n\t\t\t\t\tif(fs.existsSync(source)){\n\t\t\t\t\t\tfs.rmdirSync(source);\t\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(callback) callback();\n\t\t\t\t}\n\t\t\t} else if(f.isFile(source)){\n\t\t\t\tif (f.isWin && f.exists(source)) {\n\t\t\t\t\tfs.chmodSync(source, 666);\n\t\t\t\t}\n\t\t\t\tfs.unlinkSync(source);\n\t\t\t} else {\n\t\t\t\tremovedAll = false;\n\t\t\t}\n\t\t}\n\n\t\treturn removedAll;\n\t},\n\t/**\n\t* @文件筛选\n\t* @param {String}  source  原始文件夹/文件路径\n\t* @param {String}  include  包括的文件后缀\n\t* @param {String}  exclude  不包括的文件后缀\n\t* @example f.filter(source, null, 'less|scss')\n\t*/\n\tfilter:function(source, include, exclude){\n\t\tvar filterTag = true;\n\t\tif (include) {\n\t\t\tvar reg = new RegExp(include, 'gm');\n\t\t\tvar regResult = reg.exec(source);\n\t\t\tif (!regResult) {\n\t\t\t\tfilterTag = false;\n\t\t\t}\n\t\t}\n\n\t\tif (exclude) {\n\t\t\tvar reg = new RegExp(exclude, 'gm');\n\t\t\tvar regResult = reg.exec(source);\n\t\t\tif (regResult) {\n\t\t\t\tfilterTag = false;\n\t\t\t}\n\t\t}\n\n\t\treturn filterTag;\n\t},\n\t/**\n\t* @文件夹/文件复制不包括那些文件\n\t*/\n\texcludeFiles:function(filename){\n\t\t return !(/.svn|Thumbs.db|.DS_Store/.test(filename));\n\t},\n\t/**\n\t* @文件夹/文件复制\n\t* @param source {String} 原始文件夹/文件路径\n\t* @param target {String} 目标文件夹/文件路径\n\t* @param uncover {Boole} false 覆盖\n\t* @param move {Boole} false 移动\n\t* @example f.copy(source,target,'include.js','exclude.css',false,false,false);\n\t*/\n\tcopy:function(source, target, include, exclude, uncover, move , logTag, encoding){\n\t\tvar removedAll = true;\n\t\tvar source = f.realpath(source);\n\n\t\tif(source && f.filter(source, null, exclude)){\n\t\t\tif (!f.exists(target) && f.isDir(source)) {\n\t\t\t\tf.mkdir(target);\n                //fs.chmodSync(target, 666);\n\t\t\t}\n\t\t\t\n\t\t\tif(f.isDir(source)){\n\t\t\t\tfs.readdirSync(source).forEach(function(name){\n\t\t\t\t\tif(name != '.' && name != '..' && f.excludeFiles(name)  ) {\n\t\t\t\t\t\tremovedAll = f.copy(source + '/' + name,target + '/' + name, include, exclude, uncover, move , logTag ) && removedAll;\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t//Bug  return binding.rmdir(pathModule._makeLong(path));\n\t\t\t\t//https://github.com/joyent/node/issues/3051\n\t\t\t\t//Yes, fs.rmdirSync throw an error, as you see. Because the directory still has a file even after fs.unlinkSync is called to remove the file.\n\t\t\t\tif(move && removedAll) {\n\t\t\t\t\tfs.rmdirSync(source);\n\t\t\t\t}\n\t\t\t} else if(f.isFile(source) && f.filter(source, include, exclude)){\n\t\t\t\tif(uncover && f.exists(target)){\n\t\t\t\t\t//uncover\n\t\t\t\t\tremovedAll = false;\n\t\t\t\t} else {\n\t\t\t\t\t//中文会报错\n\t\t\t\t\tf.write(target,fs.readFileSync(source), encoding);\n                    //f.copyBinary(source,target)\n\t\t\t\t\tif(move) {\n\t\t\t\t\t\tfs.unlinkSync(source);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tremovedAll = false;\n\t\t\t}\n\t\t} else {\n\t\t\tif (typeof(logTag) != 'undefined' && logTag) {\n\t\t\t\tconsole.log('jdf error : [ '+source+' ] --- no such file or dir');\n\t\t\t}\n\t\t}\n\t\treturn removedAll;\n\t},\n\t/**\n\t* @下载文件\n\t* @param path 下载文件路径\n\t* @param target 目标文件名\n\t*/\n\tdownload:function(source,target,callback){\n\t\tvar http = require('http');\n\t\tvar fs = require('fs');\n\n\t\tvar file = fs.createWriteStream(target);\n\t\tvar request = http.get(source,function(response) {\n\t\t\tvar status = response.statusCode;\n\t\t\tresponse.pipe(file);\n\n\t\t\tresponse.on('end',function(){\n\t\t\t\tif(status >= 200 && status < 300 || status === 304){\n\t\t\t\t\tif(callback) callback('ok');\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif(status === 404){\n\t\t\t\t\tconsole.log('jdf download error '+source+ ' not exist.');\n\t\t\t\t\tif(callback) callback('error');\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tresponse.on('error',function(err){\n\t\t\t\t var msg = typeof err === 'object' ? err.message : err;\n\t\t\t\t console.log(err);\n\t\t\t})\n\t\t});\n\t},\n\ttar:function(source,target,callback){\n\t\t//引用的组件\n\t\tvar tar = require(\"tar\");\n\t\tfs.createReadStream(source)\n\t\t.pipe(tar.Extract({ path:target }))\n\t\t.on(\"error\",function (err) {\n\t\t\tconsole.error(\"jdf [file.tar] error \"+source)\n\t\t})\n\t\t.on(\"end\", function () {\n\t\t\tif(callback) callback();\n\t\t})\n\t}\n}\n\n//同步mkdir\nf.mkdir = function(p, mode, made) {\n    if (mode === undefined) {\n        mode = 0777 & (~process.umask());\n    }\n    if (!made) made = null;\n\n    if (typeof mode === 'string') mode = parseInt(mode, 8);\n    p = path.resolve(p);\n\n\tif ( !f.exists(p) ) {\n\t\ttry {\n\t\t\tfs.mkdirSync(p, mode);\n\t\t\tmade = made || p;\n\t\t}\n\t\tcatch (err0) {\n\t\t\tswitch (err0.code) {\n\t\t\t\tcase 'ENOENT' :\n\t\t\t\t\tmade = f.mkdir(path.dirname(p), mode, made);\n\t\t\t\t\tf.mkdir(p, mode, made);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tvar stat;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tstat = fs.statSync(p);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (err1) {\n\t\t\t\t\t\tthrow err0;\n\t\t\t\t\t}\n\t\t\t\t\tif (!stat.isDirectory()) throw err0;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\treturn made;\n\t}\n};\n\n/**\n* @递归读取文件列表\n* @2014-4-17 17:16:14\n*/\nf.getdirlist = function(source, include, exclude){\n\tvar _this = this;\n\tvar result = [];\n\t//var source = f.realpath(source);\n\tif(source){\n\t\tif(f.isDir(source)){\n\t\t\tfs.readdirSync(source).forEach(function(name){\n\t\t\t\tresult = result.concat( _this.getdirlist(source + '/' + name, include, exclude) );\n\t\t\t});\n\t\t} else if(f.isFile(source) && f.filter(source, include, exclude)){\n\t\t\tresult.push(source.replace(\"//\",\"/\"));\n\t\t}\n\t}\n\treturn result;\n}\n\n/**\n * @readJSON\n */\nf.readJSON = function(url, callback){\n\tvar res = null;\n\tif (f.exists(url)) {\n\t\ttry{\n\t\t\tvar data = f.read(url);\n\t\t\tif (data) {\n\t\t\t\tdata = JSON.parse(data);\n\t\t\t\tres = data;\n\t\t\t}\n\t\t\tif(callback) callback(res);\n\t\t}catch(e){\n\t\t\tconsole.log('jdf error [f.readJSON] \"'+url+'\" format error' );\n\t\t\tconsole.log(e);\n\t\t\t//if(callback) callback(res);\n\t\t}\n\t}else{\n\t\tconsole.log('jdf error [f.readJSON] \"'+url+'\" is not exists' );\n\t\t//if(callback) callback(res);\n\t}\n}\n\nf.moveFolderAsync=function(source,target){\n    var fork = require('child_process').fork;\n    var childPath=__dirname+\"/fileWorker.js\";\n    childPath=path.normalize(childPath);\n\n    var subProc =  fork(childPath);\n    subProc.on('message', function(data) {\n        this.disconnect();\n    });\n\n    subProc.send({\n        source:source,\n        target:target,\n        route:'copy'\n    });\n}\n\nf.delAsync=function(target){\n    var fork = require('child_process').fork;\n    var childPath=__dirname+\"/fileWorker.js\";\n    childPath=path.normalize(childPath);\n\n    var subProc =  fork(childPath);\n    subProc.on('message', function(data) {\n        this.disconnect();\n    });\n\n    subProc.send({\n        target:target,\n        route:'del'\n    });\n}\n\nf.renameFile=function(path,dest){\n\tfs.renameSync(path,dest);\n}\n\nf.base64Encode = function(file) {\n    var bitmap = fs.readFileSync(file);\n    return new Buffer(bitmap).toString('base64');\n}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/config.js":"/**\n * @统一配置文件\n */\n\n/**\n * @config Json File Content\n */\nvar configJsonFileContent = '{\\r\\n'+ \t\n'\t\"host\": \"ftpServerIp\",\\r\\n'+\t\n'\t\"user\": \"anonymous\",\\r\\n'+\n'\t\"password\": \"anonymous\",\\r\\n'+\n'\t\"projectPath\": \"\"\\r\\n'+\n'}';\n\nmodule.exports = {\n\t//\"threads\":4, 多线程\n\t//\"isbackup\":true,\n\t//\"backupPath\":\"d:/ppa\",\n\n\t\"demo\":\"http://o8tcolhwh.qnssl.com/jdf_demo.tar\",\n\t\n\t//\"demo\": \"http://putaoshu.github.io/jdf/download/jdf_demo.tar?true\",//demo示例url\n\n\t\"configFileName\": \"config.json\", //配置文件名称\n\n\t\"projectPath\": null, //工程目录前缀\n\t\n\t\"baseDir\": \"\", //静态文件名称\n\t\"cssDir\": \"css\", //css文件夹名称\n\t\"imagesDir\": \"css/i\", //images文件夹名称\n\t\"jsDir\": \"js\", //js文件夹名称\n\t\"htmlDir\": \"html\", //html文件夹名称\n\t\"widgetDir\": \"widget\", //widget文件夹名称\n\t\"buildDirName\": \"html\", //编译的html文件夹名称\n\t\n\t\"outputDirName\": \"build\", //输出的目标文件夹名称\n\t\"outputHtmlDir\": null,//输出的html文件夹名称\n\n\t\"outputCustom\": null, //输出的源文件夹名称\n\t\"widgetOutputName\": \"widget\", //输出的所有widget合并后的文件名\n\t\"widgetInputName\": [], //指定需要输出的widget名称\n\n\t\"localServerPort\": 3000, //本地服务器端口\n\t\"haslog\":true, //是否每次执行命令时发收集log信息\n\t\"configJsonFileContent\": configJsonFileContent,\n\t\n\t\"cdn\": \"//misc.360buyimg.com\", //静态cdn域名\n\t\"newcdn\": \"http://page.jd.com:81\", //newcdn\n\t\n\t\"host\": null, //远端机器IP\n\t\"user\": null, //远端机器user\n\t\"password\": null, //远端机器password\n\n\t\"serverType\": \"ftp\", //远端机器上传类型,默认为ftp,可为linux\n\t\"serverDir\": \"misc.360buyimg.com\", //上传至远端服务器文件夹的名称\n\n\t\"previewServerDir\": \"page.jd.com\", //html文件夹上传至服务器所在的文件夹名称\n\t\"widgetServerDir\": \"jdfwidget.jd.com\", //widget服务器所在的文件夹名称\n\n\t\"build\":{\n\t\t\"jsPlace\": \"insertBody\", //调试时js文件位置 insertHead|insertBody\n\t\t\"widgetIncludeComment\":true,//widget引用带注释\n\t\t\"livereload\":false, //是否开启liveload\n\t\t\"sass\":true,//是否开启sass编译\n\t\t\"less\":true,//是否开启less编译\n\t\t\"csslint\":false,//是否开启csslint\n\n\t\t\"weinre\": false, //是否开启移动设备调试\n\t\t\"weinreUrl\": \"http://123.56.105.44:8080\",//调试移动设备的服务器地址\n\n\t\t\"autoprefixer\": false, //是否打开css的autoprefixer\n\t\t\"autoprefixerOptions\":{\n        \t\"browsers\": [\"last 2 version\", 'Android >= 4.0'],\n        \t\"cascade\": true,//是否美化属性值 默认：true\n        \t\"remove\":true //是否去掉不必要的前缀 默认：true \n\t\t},\n\t\t\"hasCmdLog\":false,//build时是否在cmd里提示编译信息\n\t\t\"hasBrowserSync\":false,//用BrowserSync做为server\n\t\t\"excludeFiles\": null,//对要编译的文件/文件夹进行过滤\n\t\t\"isEs6\":false, //对js文件进行es6编译,默认为flase\n\t\t\"qrcode\":false, //命令行下是否显示二维码图片\n\t\t\"isEs6Exclude\":null //不进行es6编译的文件\n\t},\n\n\t\"output\":{\n\t\t\"concat\": {},//文件合并\n\n\t\t\"cssImagesUrlReplace\": true,//css中图片url加cdn替换\n\n\t\t\"jsUrlReplace\": false,//js文件的id和dependences是否添加cdn前缀 默认是不添加的 [名字不太好]\n\n\t\t\"jsPlace\": \"insertBody\", //编译后js文件位置 insertHead|insertBody\n\t\t\"cssCombo\": true, //css进行combo\n\t\t\"jsCombo\": true, //js进行combo todo\n\n\t\t\"combineWidgetCss\":false,//合并所有引用的widget中的css\n\t\t\"combineWidgetJs\":false,//合并所有引用的widget中的js\n\n\t\t\"hasBanner\": 1, //定义js和css的banner前缀形式。0，不需要；1，时间戳；2，md5值\n\t\t\"vm\": true, //是否开启vm编译\n\t\t\"compresshtml\": false,//是否开启压缩html文件\n\t\t\"compressJs\": true,//是否开启压缩js文件\n\t\t\"compressCss\": true,//是否开启压缩css文件\n\t\t\"compressPng\": true,//是否开启压缩png图片\n\t\t\"compressPngReg\": null,//是否压缩此参数匹配的文件\n\n\t\t\"comment\": true,//是否输出文件中的注释\n\n\t\t\"cssSprite\": true, //是否开启css sprite功能\n\t\t\"cssSpriteMode\": 1, //0: 将所有css文件中的背景图合并成一张sprite图片，1: 将每一个widget中的背景图分别合并成一张图片\n\t\t\"cssSpriteMargin\": 10, //css sprite图片之间的间距\n\t\t\"cssSpriteDirection\": 'vertical', //vertical：垂直合并，horizontal：水平合并\n\n\t\t\"base64\": false, //是否对图片进行base64编码\n\n\t\t\"imagesSuffix\": 0,\n\t\t/*0：不添加任何后缀\n\t\t  1：给css中需要cssSprite的背景图添加后缀，后缀会被添加在文件扩展名的后面。例如：test.png => test.png?20150319161000\n\t\t  2：给css中需要cssSprite的背景图添加后缀，后缀会被添加在文件名的后面，生成一个新的文件。例如：test.png => test20150319161000.png\n\t\t*/\n\n\t\t\"jsRemove\": [],//移除js中函数或者方法,比如console,y.log即配置为['console','y.log']\n\t\t\"excludeFiles\": null,//对输出的文件/文件夹进行过滤\n\t\t\"encoding\": \"utf-8\",//指定项目的编码格式：utf-8，gbk\n\n\t\t\"htmlContentReplace\":null,\n\t\t\"jsContentReplace\":null\n\t},\n\n\t\"widget\":{\n\t\t//widget预览所依赖的js\n\t\t\"js\": [\n\t\t\t\"//misc.360buyimg.com/jdf/lib/jquery-1.6.4.js\",\n\t\t\t\"//misc.360buyimg.com/jdf/1.0.0/unit/base/1.0.0/base.js\"\n\t\t],\n\t\t//widget预览所依赖的css\n\t\t\"css\": [\n\t\t\t\"//misc.360buyimg.com/jdf/1.0.0/unit/ui-base/1.0.0/ui-base.css\"\n\t\t],\n\t\t//新建widget文件夹的文件类型\n\t\t\"createFiles\": []\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/log.js":"/**\n * @Logs \n */\nvar $ = require('./base.js');\nvar jdf = require('./jdf.js');\n\nvar log = module.exports;\nvar os = require('os');\nvar SERVERURL = '';\n\nvar getIp = function(){\n\tvar net = os.networkInterfaces();\n    for(var key in net){\n        if(net.hasOwnProperty(key)){\n            var items = net[key];\n            if(items && items.length){\n                for(var i = 0; i < items.length; i++){\n                    var ip = String(items[i].address).trim();\n                    if(ip && /^\\d+(?:\\.\\d+){3}$/.test(ip) && ip !== '127.0.0.1'){\n                        return ip;\n                    }\n                }\n            }\n        }\n    }\n    return '127.0.0.1';\n};\n\nlog.get = function (){\n\tvar ip = getIp();\n\tvar version = require('../package.json').version;\n\n\treturn {\n\t\tip:ip,\t\t\n\t\tport:jdf.config.localServerPort,\n\t\tplatform:os.platform(),\n\t\thostname:os.hostname(),\n\t\tversion:version,\n\t\t//other\n\t\tprojectname:jdf.getProjectPath()\n\t}\n}\n\n/**\n * @log send\n */\nlog.send = function (str){\n\tif ( str && jdf.config.haslog == true){\n\t\tvar param = log.get();\n\t\tparam.cmd = str;\n\t\tvar str = '';\n\t\tfor (var i in param){\n\t\t\tstr += i +'=' +param[i]+'&';\n\t\t}\n\t\tstr = encodeURI(str);\n\t\t//console.log(str);\n\t\t// $.httpget('http://jdfe.sinaapp.com/log/log.php?'+str);\n\t}\n}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/base64.js":"/**\n * @css base64\n * @ctime 2015-8-18\n */\nvar $ = require('./base.js');\nvar f = require('./file.js');\nvar jdf = require('./jdf.js');\n\nvar path = require('path');\nvar base64 = module.exports = {};\n\nbase64.init = function(source){\n\tif(jdf.config.build.hasCmdLog) console.log('compress.base64---'+source);\n\tvar reg_background = /background(?:-image)?:([\\s\\S]*?)(?:;|$)/gi;\n\tvar reg_img_url = /url\\s*\\(\\s*(\"(?:[^\\\\\"\\r\\n\\f]|\\\\[\\s\\S])*\"|'(?:[^\\\\'\\n\\r\\f]|\\\\[\\s\\S])*'|[^)}]+)\\s*\\)/i;\n\tvar reg_is_base64 = /[?&]__base64/i;\n\n\tvar content = f.read(source);\n\tvar background = content.match(reg_background);\n\n\tif(background){\n\t\tcontent = escape(content);\n\t\tbackground.forEach(function(item, index){\n\t\t\tvar img_url = item.match(reg_img_url);\n\n\t\t\tif(img_url && img_url[0].match(reg_is_base64)){\n\t\t\t\tvar base64Encode = f.base64Encode(path.join(path.dirname(source), img_url[1].replace('?__base64', '')));\n\t\t\t\tcontent = content.replace(new RegExp(escape(img_url[1]), 'gi'), ('data:image/png;base64,'+base64Encode));\n\t\t\t}\n\t\t});\n\t}\n\n\treturn unescape(content);\n}","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/buildByAutoprefixer.js":"var autoprefixer = require('autoprefixer');\nvar postcss      = require('postcss');\nvar cssnext      = require('cssnext');\nvar f      \t\t = require('./file');\n \nvar doAutoprefixer = module.exports = {};\ndoAutoprefixer.init = function(file, options){\n\tvar contents = postcss([autoprefixer(options), cssnext]).process(file.contents).css;\n\tf.write(file.path, contents);\n}\n\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/buildCss.js":"/**\n* @build less/sass to css\n* @ctime 2014-3-5\n* \n* @less 文档 http://lesscss.org/#using-less-configuration syncImport\n* @npm https://npmjs.org/package/less\n* @Dist folder file size is big  ==> https://github.com/less/less.js/issues/1918\n* \n* @sass 文档 https://www.npmjs.org/package/node-sass\n* @github https://github.com/andrew/node-sass\n* @npm https://npmjs.org/package/node-sass\n* @Compatibility @mixin has \"};\"   ==>  https://github.com/andrew/node-sass/issues/254\n* \n*/\n\nvar path = require('path');\nvar fs = require('fs');\n\n//lib自身组件\nvar $ = require('./base.js');\nvar f = require('./file.js');\nvar jdf = require('./jdf.js');\nvar fileLint = require('./fileLint.js');\n\n//外部组件\nvar Sass = require('node-sass');\nvar Less = require('less');\nvar Colors = require('colors');\n\n//exports\nvar buildCss = module.exports = {};\n\n/**\n * @init\n */\nbuildCss.init = function(rSource, target){\n\tvar allTag = true;\n\tvar source = f.realpath(rSource);\n\n\tif(source){\n\t\tif(f.isDir(source)){\n\t\t\tfs.readdirSync(source).forEach(function(name){\n\t\t\t\tif(name != '.' && name != '..' && !(/.svn/.test(name))){\n\t\t\t\t\tallTag = buildCss.init(source + '/' + name, target + '/' + name) && allTag;\n\t\t\t\t}\n\t\t\t});\n\t\t} else if(f.isFile(source) && ($.is.css(source) || $.is.less(source) || $.is.sass(source) ) ){\n\t\t\tif(jdf.config.build.hasCmdLog) console.log('buildCss---'+rSource);\n\n\t\t\tvar autoprefixerFn = function(file){\n\t\t\t\tif(jdf.config.build.autoprefixer){\n\t\t\t\t\trequire('./buildByAutoprefixer.js').init({contents:file.contents, path:file.path }, jdf.config.build.autoprefixerOptions)\n\t\t\t\t}else{\n\t\t\t\t\tf.write(file.path, file.contents);\n\t\t\t\t}\n\t\t\t}\t\n\n\t\t\ttarget = $.getCssExtname(target);\n\n\t\t\tif( $.is.less(source) || $.is.sass(source) ) {\n\t\t\t\tvar sourceContent = f.read(source);\n\t\t\t\t//为空 \"node-sass\": \"0.9.3\" 编译会报错 https://github.com/sass/node-sass/issues/381\n\t\t\t\tif(sourceContent==''){\n\t\t\t\t\treturn;\t\n\t\t\t\t}\n\n\t\t\t\tif($.is.less(source) && jdf.config.build.less){\n\t\t\t\t\ttry{\n\t\t\t\t\t\tLess.render(sourceContent, {filename: source, syncImport:true}, function(error, output){\n\t\t\t\t\t\t\tif(error){\n\t\t\t\t\t\t\t\tconsole.log(error);\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tvar targetContent = output.css;\n\t\t\t\t\t\t\t\tif(jdf.config.build.csslint) fileLint.init(source);\n\t\t\t\t\t\t\t\tautoprefixerFn({contents:targetContent, path:target });\n\t\t\t\t\t\t\t\t//f.write(target, targetContent);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}catch(e){\n\t\t\t\t\t\tconsole.log('jdf error [jdf.buildCss] - less');\n\t\t\t\t\t\tconsole.log(Colors.red('> '+source));\n\t\t\t\t\t\tconsole.log(Colors.red('>'), e);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif($.is.sass(source) && jdf.config.build.sass){\n\t\t\t\t\ttry{\n\t\t\t\t\t\tvar css = Sass.renderSync({\n\t\t\t\t\t\t\tdata: sourceContent,\n\t\t\t\t\t\t\tincludePaths: [path.dirname(source)],\n\t\t\t\t\t\t\t// outputStyle: 'compressed'\n\t\t\t\t\t\t\toutputStyle: 'expanded'\n\t\t\t\t\t\t});\n\t\t\t\t\t\tif(jdf.config.build.csslint) fileLint.init(source);\n\t\t\t\t\t\tautoprefixerFn({contents:css.css.toString(), path:target });\n\t\t\t\t\t\t// f.write(target, css.css);\n\t\t\t\t\t}catch(e){\n\t\t\t\t\t\tconsole.log('jdf error [jdf.buildCss] - sass');\n\t\t\t\t\t\tconsole.log(Colors.red('> '+source));\n\t\t\t\t\t\tconsole.log(Colors.red('> line: ' + e.line + ', column: ' + e.column));\n\t\t\t\t\t\tconsole.log(Colors.red('>'), 'message: ' + e.message);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif($.is.css(source) && jdf.config.build.autoprefixer){\n\t\t\t\tvar sourceContent = f.read(source);\n\t\t\t\tautoprefixerFn({contents:sourceContent, path:target })\n\t\t\t}\n\t\t} else {\n\t\t\tallTag = false;\n\t\t}\n\t} else {\n\t\t//console.log('error');\n\t}\n\treturn allTag;\n}","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/fileLint.js":"/**\n * @filellint\n * @ctime 2014-10-8\n */\n\nvar os = require('os');\nvar Htmllint = require('htmllint');\nvar Csslint = require('csslint').CSSLint;\nvar Jslint = require('atropa-jslint');\nvar colors = require('colors');\nvar f = require('./file');\nvar $ = require('./base');\n\n/**\n * @init\n * @param {String} filename 文件名称\n */\nexports.init = function(filename){\n\tif(!typeof(filename) !== 'undefined'){\n\t\tif(f.isDir(filename)){\n\t\t\tvar filelist = f.getdirlist(filename, '(html|vm|tpl|css|scss|less|js)$');\n\n\t\t\tfilelist.forEach(function(file){\n\t\t\t\troute(file);\n\t\t\t});\n\n\t\t}else{\n\t\t\troute(filename);\n\t\t}\n\t}\n\n\tfunction route(file){\n\t\tvar exists = f.exists(file);\n\n\t\tif($.is.httpLink(file)){\n\t\t\thttpLinkLint(file);\n\t\t\treturn;\n\t\t}\n\n\t\tif(exists){\n\t\t\tif($.is.html(file) || $.is.vm(file) || $.is.tpl(file)){\n\t\t\t\thtmlLint(file);\n\n\t\t\t}else if($.is.css(file) || $.is.less(file) || $.is.sass(file)){\n\t\t\t\tcssLint(file);\n\n\t\t\t}else if($.is.js(file)){\n\t\t\t\tjsLint(file);\n\n\t\t\t}else{\n\t\t\t\tconsole.log('jdf warning: can not lint the [' + file + '].\\n');\n\t\t\t}\n\t\t}else{\n\t\t\tconsole.log('jdf error: the [' + file + '] may be not exist.');\n\t\t}\n\t}\n}\n\nfunction htmlLint(filename){\n\tvar content = f.read(filename);\n\tconsole.log(colors.yellow(os.EOL + 'jdf htmllint: ', filename));\n\n\tHtmllint(content).forEach(function(item, index){\n\t\tconsole.log('#' + (index+1));\n\t\tconsole.log(colors.red('> '), 'line: ' + item.line + ', column: ' + item.column);\n\t\tconsole.log(colors.red('> '), 'msg: ' + item.msg);\n\t});\n}\n\nfunction cssLint(filename){\n\tvar content = f.read(filename);\n\tvar result = Csslint.verify(content);\n\t\t\n\tif(result && result.messages.length){\n\t\tvar n = 0;\n\t\tvar messagesType = function (type){\n\t\t\t return type == 'error' || type == 'warning';\n\t\t}\n\t\tresult.messages.forEach(function (message, i){\n\t\t\tvar type = message.type;\n\t\t\tif(messagesType(type)){\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t});\n\n\t\tconsole.log(colors.yellow(os.EOL + 'jdf csslint: ' + filename));\n\n\t\tresult.messages.forEach(function (message, index){\n\t\t\tvar type = message.type;\n\n\t\t\tif(messagesType(type)){\n\t\t\t\tconsole.log('#'+(index+1));\n                console.log(colors.red('> '), 'line: ' + message.line + ', column: ' + message.col);\n                console.log(colors.red('> '), 'msg: ' + message.message);\n                console.log(colors.red('> '), 'at: ' + message.evidence);\n            }\n\t\t});\n\n\t}else{\n\t\tconsole.log('jdf csslint: ' + filename + ' is ok' );\n\t}\n}\n\nfunction jsLint(filename){\n\tvar result = Jslint.JSLINT(f.read(filename));\n\n    if(result) {\n        console.log(os.EOL+filename+' is OK.');\n    }else{\n        console.log(colors.yellow(os.EOL + 'jdf jslint: ' + filename));\n        Jslint.JSLINT.errors.forEach(function (error, index) {\n            if(error){\n                console.log('#'+(index+1));\n                console.log(colors.red('> '), 'line: ' + $.getVar(error.line) + ', column: ' + $.getVar(error.character));\n                console.log(colors.red('> '), 'msg: ' + $.getVar(error.reason));\n                console.log(colors.red('> '), 'at: ' + $.getVar(error.evidence).replace(/\\t/g,''));\n            }\n        });\n    }\n}\n\nfunction httpLinkLint(link){\n\t$.httpget(link, function(data){\n\t\tconsole.log(colors.yellow(os.EOL + 'jdf http-link-lint: ', link));\n\t\tHtmllint(data).forEach(function(item, index){\n\t\t\tconsole.log('#' + (index+1));\n\t\t\tconsole.log(colors.red('> '), 'line: ' + item.line + ', column: ' + item.column);\n\t\t\tconsole.log(colors.red('> '), 'msg: ' + item.msg);\n\t\t});\n\t});\n}","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/buildJs.js":"var f = require(\"./file.js\");\nvar jdf = require(\"./jdf.js\");\nvar babelCore = require('babel-core');\n\nvar path = require('path');\nvar $ = require('./base.js');\n\n/**\n * @build js\n * @time 2016-11-7\n * @param src 输入文件/文件夹相对路径\n * @param dist 输出文件/文件夹相对路径\n * @doc http://babeljs.io/docs/usage/api/\n */\n\nexports.init = function(src, dist){\n\tif(f.isDir(src)){\n       var filelist = f.getdirlist(src,'(js)$',jdf.config.build.isEs6Exclude);\n        filelist.forEach(function(item){\n            babel(item, dist);\n        })\n    }else if(f.isFile(src)){\n       babel(src, dist);\n    }else{\n    \tconsole.log('jdf buildJs \"' + src + '\"\" is not exists');\n    }\n}\n\nvar babel = function(src, dist){\n\t\n    //http://babeljs.io/docs/usage/api/#options\n    //https://github.com/babel/babel/tree/master/packages/babel-preset-es2015\n    \n    var options = {\n\t\tpresets: [\n            require('babel-preset-es2015')\n            // require('babel-preset-es2015-without-strict')\n\t\t\t,require('babel-preset-stage-1')\n\t\t]\n\t}\n\n\ttry {\n\t\tvar dist = path.normalize(dist +'/'+ src);\n\t\tvar src = path.normalize(jdf.currentDir +'/'+ src);\n        \n        if(jdf.config.build.hasCmdLog) console.log('buildES6js---'+ src);\n\t\t\n        var result = babelCore.transformFileSync(src, options);\n\t\tf.write(dist, result.code);\n\n    } catch (e) {\n        console.log('jdf error [jdf.buildJS.ES6] - ' + src);\n        console.log(e);\n    }\n}","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/buildWidget.js":"/**\n* @build widget 引入其内容和相关css,js文件以及css,js路径替换\n* @param inputPath 文件路径\n* @param content 文件内容\n* @param type 编译类型 build || release\n* @example \n\t{%widget name=\"unit\"%} \n\t==> \n\t<link type=\"text/css\" rel=\"stylesheet\"  href=\"/widget/base/base.css\" source=\"widget\"/>\n\t==>\n\t<link type=\"text/css\" rel=\"stylesheet\"  href=\"/app/css/widget.css\" source=\"widget\"/>\n\n\t删除和替换 {%widgetOutputName=\"mywidgetname\"%}\n*/\n\nvar path = require('path');\nvar fs = require('fs');\nvar jsmart = require('jsmart');\n\n//lib自身组件\nvar $ = require('./base.js');\nvar f = require('./file.js');\nvar jdf = require('./jdf.js');\nvar Vm = require(\"./vm.js\");\n\n//exports\nvar buildWidget = module.exports = {};\n\n/**\n * @init\n */\nbuildWidget.init = function(inputPath,content,type,callback,param){\n\tif(jdf.config.build.hasCmdLog) console.log('buildWidget---'+inputPath);\n\n\tvar isBuild = type == 'build';\n\tvar isRelease = type == 'release';\n\tvar isOutput = type == 'output';\n\n\tvar result = content.match($.reg.notCommentWidget());\n\tvar origin = content;\n\tvar isJM = false;\n\tvar cssFile='' , jsFile='';\n\tvar cssComboArr = [];\n\tvar jsComboArr = [];\n\t\n\t//widget\n\tif (result){\n\t\tvar filesListObj = {};//去重用\n\t\tresult.forEach(function(resultItem){\n\n\t\t\tvar widgetArray = $.reg.widget().exec(resultItem);\n\t\t\tvar widgetType;\n\t\t\tvar widgetTypeArray = $.reg.widgetType().exec(resultItem);\n\t\t\t\n\t\t\t//jdj jdm 特殊处理\n\t\t\tif (widgetTypeArray) widgetType = widgetTypeArray[1];\n\t\t\tisJM = (widgetType == 'jdj' || widgetType == 'jdm');\n\t\t\t//if (isJM){ writeJMOnce = true; }\n\t\t\t\n\t\t\t//取widget数据 {%widget data=\" \"%}\n\t\t\tvar widgetData;\n\t\t\tvar widgetDataArray = $.reg.widgetData().exec(resultItem);\n\t\t\tif (widgetDataArray) widgetData = widgetDataArray[1];\n\t\t\t\n\t\t\t//取widget是否注释tag {%widget comment=\" \"%}\n\t\t\tvar widgetComment;\n\t\t\tvar widgetCommentArray = $.reg.widgetComment().exec(resultItem);\n\t\t\tif (widgetCommentArray) widgetComment = widgetCommentArray[1];\n\n\t\t\t//如果type为js或者css则只引用不处理tpl\n\t\t\tvar buildTag = {\n\t\t\t\ttpl:true,\n\t\t\t\tvm:true,\n\t\t\t\tsmarty: true,\n\t\t\t\tjs:true,\n\t\t\t\tcss:true\n\t\t\t}\n\n\t\t\tif (widgetType) {\n\t\t\t\tif (widgetType =='tpl'|| widgetType =='vm'|| widgetType =='css'|| widgetType =='js' || widgetType == 'smarty'){\n\t\t\t\t\tfor(var i in buildTag ){\n\t\t\t\t\t\tif(i != widgetType ) buildTag[i] = false;\n\t\t\t\t\t}\n\t\t\t\t}else {\n\t\t\t\t\tconsole.log(inputPath +' '+ resultItem);\n\t\t\t\t\tconsole.log(\"jdf warnning [widget type - \"+widgetType +'] is not approve, please try \"tpl,vm,js,css\" again ');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//{%widget name=\" \"%}\n\t\t\tvar widgetStr = widgetArray[0];\n\t\t\t//widgetStr中的name\n\t\t\tvar widgetName = $.trim(widgetArray[1]);\n\t\t\tvar widgetDir = '/widget/' +widgetName;\n\t\t\t//widget 目录\n\t\t\tvar fileDir = path.normalize(jdf.currentDir + widgetDir);\n\t\t\tvar widgetInputName = jdf.config.widgetInputName;\n\n\t\t\tif(widgetInputName.length > 0 && !$.inArray(widgetInputName, widgetName)){\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//当前工程不存的jdj和jdm模块从服务端文件复制至当前过来\n\t\t\t/*\n\t\t\tif (isJM && !f.exists(fileDir)){\n\t\t\t\tvar source = path.normalize(jdf[widgetType+'Dir']+ widgetDir);\n\t\t\t\tvar target = jdf.currentDir + '/widget/' +widgetName;\n\t\t\t\tf.copy(source,target);\n\t\t\t}*/\n\t\t\tvar placeholder='';\n\t\t\tvar dirExists = f.exists(fileDir);\n\t\t\tif (dirExists){\n\t\t\t\tvar files = fs.readdirSync(fileDir);\n\t\t\t\tfiles.forEach(function(item){\n\t\t\t\t\t//less,scss文件转换成css文件\n\t\t\t\t\tvar itemOrgin = item;\n\t\t\t\t\titem = $.getCssExtname(item);\n\n\t\t\t\t\t//tpl,css,js路径中含有widgetName前缀的才引用 ---> 名字完全一样才引用\n\t\t\t\t\n\t\t\t\t\t//单个文件\n\t\t\t\t\tvar fileUrl = path.join(fileDir, item);\n\t\t\t\t\tvar staticUrl = ''+widgetDir +'/'+ item;\n\n\t\t\t\t\tif (param && param.plain) {\n\t\t\t\t\t\tstaticUrl = '..'+widgetDir +'/'+ item;\n\t\t\t\t\t}\n\n\t\t\t\t\t//css Compile && innsertCSS link\n\t\t\t\t\tvar cssCompileFn = function(staticUrl){\n\t\t\t\t\t\tvar cssLink = $.placeholder.cssLink(staticUrl);\n\t\t\t\t\t\tif (isBuild){\n\t\t\t\t\t\t\tcontent = $.placeholder.insertHead(content,cssLink);\n\t\t\t\t\t\t}else if(isRelease || isOutput){\n\t\t\t\t\t\t\tif(jdf.config.output.combineWidgetCss){\n\t\t\t\t\t\t\t\t//less,sass文件从编译后的bgCurrent读取\n\t\t\t\t\t\t\t\tif ($.is.less(itemOrgin) || $.is.sass(itemOrgin)) {\n\t\t\t\t\t\t\t\t\tvar fileUrlTemp = jdf.bgCurrentDir + staticUrl;\n\t\t\t\t\t\t\t\t\tcssFile +=  f.read(fileUrlTemp) + '\\n\\r';\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\tcssFile +=  f.read(jdf.bgCurrentDir+staticUrl) + '\\n\\r';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tif(jdf.config.output.cssCombo && jdf.config.cdn){\n\t\t\t\t\t\t\t\t\tcssComboArr.push(staticUrl.replace('/widget/', ''));\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\tcontent = $.placeholder.insertHead(content,cssLink);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tif (isJM){\n\t\t\t\t\t\t\torigin = $.placeholder.insertHead(origin,cssLink);\n\t\t\t\t\t\t}*/\n\t\t\t\t\t\tfilesListObj[staticUrl] = 1;\n\t\t\t\t\t}\n\n\t\t\t\t\t//js Compile\n\t\t\t\t\tvar jsCompileFn = function(staticUrl){\n\t\t\t\t\t\tvar jsLink = $.placeholder.jsLink(staticUrl);\n\t\t\t\t\t\tif (isBuild){\n\t\t\t\t\t\t\tcontent = buildWidget.insertJs(content,jsLink, jdf.config.build.jsPlace);\n\t\t\t\t\t\t}else if (isRelease || isOutput){\n\t\t\t\t\t\t\tif(jdf.config.output.combineWidgetJs){\n\t\t\t\t\t\t\t\t//合并所有widget中的js文件至widgetOutputName\n\t\t\t\t\t\t\t\tjsFile += f.read(jdf.currentDir+staticUrl) + '\\n\\r';\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tif(jdf.config.output.jsCombo && jdf.config.cdn){\n\t\t\t\t\t\t\t\t\tjsComboArr.push(staticUrl.replace('/widget/', ''));\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\tcontent = buildWidget.insertJs(content,jsLink, jdf.config.output.jsPlace);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t/*\n\t\t\t\t\t\tif (isJM){\n\t\t\t\t\t\t\torigin = $.placeholder.insertBody(origin,jsLink);\n\t\t\t\t\t\t}*/\n\t\t\t\t\t\tfilesListObj[staticUrl] = 1;\t \n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n\t\t\t\t\t * @build widget tpl/vm\n\t\t\t\t\t */\n\t\t\t\t\t//vm编译\n\t\t\t\t\tvar vmCompileFn = function(vmContent){\n\t\t\t\t\t\tvar fileUrlDirname = path.dirname(fileUrl)+'/';\n\t\t\t\t\t\tvar dataSourceContent={};\n\t\t\t\t\t\tvar dataSourceUrl = fileUrlDirname+widgetName+$.is.dataSourceSuffix ;\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (f.exists(dataSourceUrl)) {\n\t\t\t\t\t\t\t\tvar temp = f.read(dataSourceUrl);\n\t\t\t\t\t\t\t\tif (temp && temp != '')  dataSourceContent = JSON.parse(temp);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tconsole.log(dataSourceUrl);\n\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar widgetDataObj = {};\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (widgetData){\n\t\t\t\t\t\t\t\t//外部url，如data='http://a.com/'\n\t\t\t\t\t\t\t\tif($.is.httpLink(widgetData)){\n\t\t\t\t\t                var request = require('sync-request');\n\t\t\t\t\t\t\t\t\tvar res = request('GET', widgetData);\n\t\t\t\t\t\t\t\t\twidgetData = res.getBody().toString();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//纯json数据\t\t\t\t\n\t\t\t\t\t\t\t\twidgetDataObj = JSON.parse(widgetData);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tconsole.log('jdf buildWidget {%widget name=\"' +widgetName  +'\"} data error');\n\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar dataObj = $.merageObj( dataSourceContent, widgetDataObj);\n\t\t\t\t\t\t\n\t\t\t\t\t\t//vm处理\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tif (dataObj && vmContent && jdf.config.output.vm){\n\t\t\t\t\t\t\t\tvar vmRander =  Vm.rander(vmContent, dataObj, fileUrlDirname);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//vm继承js/css\n\t\t\t\t\t\t\t\tif(vmRander.url.js){\n\t\t\t\t\t\t\t\t\tvmRander.url.js.forEach(function(item){\n\t\t\t\t\t\t\t\t\t\t jsCompileFn(item);\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif(vmRander.url.css){\n\t\t\t\t\t\t\t\t\tvmRander.url.css.forEach(function(item){\n\t\t\t\t\t\t\t\t\t\t cssCompileFn(item);\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\treturn vmRander.content;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\tconsole.log('jdf erro [jdf.buildWidget] - velocityjs');\n\t\t\t\t\t\t\tconsole.log(fileUrl);\n\t\t\t\t\t\t\tconsole.log(e);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn vmContent;\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//tpl vm Compile\n\t\t\t\t\tvar tmplCompileFn = function(type){\n\t\t\t\t\t\tplaceholder = f.read(fileUrl);\n\t\t\t\t\t\t//替换模板中的cssLink/jsLink\n\t\t\t\t\t\tif (isOutput) placeholder = staticUrlReplace(placeholder);\n\n\t\t\t\t\t\tif (type == 'vm' || type == 'tpl') {\n\t\t\t\t\t\t\tplaceholder = vmCompileFn(placeholder);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(type == 'smarty'){\n\t\t\t\t\t\t\tvar smartyJSON = f.read(path.join(fileDir, widgetName+'.json')) || widgetData;\n\t\t\t\t\t\t\tvar smartyCompiled = new jSmart(placeholder);\n\n\t\t\t\t\t\t\tif(smartyCompiled && smartyJSON){\n\t\t\t\t\t\t\t\tplaceholder = smartyCompiled.fetch(JSON.parse(smartyJSON));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfileUrl = f.pathFormat(path.join(widgetDir, item));\n\t\t\t\t\t\t\n\t\t\t\t\t\tvar typeHtml='';\n\t\t\t\t\t\tif (widgetType) typeHtml='['+widgetType+']';\n\t\t\t\t\t\t//insert comment\n\t\t\t\t\t\tif ( jdf.config.build.widgetIncludeComment){\n\t\t\t\t\t\t\tif(widgetComment === 'false') return;\n\t\t\t\t\t\t\tif(/<\\!DOCTYPE/.test(placeholder)){\n\t\t\t\t\t\t\t\tplaceholder = placeholder + '\\r\\n<!--/ '+fileUrl+' -->';\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\tplaceholder = '<!-- '+typeHtml+' '+fileUrl+' -->\\r\\n' + placeholder + '\\r\\n<!--/ '+fileUrl+' -->';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t//tpl\n\t\t\t\t\tif ( $.is.tpl(item) && buildTag.tpl && (item == widgetName+$.is.tplSuffix) ){\n\t\t\t\t\t\ttmplCompileFn('tpl');\n\t\t\t\t\t}\n\n\t\t\t\t\t//vm\n\t\t\t\t\tif ( $.is.vm(item) && buildTag.vm && item == widgetName+$.is.vmSuffix ){\n\t\t\t\t\t\ttmplCompileFn('vm');\n\t\t\t\t\t}\n\n\t\t\t\t\t//smarty\n\t\t\t\t\tif ( $.is.smarty(item) && buildTag.smarty && item == widgetName+$.is.smartySuffix ){\n\t\t\t\t\t\ttmplCompileFn('smarty');\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n\t\t\t\t\t * @build widget css\n\t\t\t\t\t */\n\t\t\t\t\tif ($.is.css(item) && !filesListObj[staticUrl] && buildTag.css && item == widgetName+$.is.cssSuffix ){\n\t\t\t\t\t\tcssCompileFn(staticUrl);\n\t\t\t\t\t}\n\n\t\t\t\t\t/**\n\t\t\t\t\t * @build widget js\n\t\t\t\t\t */\n\t\t\t\t\tif ($.is.js(item) && !filesListObj[staticUrl] && buildTag.js && item == widgetName+$.is.jsSuffix){\n\t\t\t\t\t\tjsCompileFn(staticUrl);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\t/*\n\t\t\t\tif (isJM){\n\t\t\t\t\torigin = origin.replace(widgetStr,placeholder);\n\t\t\t\t}*/\n\t\t\t\t//替换掉{%widget name=\"base\"%} \n\t\t\t\tcontent = content.replace(widgetStr,placeholder);\n\t\t\t}else{\n\t\t\t\tconsole.log('jdf warning [jdf.buildWidget] ' +widgetStr +' widget '+ widgetName+ ' does not exist.');\n\t\t\t}\n\t\t});\n\t\t\n\t\t//去掉{%widgetOutputName=\"mywidgetname\"%}\n\t\tvar getContentWidgetOutputName = $.reg.widgetOutputName().exec(content);\n\t\tif ( getContentWidgetOutputName ){\n\t\t\tcontent = content.replace(getContentWidgetOutputName[0],'');\n\t\t}\n\n\t\t//css,js路径替换\n\t\tif (isOutput) content = staticUrlReplace(content);\n\n\t\t//release output处理\n\t\tif (isRelease || isOutput){\n\t\t\t//修改为默认取配置文件中的widgetOutputName 2014-5-24\n\t\t\tvar pkgName = jdf.config.widgetOutputName;\n\t\t\t//var pkgName = path.basename(inputPath).replace('.html', '');\n\t\t\tif (getContentWidgetOutputName){\n\t\t\t\tpkgName = getContentWidgetOutputName[1];\n\t\t\t}\n\n\t\t\tvar outputDir = jdf.bgCurrentDir;\n\t\t\tvar outputCss = '/' + jdf.config.cssDir+'/'+pkgName+'.css';\n\t\t\tvar outputJs = '/' + jdf.config.jsDir+'/'+pkgName+'.js';\n\n\t\t\tvar cssOutputDir = '/' + jdf.config.cssDir.replace(jdf.config.baseDir+'/', '') +'/';\n\t\t\tvar jsOutputDir = '/' + jdf.config.jsDir.replace(jdf.config.baseDir+'/', '') +'/';\n\t\t\tif (isOutput) {\n\t\t\t\tif(jdf.config.cdn){\n\t\t\t\t\toutputCss = '/' +  jdf.getProjectPath() + cssOutputDir+pkgName+'.css';\n\t\t\t\t\toutputCss = $.replaceSlash(outputCss);\n\t\t\t\t\toutputCss = jdf.config.cdn + outputCss;\n\n\t\t\t\t\toutputJs = '/' + jdf.getProjectPath() + jsOutputDir+pkgName+'.js';\n\t\t\t\t\toutputJs = $.replaceSlash(outputJs);\n\t\t\t\t\toutputJs = jdf.config.cdn + outputJs;\n\t\t\t\t}else{\n\t\t\t\t\toutputCss = addgetProjectPath(cssOutputDir+pkgName+'.css');\n\t\t\t\t\toutputJs = addgetProjectPath(jsOutputDir+pkgName+'.js');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t//seajsAddCdn\n\t\t\tcontent = seajsAddCdn(content);\n\n\t\t\t//widgetUrlAddCdn\n\t\t\tcontent = widgetUrlAddCdn(content);\n\t\n\t\t\t//css链接加前缀\n\t\t\tif(jdf.config.output.combineWidgetCss && cssFile !=''){\n\t\t\t\tvar cssLink = $.placeholder.cssLink(outputCss);\n\t\t\t\tcontent = $.placeholder.insertHead(content, cssLink  );\n\t\t\t\tf.write(path.normalize(outputDir+'/' + jdf.config.cssDir+'/'+pkgName+'.css') , cssFile);\n\t\t\t}else if(jdf.config.output.cssCombo && cssComboArr.length){\n\t\t\t\tcssComboArr = $.uniq(cssComboArr);\n\t\t\t\tvar outputCss1 = '/' +  jdf.getProjectPath() +'/widget/??'+cssComboArr.join(',');\n\t\t\t\toutputCss1 = jdf.config.cdn + $.replaceSlash(outputCss1);\n\t\t\t\tvar cssLink1 = $.placeholder.cssLink(outputCss1);\n\t\t\t\tcontent = $.placeholder.insertHead(content, cssLink1);\n\t\t\t}\n\n\t\t\t//js链接加前缀\n\t\t\tif(jdf.config.output.combineWidgetJs && jsFile !=''){\n\t\t\t\tvar jsLink = $.placeholder.jsLink(outputJs);\n\t\t\t\tcontent = buildWidget.insertJs(content,jsLink,jdf.config.output.jsPlace);\n\t\t\t\tf.write(path.normalize(outputDir+'/' + jdf.config.jsDir+'/'+pkgName+'.js') , jsFile);\n\t\t\t}else if(jdf.config.output.jsCombo && jsComboArr.length){\n\t\t\t\tjsComboArr = $.uniq(jsComboArr);\n\t\t\t\tvar outputJs1 = '/' +  jdf.getProjectPath() +'/widget/??'+jsComboArr.join(',');\n\t\t\t\toutputJs1 = jdf.config.cdn + $.replaceSlash(outputJs1);\n\t\t\t\tvar jsLink1 = $.placeholder.jsLink(outputJs1);\n\t\t\t\tcontent = buildWidget.insertJs(content,jsLink1, jdf.config.output.jsPlace);\n\t\t\t}\n\t\t}\n\t}else{\n\t\t//css,js路径替换\n\t\tif (isOutput) content = staticUrlReplace(content);\n\n\t\tif (isRelease || isOutput){\n\t\t\t//seajsAddCdn\n\t\t\tcontent = seajsAddCdn(content);\n\t\t}\n\n\t\tif (isOutput){\n\t\t\t//widgetUrlAddCdn\n\t\t\tcontent = widgetUrlAddCdn(content);\n\t\t}\n\t}\n\n\tvar data = {\n\t\torigin:origin,\n\t\ttpl:content,\n\t\tcss:cssFile,\n\t\tjs:jsFile\n\t}\n\tif (callback) callback(data);\n}\n\n\n/**\n * @insertJs\n * @(考虑到性能 insertHead -> insertBody) -> 放head有利于前后端沟通,可通过配置修改\n * @jdf.config.output.jsPlace 'insertHead' --> header ; 'insertBody' --> body\n */\nbuildWidget.insertJs = function(content, jsLink, jsPlace){\n\tif(jsPlace == 'insertHead'){\n\t\tcontent = $.placeholder.insertHead(content, jsLink);\n\t}else if(jsPlace == 'insertBody'){\n\t\tcontent = $.placeholder.insertBody(content, jsLink);\n\t}\n\treturn content;\n}\n\n/**\n* @非widget引用, 原页面上的静态资源css, js链接替换处理: js直接加cdn, css链接根据配置是否combo加cdn\n* @param {String} str 源代码\n* @return {String} 替换后的源代码\n* @example\n\t<link type=\"text/css\" rel=\"stylesheet\"  href=\"../app/css/main.css\" />\n\t<link type=\"text/css\" rel=\"stylesheet\"  href=\"../app/css/less.css\" />\n\t==>\n\t<link type=\"text/css\" rel=\"stylesheet\"  href=\"http://cdnul.com/??productpath/css/main.css,productpath/css/less.css\" />\n\n\t<script type=\"text/javascript\" src=\"../app/js/common.js\"></script>\n\t ==>\n\t<script type=\"text/javascript\" src=\"http://cdnul.com/productpath/js/common.js\"></script>\n*/\nfunction staticUrlReplace(str){\n\tvar replaceCore= function (str,type){\n\t\tvar regStr = $.reg[type+'Str'];\n\t\tvar reg = new RegExp(regStr,'gm');\n\t\tvar regResult =  str.match(reg);\n\t\t\n\t\tif (regResult){\n\t\t\tvar comboArray = [];\n\t\t\tregResult.forEach(function(item){\n\t\t\t\tvar reg = new RegExp(regStr,'gm');\n\t\t\t\tvar i = reg.exec(item);\n\t\t\t\tvar cdnRegStr = jdf.config.cdnDefalut ? jdf.config.cdnDefalut : jdf.config.cdn;\n\t\t\t\tvar cdnReg = new RegExp(cdnRegStr+'/', 'gm');\n\t\t\t\tvar k = i['input'];\n\n\t\t\t\tvar strReplace = function (){\n\t\t\t\t\tif(!/href=\"\\/\\//.test(k)){\n\t\t\t\t\t\t//默认的js/css路径置为空\n\t\t\t\t\t\tvar kReg = new RegExp(k, 'gmi')\n\t\t\t\t\t\tvar JReg = new RegExp(k+'\\r\\n', 'gmi')\n\t\t\t\t\t\tstr = str.replace(kReg, '');\n\t\t\t\t\t\tstr = str.replace(JReg, '');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif(i && !cdnReg.test(i[1]) && !$.is.httpLink(i[1]) ){\n\t\t\t\t\t//var t = i[1].replace(cdnReg, '');\n\t\t\t\t\t//comboArray.push(t);\n\t\t\t\t\tstrReplace();\n\t\t\t\t}\n\n\t\t\t\tif ( i && !$.is.httpLink(i[1]) ){\n\t\t\t\t\t//url\n\t\t\t\t\tvar j = i[1];\n\t\t\t\t\tj = projectPathReplace(j);\n\n\t\t\t\t\tvar widgetReg = new RegExp('^'+jdf.config.widgetDir, 'gm');\n\t\t\t\t\tif(! widgetReg.test(j)){\n\t\t\t\t\t\tcomboArray.push(j);\n\t\t\t\t\t\tstrReplace();\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t//console.log(comboArray);\n\t\t\tif(comboArray.length>0){\n\t\t\t\tcomboArray = $.uniq(comboArray);\n\t\t\t\tvar tagSrc = '';\n\t\t\t\t\n\t\t\t\t//combo\n\t\t\t\tif(jdf.config.output[type+'Combo'] && jdf.config.cdn){\n\t\t\t\t\tvar cdnPrefix = '';\n\t\t\t\t\tcdnPrefix =  jdf.config.cdn + (comboArray.length>1 ? '/??' : '/');\n\t\t\t\t\tvar comboUrl = comboArray.join(',');\n\t\t\t\t\tcomboUrl = comboUrl.replace(/\\/\\//gm,'/');\n\t\t\t\t\tvar staticUrl =  cdnPrefix + comboUrl;\n\t\t\t\t\ttagSrc = '' + $.placeholder[type+'comboLink'](staticUrl);\n\t\t\t\t}else{\n\t\t\t\t\tfor (var i=0; i<comboArray.length; i++){\n\t\t\t\t\t\tvar item = comboArray[i];\n\t\t\t\t\t\titem = jdf.config.cdn ? jdf.config.cdn+'/'+item : item;\n\t\t\t\t\t\titem = addgetProjectPath(item) ;\n\t\t\t\t\t\ttagSrc += $.placeholder[type+'Link'](item);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//console.log(tagSrc);\n\t\t\t\t// if (/<\\/head>/.test(str)) {\n\t\t\t\t\tif (type == 'js') {\n\t\t\t\t\t\tstr = buildWidget.insertJs(str,tagSrc, jdf.config.output.jsPlace);\n\t\t\t\t\t}else{\n\t\t\t\t\t\tstr = $.placeholder.insertHead(str, tagSrc);\n\t\t\t\t\t}\n\t\t\t\t// } else{\n\t\t\t\t// \tstr += tagSrc;\n\t\t\t\t// };\n\t\t\t}\n\t\t}\n\t\treturn str;\n\t}\n\n\tstr = replaceCore(str, 'css');\n\tstr = replaceCore(str, 'js');\n\treturn str;\n}\n\n/**\n* @seajs.use add prefix \n* @example  \n*\tseajs.use(['/a.js', '/b.js'],function(){}) ==> \n*\tseajs.use(['projectPath/a.js', 'projectPath/b.js'],function(){})\n*/\nfunction seajsAddCdn(source){\n\tvar cdn = jdf.config.cdn;\n\tvar configBaseDir = jdf.config.baseDir ? jdf.config.baseDir+'/'  : '';\n\tvar tag = source.match(/seajs.use\\((.*?)\\S*[function)|]/gmi);\n\tif (tag) {\n\t\tvar tempObj = {};\n\t\tfor (var i =0, j= tag.length; i<j; i++){\n\t\t\tvar  t= tag[i].replace(/seajs.use\\(|\\[|\\]|\\)/gim, \"\");\n\t\t\tt = t.replace(/function\\(/gim, \"\");\n\t\t\tvar t1 = t.split(',');\n\t\t\tif (t1) {\n\t\t\t\tfor (var m=0; m<t1.length; m++ ){\n\t\t\t\t\tvar t2 = t1[m].replace(/\\\"/g, '').replace(/\\'/g, '');\n\t\t\t\t\t//js和widget的路径,'js/a.js'的不做替换\n\t\t\t\t\tvar t1R = new RegExp(jdf.config.jsDir+'/|'+jdf.config.widgetDir+'/', 'gm');\n\t\t\t\t\tif ( t1R.test(t2) && !$.is.httpLink(t2) && \n\t\t\t\t\t\t( t2.charAt(0) == '/' || t2.charAt(0) == '\\\\' || t2.charAt(0) == '.' )\n\t\t\t\t\t) {\n\t\t\t\t\t\ttempObj[t2] = projectPathReplace(t2);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tfor (var i in  tempObj ){\n\t\t\tvar reg = new RegExp(escape(i), 'gim');\n\n\t\t\tif(cdn){\n\t\t\t\ttempObj[i] = cdn + '/' + tempObj[i];\n\t\t\t}\n\t\t\tsource = source.replace(reg, tempObj[i]);\n\t\t}\n\t}\n\treturn source;\n}\n\n/**\n * @addgetProjectPath\n */\nfunction addgetProjectPath(str){\n\tif(!jdf.config.cdn && !/^\\.\\./.test(str)){\n\t\tstr = '..'+str;\n\t}\n\treturn str ;\n}\n\n/**\n * @引用widget文件下的img/cssLink/jsLink add cdn prefix\n * @example \n \t<img src=\"/widget/a/a.png\"><img src='/widget/a/a.png'><img src='../widget/a/a.png'><img src=\"./widget/a/a.png\"> \n \t--->\n \t<img src=\"http://cdn.com/projectPath/widget/a/a.png\">\n */\nfunction widgetUrlAddCdn(source){\n\tvar configBaseDir = jdf.config.baseDir ? jdf.config.baseDir+'/'  : '';\n\tvar tag = source.match(/[\"|'][\\\\.]*\\/widget\\/\\S*[\"|']/gmi);\n\tif (tag) {\n\t\tvar tempObj = {};\n\t\tfor (var i =0, j= tag.length; i<j; i++){\n\t\t\tvar  t = tag[i].replace(/[\"|']/gim, \"\");\n\t\t\tvar t1 = t;\n\t\t\tif(jdf.config.cdn){\n\t\t\t\tvar t2 = '/' + jdf.getProjectPath() + t.replace(/^\\.*/, \"\");\n\t\t\t\tt2 = $.replaceSlash(t2);\n\t\t\t\tt1 = jdf.config.cdn + t2;\n\t\t\t}else{\n\t\t\t\tt1 = addgetProjectPath(t1) ;\n\t\t\t\tt1 = $.replaceSlash(t1);\n\t\t\t}\n\n\t\t\tif(t != t1){\n\t\t\t\ttempObj[t] = t1;\n\t\t\t}\n\t\t}\n\t\tfor (var i in tempObj ){\n\t\t\tvar reg = new RegExp(i, 'gim');\n\t\t\tsource = source.replace(reg, tempObj[i]);\n\t\t}\n\t}\n\treturn source;\n}\n\n\n/**\n * @projectPathReplace\n * @ctime 2014-7-5\n * @example \n\t/css/index.css\n\t../css/index.css\n\t==>\n\tprojectPath/css/index.css\n */\nfunction projectPathReplace(j){\n\tj = j.replace(jdf.config.baseDir, '');\n\t\t\t\t\t\n\tif(jdf.config.cdn){\n\t\tj = j.replace(/\\.\\.\\//g,'/');\n\t\t//add projectPath\n\t\tj = jdf.getProjectPath() +\tj;\n\t\t// del ../  ./  \n\t\tif (j.charAt(0) == '/') { j = j.replace('/','');}\n\t\t// 替换./和//为/\n\t\tj = j.replace(/\\/\\/|\\.\\//gm, '/');\n\t}\n\n\t// // ==> /\n\tj = j.replace(/\\/\\//gm,'/');\n\treturn j;\n}\n\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/vm.js":"/**\n * @vm\n */\nvar path = require('path');\nvar fs = require('fs');\nvar util = require('util');\n\nvar $ = require('./base.js');\nvar f = require('./file.js');\nvar jdf = require(\"./jdf.js\");\n\nvar Velocity = require('velocityjs');\n\n//exports\nvar vm = module.exports;\n\n/**\n * @velocityjs extend\n * @{String} str 数据内容\n * @{String} dirname 文件的dirname\n */\nvm.parse = function(str, dirname){\n\tvar dirname = typeof dirname == 'undefined' ? '' : dirname;\n\tvar arr = str.match(/^(<!--){0}\\s*#parse\\([\\\"|\\'](.*?)[\\\"|\\']\\)(\\s\\n\\r)*(-->){0}/gmi);\n\tvar res = {\n\t\tvm:[],\n\t\ttpl:[],\n\t\tjs:[],\n\t\tcss:[]\n\t};\n\t\n\tif (arr) {\n\t\tfor (var i =0  ; i<arr.length  ; i++ ){\n\t\t\tvar temp = arr[i].match(/#parse\\([\\\"|\\'](.*?)[\\\"|\\']\\)/);\n\t\t\tif(temp){\n\t\t\t\tvar basename = temp[1];\n\t\t\t\tif (basename) {\n\t\t\t\t\tvar source  = dirname + basename;\n\t\t\t\t\tsource = path.normalize(source);\n\n\t\t\t\t\tvar dirname1 = path.dirname(source);\n\t\t\t\t\tvar dirlist1 = f.getdirlist(dirname1);\n\t\t\t\t\t\n\t\t\t\t\tdirlist1.forEach(function(item){\n\t\t\t\t\t\tvar item = item.replace(jdf.currentDir, '');\n\t\t\t\t\t\titem = item.replace(/\\\\/g,'/');\n\t\t\t\t\t\t\n\t\t\t\t\t\tif($.is.vm(item)){\n\t\t\t\t\t\t\tres.vm.push(item);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif($.is.tpl(item)){\n\t\t\t\t\t\t\tres.tpl.push(item);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif($.is.css(item)||$.is.less(item)||$.is.sass(item)){\n\t\t\t\t\t\t\tres.css.push($.getCssExtname(item));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif($.is.js(item)){\n\t\t\t\t\t\t\tres.js.push(item);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\tif (f.exists(source)) {\n\t\t\t\t\t\tvar content = f.read(source);\n\t\t\t\t\t\tif (content) {\n\t\t\t\t\t\t\t//替换\n\t\t\t\t\t\t\tstr = str.replace(temp[0], content);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn {\n\t\tcontent:str,\n\t\turl:res\n\t};\n }\n\n/**\n * @rander data\n * @{String} vmSource vm内容\n * @{Object} dataObj vm对应的数据\n * @{String} dirname vm的dirname\n */\nvm.rander = function(vmSource, dataObj, dirname){\n\tif (vmSource && dataObj) {\n\t\tvar vmTpm = vm.parse(vmSource, dirname);\n\t\treturn {\n\t\t\tcontent:Velocity.render(vmTpm.content, dataObj),\n\t\t\turl:vmTpm.url\n\t\t};\n\t}\n}","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/compress.js":"/**\n * @文件压缩\n * @see\n *\n * UglifyJS: uglify-js \n * homePage: \n * 配置 http://lisperator.net/uglifyjs/codegen\n * 配置2 http://lisperator.net/uglifyjs/compress\n * \n * CleanCSS: clean-css\n * 配置 https://github.com/GoalSmashers/clean-css#how-to-use-clean-css-programmatically\n * \n * Pngquant: node-pngquant-native\n *\n */\n\nvar path = require('path');\nvar fs = require('fs');\nvar requirejs = require('requirejs');\n\n//lib自身组件\nvar $ = require('./base.js');\nvar f = require('./file.js');\nvar jdf = require('./jdf.js');\nvar base64 = require('./base64.js');\n\n//外部组件\nvar UglifyJS = require(\"uglify-js\");\nvar CleanCSS = require('clean-css');\n// var Pngcrush = require('node-pngcrush');\nvar Pngquant = require('jdf-png-native');\nvar Htmlminify = require('html-minifier').minify;\n\n//exports\nvar compress = module.exports = {};\n\n/**\n * @文件压缩初始化\n * @time 2014-2-14 16:19:18\n * @param src 输入文件/文件夹相对路径,无dest默认compress src\n * @param dest 输出文件/文件夹相对路径\n */\ncompress.dir = function(src, dest) {\n    if (typeof(src) == 'undefined') {\n        console.log('jdf warning no src folder');\n        return;\n    }\n\n    var srcPath = path.normalize(f.currentDir() + '/' + src);\n    var destPath;\n\n    if (typeof(dest) == 'undefined') {\n        destPath = srcPath;\n    } else {\n        destPath = path.normalize(f.currentDir() + '/' + dest);\n        f.copy(srcPath, destPath);\n    }\n\n    compress.init(destPath);\n\n    console.log('jdf compress success!');\n}\n\n/**\n * @文件/文件夹压缩\n * @param {String} rSource 文件/文件夹绝对路径\n * @param {Boolse} isdebug debug模式true时不压缩代码,仅处理路径\n * @param {Object} config 多线程传参数jdf.config\n * @param {Function} getProject 多线程传参数jdf.getProject\n */\ncompress.init = function(rSource, isdebug, config, getProject, callback) {\n    if (typeof(config) != 'undefined') jdf.config = config;\n    if (typeof(getProject) != 'undefined') jdf.getProject = getProject;\n\n    var isdebug = isdebug || false;\n    var allTag = true;\n    var source = f.realpath(rSource);\n    if (source) {\n        if (f.isDir(source)) {\n            fs.readdirSync(source).forEach(function(name) {\n                if (name != '.' && name != '..' && !(/.svn/.test(name))) {\n                    allTag = compress.init(source + '/' + name, isdebug) && allTag;\n                }\n            });\n        } else if (f.isFile(source)) {\n\n            //html minify\n            if ($.is.html(source) && (jdf.config.output.compresshtml||!jdf.config.output.comment||jdf.config.output.htmlContentReplace) ){\n                if(jdf.config.build.hasCmdLog) console.log('compress.html---'+source);\n                var sourceCode = f.read(source);\n\n                //html remove comment\n                if (!jdf.config.output.comment) {\n                    var htmlComment = $.reg.htmlComment();\n                    sourceCode = sourceCode.replace(htmlComment, '').replace(/\\n\\s*\\r/g, '');\n                }\n                \n                //html contentReplace\n                if (jdf.config.output.htmlContentReplace || \n                    jdf.config.output.htmlContentReplaceInProduce || \n                    jdf.config.output.htmlContentReplaceInPublish\n                ) {\n                    var r = jdf.config.output.htmlContentReplace;\n                    if(jdf.config.outputType == 'prod' && jdf.config.output.htmlContentReplaceInProduce) r = jdf.config.output.htmlContentReplaceInProduce\n                    if(jdf.config.outputType == 'pub' && jdf.config.output.htmlContentReplaceInPublish)r = jdf.config.output.htmlContentReplaceInPublish\n\n                    for (var i=0; i<r.length; i++){\n                        var ri = new RegExp(r[i].from, 'gm');\n                        sourceCode = sourceCode.replace(ri, r[i].to);\n                    }\n                }\n\n                //html compress\n                if (jdf.config.output.compresshtml && !isdebug) {\n                    sourceCode = compress.html(sourceCode, isdebug);\n                }\n\n                f.write(source, sourceCode);\n            }\n\n            //js UglifyJS\n            if ($.is.js(source) && !jdf.config.build.es6Entry ) {\n                if (jdf.config.output.rjs) {\n                    var outputdir = path.normalize(f.currentDir() + '/' + jdf.config.outputDirName + '/' + jdf.getProjectPath());\n                    requirejs.optimize({\n                        appDir: outputdir,\n                        allowSourceOverwrites: true,\n                        keepBuildDir: true,\n                        dir: outputdir\n                    }, function() {}, function(error) {})\n                } else {\n                    if (jdf.config.output.compressJs) {\n                        var sourceCode = compress.js(source, isdebug);\n                        f.write(source, sourceCode);\n                    }\n\n                    var sourceCode = compress.addJsDepends(source);\n                    f.write(source, sourceCode);\n\n                    //jsContentReplace\n                    if (jdf.config.output.jsContentReplace || \n                        jdf.config.output.jsContentReplaceInProduce || \n                        jdf.config.output.jsContentReplaceInPublish\n                    ) {\n                        var r = jdf.config.output.jsContentReplace;\n                        if(jdf.config.outputType == 'prod' && jdf.config.output.jsContentReplaceInProduce) r = jdf.config.output.jsContentReplaceInProduce\n                        if(jdf.config.outputType == 'pub' && jdf.config.output.jsContentReplaceInPublish)r = jdf.config.output.jsContentReplaceInPublish\n                        var sourceCode = f.read(source);\n                        for (var i=0; i<r.length; i++){\n                            var ri = new RegExp(r[i].from, 'gm');\n                            sourceCode = sourceCode.replace(ri, r[i].to);\n                        }\n                        f.write(source, sourceCode);\n                    }\n                }\n            }\n\n            //css CleanCSS\n            if ($.is.css(source) && jdf.config.output.compressCss) {\n                var sourceCode = compress.css(source, isdebug);\n                f.write(source, sourceCode);\n            } else if ($.is.css(source)) {\n                var sourceCode = compress.css2(source, isdebug);\n                f.write(source, sourceCode);\n            }\n\n            //png optimize\n            if ($.is.png(source) && !isdebug && jdf.config.output.compressPng) {\n                compress.png(source, source);\n            }\n\n            //css中图片url增加域名前缀\n            if (jdf.config.output.cssImagesUrlReplace && $.is.css(source)) {\n                var sourceCode = compress.cssImagesUrlReplace(source, sourceCode, jdf.config.cdn);\n                f.write(source, sourceCode);\n            }\n\n            //图片base64\n            if (jdf.config.output.base64 && ($.is.sass(source) || $.is.less(source) || $.is.css(source))) {\n                var sourceCode = base64.init(source);\n                f.write(source, sourceCode);\n            }\n\n            //图片webp\n            if (jdf.config.output.webp) {\n                //css webp样式追加\n                if ($.is.css(source)) {\n                    compress.appendWebpCSSFIX(source);\n                }\n\n                //图片格式转换\n                if ($.is.jpg(source) || $.is.png(source)) {\n                    compress.webp(\n                        source,\n                        source + \".webp\",\n                        jdf.config.output.webpQuality ? jdf.config.output.webpQuality : 80,\n                        function(status) {\n                            if (callback) {\n                                callback(status);\n\n                            }\n                        }\n                    );\n                } else {\n                    if (callback) callback();\n                }\n            } else {\n                if (callback) callback();\n            }\n\n        } else {\n            allTag = false;\n            if (callback) callback(false);\n        }\n    } else {\n        if (callback) callback(false);\n        //console.log('error');\n    }\n    return allTag;\n}\n\n/**\n * @js文件依赖替换\n * @time 2014-2-21 18:46:24\n * @param source 文件名\n * @param source 文件内容\n * \n *   var a=require('a.js') ==> var a=require('projectPath/a.js')\n *\n *   define('/a.js',function(require, exports) {});  ==>\n *   define('projectPath/a.js', ['projectPath/b.js'], function(require, exports) {});\n *\n *  define(function(require, exports)) ==> \n *  define('projectPath/a.js',['projectPath/b.js'],function(require, exports))\n *\n *  seajs.use(['/a.js', '/b.js'],function(){}) ==> \n *  seajs.use(['projectPath/a.js', 'projectPath/b.js'],function(){})\n * \n */\ncompress.addJsDepends = function(source) {\n    var sourceCode = f.read(source);\n    var cdn = jdf.config.cdn;\n    var configBaseDir = jdf.config.baseDir ? jdf.config.baseDir + '/' : '';\n    var dependenceArray = [];\n    var arr = sourceCode.match(/require\\s*\\(\\s*(\"|')(.*?)(\"|')\\s*\\)/gmi);\n\n    //js文件的id和dependences是否添加cdn前缀 默认是不添加的\n    if(jdf.config.output.jsUrlReplace == false){\n        cdn = \"\";\n    }\n\n    if (arr) {\n        for (var i = 0; i < arr.length; i++) {\n            var temp = arr[i].match(/require\\((.*?)\\)/);\n            if (temp) {\n                temp[1] = temp[1].replace(/'|\"/g, '');\n                var match = temp[1];\n                //无.js缀和不含有.css的url加.js\n                if (!(/\\.js$/i.test(match)) && !/\\.css/i.test(match)) {\n                    match += '.js';\n                }\n                //add prefix\n                if (/^\\//.test(match) && !$.is.httpLink(match)) {\n                    match = match.replace(configBaseDir, '');\n                    match = jdf.getProjectPath() + match;\n                }\n\n                if (cdn && !$.is.httpLink(match)) {\n                    match = (cdn + '/' + match);\n                }\n\n                //source content require add prefix\n                //var a=require('a.js') ==> var a=require('projectPath/a.js')\n                sourceCode = sourceCode.replace(arr[i], 'require(\"' + match + '\")');\n                dependenceArray.push('\"' + match + '\"');\n            }\n        }\n    }\n    dependenceArray = dependenceArray.join(',');\n\n    /**\n     * @has file id add dependenceArray\n     * @example\n     *   define('/a.js',function(require, exports) {});  ==>\n     *   define('projectPath/a.js', ['projectPath/b.js'], function(require, exports) {});\n     */\n    if (dependenceArray.length > 0) {\n        //insert \n        var arrTemp = /(define\\(.*?[\"|'].*?[\"|']).*?,function/m.exec(sourceCode);\n        var strTemp = arrTemp ? arrTemp[1] : null;\n        if (strTemp) {\n            // source = source.replace(strTemp, strTemp+','+'['+dependenceArray+']');\n        }\n    }\n\n    /**\n     * @add files id and dependenceArray\n     * @example  \n     *  define(function(require, exports)) ==> \n     *  define('projectPath/a.js',['projectPath/b.js'],function(require, exports))\n     */\n    if (/define\\(function/gm.exec(sourceCode)) {\n        //getProjectPath\n        var filepath = source.split(jdf.config.outputDirName + '/' + jdf.getProjectPath());\n        var filename = null;\n        if (filepath && filepath.length > 1) {\n            filename = filepath[1].replace(configBaseDir, '');\n            \n            var getProjectPath = jdf.getProjectPath() ? jdf.getProjectPath() + '/' : '';\n            if(jdf.config.output.jsUrlReplace == false || jdf.config.cdn){\n                filename = getProjectPath + filename;\n            }else{\n                //不加cdn前缀 也不加projectPath 即保持默认的路径\n                filename = '..'  + filename;\n            }\n\n        };\n\n        if (!filename) {\n            filename = path.basename(source);\n        }\n\n        //del // prefix\n        filename = filename.replace(/\\/\\//g, '/');\n        if (dependenceArray.length == 0) {\n            dependenceArray = '';\n        }\n\n        if (cdn && !($.is.httpLink(filename))) {\n            filename = cdn + '/' + filename;\n        }\n\n        sourceCode = sourceCode.replace('define(function', 'define(\"' + filename + '\",[' + dependenceArray + '],function');\n    }\n\n    /**\n     * @seajs.use add prefix \n     * @example  \n     *  seajs.use(['/a.js', '/b.js'],function(){}) ==> \n     *  seajs.use(['projectPath/a.js', 'projectPath/b.js'],function(){})\n     */\n    var hasSeajs = sourceCode.match(/seajs\\.use\\((.*?),\\s*function/gim);\n    if (hasSeajs) {\n        //去重obj\n        var tempObj = {};\n\n        for (var i = 0, j = hasSeajs.length; i < j; i++) {\n            var t = hasSeajs[i].replace(/seajs.use\\(|\\[|\\]|,function/gim, '');\n            var t1 = t.split(',');\n            if (t1) {\n                for (var m = 0; m < t1.length; m++) {\n                    //get origin source\n                    var t2 = t1[m].replace(/[\\\"\\'\\s]/g, '');\n                    var t3 = t2.replace(configBaseDir, '');\n\n                    if (!$.is.httpLink(t2)) {\n                        if (/^\\//.test(t2)) {\n                            if (cdn) {\n                                tempObj[t2] = cdn + '/' + jdf.getProjectPath() + t3;\n                            } else {\n                                tempObj[t2] = jdf.getProjectPath() + t3;\n                            }\n\n                        } else if (!/^\\.\\//.test(t2) && !/^\\.\\.\\//.test(t2)) {\n                            if (cdn) {\n                                tempObj[t2] = cdn + '/' + t3;\n                            } else {\n                                tempObj[t2] = t3;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        for (var i in tempObj) {\n            var reg = new RegExp('[\"\\']' + i + '[\"\\']', 'gim');\n            sourceCode = sourceCode.replace(reg, '\"' + tempObj[i] + '\"');\n        }\n    }\n\n    return sourceCode;\n};\n\n/**\n * @增加前缀banner\n * @return {String} /* projectPath - Date:2014-03-13 13:06:12:120 * /\n */\ncompress.setPrefixBanner = function(bannerType, source, result) {\n    var projectPath = jdf.getProjectPath() ? jdf.getProjectPath().replace('/', '-') + ' ' : '';\n    var basename = path.basename(source);\n    var banner = '';\n\n    if (bannerType == 1) {\n        banner = '/* ' + projectPath + basename + ' Date:' + $.getDay('-') + ' ' + $.getTime(':', false) + ' */\\r\\n';\n    }\n\n    if (bannerType == 2) {\n        banner = '/* ' + projectPath + basename + ' md5:' + $.md5(result) + ' */\\r\\n';\n    }\n\n    return banner;\n}\n\n/**\n * @html文件压缩\n * @param sourceCode 文件内容\n */\ncompress.html = function(sourceCode) {\n    if(sourceCode){\n        sourceCode = Htmlminify(sourceCode, {\n            removeComments: true, //移除注释\n            collapseWhitespace: true, //合并多余的空格\n            minifyJS: true, //压缩文件中的js代码\n            minifyCSS: true //压缩文件中的css代码\n        });\n    }\n    return sourceCode;\n}\n\n/**\n * @js文件压缩\n * @param source 文件/文件夹路径\n * @return compress code\n */\ncompress.js = function(source, isdebug) {\n    if(jdf.config.build.hasCmdLog) console.log('compress.js---'+source);\n\n    var isdebug = isdebug || false;\n    if (!f.exists(source)) {\n        return;\n    }\n    var sourceContent = f.read(source);\n    //sourceContent = compress.addJsDepends(sourceContent);\n\n    var options = {\n        remove: [], //\n        except: ['require', 'define'], //不压缩的字符名\n        ascii_only: true, //输出Unicode characters\n        beautify: false, //美化代码\n        warnings: false //显示压缩报错\n            //,mangle: false//是否压缩 失效的参数\n    };\n\n    if (jdf.config.output.jsRemove) {\n        options.remove = jdf.config.output.jsRemove;\n    }\n\n    var result = sourceContent;\n\n    try {\n        if (!isdebug) {\n            //parse\n            UglifyJS.base54.reset();\n            var toplevel = UglifyJS.parse(sourceContent);\n            toplevel.figure_out_scope();\n            var compressorOption = {\n                hoist_funs: false, //函数声明至顶端\n                //fromString: true,  //说明代码源的格式是否为字符串\n                //mangle: true,      //是否压缩,只要配置就不压缩了\n                warnings: false, //显示压缩报错\n                join_vars: false\n            }\n            if (options.warnings) {\n                compressorOption.warnings = options.warnings;\n            }\n\n            //remove console.log\n            var matchRemoveOption = function(host, method) {\n                return !options.remove.every(function(element) {\n                    if (element.indexOf(\".\") == -1) {\n                        return element != host;\n                    }\n                    return element != host + '.' + method;\n                });\n            }\n            var removeConsoleTransformer = new UglifyJS.TreeTransformer(function(node, descend) {\n                if (node instanceof UglifyJS.AST_Call) {\n                    var host, method;\n                    try {\n                        host = node.expression.start.value;\n                        method = node.expression.end.value;\n                    } catch (err) {\n\n                    }\n\n                    if (host && method) {\n                        if (matchRemoveOption(host, method)) {\n                            return new UglifyJS.AST_Atom();\n                        }\n                    }\n                }\n                descend(node, this);\n                return node;\n            });\n            toplevel = toplevel.transform(removeConsoleTransformer);\n\n            var compressor = UglifyJS.Compressor(compressorOption);\n            toplevel = toplevel.transform(compressor);\n            toplevel.mangle_names({ except: options.except });\n\n            //output, has /*$ */ comments\n            var stream = UglifyJS.OutputStream({\n                comments: function(scope, comment) {\n                    if (isdebug) {\n                        return true;\n                    } else {\n                        if (comment.type == 'comment2' && comment.value.charAt(0) === '$' && options.copyright) {\n                            return comment;\n                        }\n                        return false;\n                    }\n                },\n                space_colon: false,\n                //quote_keys: true, object keys加引号\n                beautify: options.beautify,\n                ascii_only: options.ascii_only\n            });\n\n            toplevel.print(stream);\n            result = stream.get();\n        }\n\n        //增加前缀banner\n        if (!isdebug) {\n            result = compress.setPrefixBanner(jdf.config.output.hasBanner, source, result) + result + '\\r\\n';\n        }\n    } catch (e) {\n        if (e && e.message) {\n            console.log('jdf error [compress.js] - ' + source + ' , line:' + e.line + ', ' + e.message);\n        }\n    }\n    return result;\n};\n\n\n/**\n * @css文件压缩\n * @param source 文件/文件夹路径\n * @return compress code\n */\ncompress.css = function(source, isdebug) {    \n    var isdebug = isdebug || false;\n\n    if (!f.exists(source)) {\n        return;\n    }\n   if(jdf.config.build.hasCmdLog) console.log('compress.css---'+source);\n\n    var sourceCode = f.read(source);\n    var result = sourceCode;\n    if (!isdebug) {\n        result = new CleanCSS({\n            aggressiveMerging: false, //disable aggressive merging of properties.\n            keepBreaks: false, //是否有空格\n            processImport: false, //是否替换@import\n            compatibility: '*'\n        }).minify(sourceCode);\n    }\n\n    if (jdf.config.output.imagesSuffix) {\n        result = compress.imagesSuffix(source, result);\n    }\n\n    //增加前缀banner\n    result = compress.setPrefixBanner(jdf.config.output.hasBanner, source, result) + result + '\\r\\n';\n\n    return result;\n};\n\ncompress.css2 = function(source, isdebug) {\n   if(jdf.config.build.hasCmdLog) console.log('compress.css2---'+source);\n\n    var isdebug = isdebug || false;\n\n    if (!f.exists(source)) {\n        return;\n    }\n    var sourceCode = f.read(source);\n    var result = sourceCode;\n    if (jdf.config.output.imagesSuffix) { //替换imagesSuffix情况下的image名称\n        result = compress.imagesSuffix(source, result);\n    }\n    return result;\n}\n\n/**\n* css中图片路径替换\n* @time 2014-2-21 10:17:13\n* @param cdn 前缀\n* @param prefix css目录前缀\n* @param suffix 后缀 \n* @example \n    cssImagesUrlReplace('.test{background-image:url(\"i/test.jpg\");}','http://cdn.com/','?time=123') ===> \n    .test{background-image:url(\"http://cdn.com/i/test.jpg?time=123\");}\n*/\ncompress.cssImagesUrlReplace = function(source, str, cdn, prefix, suffix) {\n\n    //是否为widget中的css文件\n    var isWidgetCssFileReg = new RegExp(\"/\" + jdf.config.widgetDir + \"/\", \"igm\");\n    var isWidgetCssFile = isWidgetCssFileReg.test(source);\n\n    var suffix = jdf.config.suffix;\n\n    var imagesSuffix = jdf.config.output.imagesSuffix;\n\n    var cssImagesUrlReg = new RegExp(\"url\\\\(.*?\\\\)\", \"igm\");\n    var temp = str.match(cssImagesUrlReg);\n\n    var sourcedir = path.normalize(path.dirname(source));\n    var outputdir = path.normalize(f.currentDir() + '/' + jdf.config.outputDirName);\n\n    var prefix = sourcedir.replace(outputdir, '');\n    //项目在C盘,build在D盘\n    prefix = prefix.replace(path.normalize(jdf.config.outputDirName), '');\n\n    // \\替换成/\n    prefix = prefix.replace(/\\\\/g, '/');\n    prefix = '/' + prefix + '/';\n    // //替换成/\n    prefix = prefix.replace(/\\/\\//gim, '/');\n\n    if(!jdf.config.cdn){\n        prefix = '';\n    }\n\n    if (temp) {\n        var tempObj = {};\n        //去重\n        for (var i = temp.length - 1; i >= 0; i--) {\n            if ($.is.imageFile(temp[i])) {\n                tempObj[temp[i]] = 1;\n            }\n        }\n\n        for (var i in tempObj) {\n            var b = i;\n            b = b.replace('url(', '');\n            b = b.replace(')', '');\n            b = b.replace(/\\s/g, '');\n            b = b.replace(/\\\"/g, '');\n            b = b.replace(/\\'/g, '');\n\n            if (b != 'about:blank' && !$.is.httpLink(b) && !/data:image/.test(b)) {\n\n                var bOrigin = b;\n\n                var c = b.replace(/\\.\\.\\//g, \"\");\n                c = c.replace(/(^\\.\\/)/, \"\");\n\n                var hasWidget = new RegExp(\"^/\" + jdf.config.widgetDir, \"igm\");\n                if (hasWidget.test(b)) {\n                    // /widget/aaa 替换\n                    c = cdn + '/' + jdf.getProjectPath() + '/' + c;\n                } else {\n                    if (jdf.config.baseDir) {\n                        // /css/ replace其中的/app/\n                        c = c.replace('/' + jdf.config.baseDir + '/', \"\");\n                        // /css/ replace其中的 app/\n                        c = c.replace(jdf.config.baseDir + '/', '');\n                    }\n\n                    if (isWidgetCssFile) {\n                        var hasCss = new RegExp(jdf.config.cssDir, \"igm\");\n                        //widget中样式引用css中的图片\n                        if (hasCss.test(c) && c.indexOf('/') == 0) {\n                            c = cdn + '/' + $.replaceSlash(jdf.getProjectPath() + '/' + c);\n                        } else {\n                            c = cdn + $.replaceSlash(prefix + c);\n                        }\n                    } else {\n                        c = c.replace(jdf.config.cssDir + '/', \"\");\n                        c = cdn + $.replaceSlash(prefix + c);\n                    }\n                }\n\n                bOrigin = bOrigin.replace('/', '\\\\\\/').replace('?__sprite', '\\\\?__sprite').replace(/\\?/g, '\\\\?');\n                var sReg = new RegExp('url\\\\(\"{0,1}' + bOrigin + '\"{0,1}\\\\)', 'gim');\n                str = str.replace(sReg, 'url(' + c + ')');\n            }\n        };\n    };\n\n    return str;\n}\n\ncompress.imagesSuffix = function(source, str) {\n    var imagesSuffix = jdf.config.output.imagesSuffix;\n    var suffix = jdf.config.suffix;\n\n    if (imagesSuffix == 1) {\n        str = str.replace(new RegExp('\\\\.png\\\\?__sprite', 'gmi'), '.png?__sprite' + suffix);\n    } else if (imagesSuffix == 2) {\n        str = str.replace(/\\.png\\?__sprite/gmi, suffix + '.png?__sprite');\n    }\n\n    return str;\n}\n\n\n/**\n@method Pngquant优化png图片\n@option {String} source 输入文件路径\n@option {String} target 输出文件路径\n@option {Boolse} false 是否显示log\n**/\ncompress.png = function(source, target, haslog) {\n   if(jdf.config.build.hasCmdLog) console.log('compress.png---'+source);\n\n    var compressPngReg = jdf.config.output.compressPngReg;\n    if (f.filter(source, false, compressPngReg)) {\n        var buffer = fs.readFileSync(source);\n        var options = {};\n        if (typeof(haslog) != 'undefined') {\n            options.params = '-v --iebug';\n        }\n        buffer = Pngquant.option(options).compress(buffer);\n        fs.writeFileSync(target,buffer);\n    }\n};\n\n\n/**\n@method 将png jpg 转为 webp 格式\n@option {String} source 输入文件路径\n@option {String} target 输出文件路径\n@option {Number} quant 压缩质量\n@option {Function} callback 回调函数\n@option {Boolse} false 是否显示log\n**/\ncompress.webp = function(source, target, quant, callback, haslog) {\n   if(jdf.config.build.hasCmdLog) console.log( 'compress.webp---'+source);\n\n    var webp = require('webp-converter');\n    webp.cwebp(source, target, \"-q \" + quant ? quant : quant, function(status) {\n        //if conversion successfull status will be '100' \n        //if conversion unsuccessfull status will be '101' \n        if (callback) {\n            callback(status);\n        }\n    });\n\n};\n\n/**\n@method 将 webp 相关css 追加到指定css中\n@option {String} source 输入文件路径\n**/\ncompress.appendWebpCSSFIX = function(source) {\n    var AST_result = [];\n    var sourceCode = compress.css(source, false);\n    //remove comment\n    sourceCode = sourceCode.replace(/\\/\\*.*?\\*\\//ig, function(match) {\n        return \"\"\n    });\n    var rules = sourceCode.match(/.*?\\{.*?\\}/ig);\n    if (!rules) {\n        return;\n    }\n    for (var i = 0; i < rules.length; i++) {\n        var rule = rules[i];\n        if (rule.match(/\\{/g).length != rule.match(/\\}/g).length) {\n            continue;\n        }\n        var cssBodyStr = rule.match(/\\{.*?\\}/ig)[0];\n        var cssHead = rule.replace(cssBodyStr, \"\");\n        cssHead = cssHead.split(';');\n        cssHead = cssHead[cssHead.length - 1];\n        cssBodyStr = cssBodyStr.replace('{', '').replace('}', '');\n        var cssBodyProperties = cssBodyStr.split(';');\n        var astCssRule = {};\n        astCssRule.selector = cssHead;\n        astCssRule.values = [];\n        for (var j in cssBodyProperties) {\n            var cssObj = cssBodyProperties[j].split(\":\");\n            var cssPropertyName = cssObj[0];\n            var cssPropertyValue = cssBodyProperties[j].replace(cssPropertyName + \":\", \"\");\n            if (cssPropertyValue.match(/.*?url.*?\\.(png|jpg)/ig)) {\n                var _c = {\n                    k: cssPropertyName,\n                    v: cssPropertyValue.replace(/.*?url.*?\\.(png|jpg)/ig, function(match) {\n                        return match + \".webp\";\n                    })\n                };\n                astCssRule.values.push(_c);\n            }\n        }\n        if (astCssRule.values.length) {\n            AST_result.push(astCssRule);\n        }\n    }\n\n    var resultCss = [\"/* webp css prefix */\"];\n    for (var i in AST_result) {\n        var webpCssRule = AST_result[i];\n        var rootClass = jdf.config.output.webpRootClass ? '.' + jdf.config.output.webpRootClass + \" \" : \".root-webp \";\n\n        var cssValues = [];\n        for (var j in webpCssRule.values) {\n            var cssV = webpCssRule.values[j];\n            cssValues.push(cssV.k + \":\" + cssV.v);\n        }\n        var css = rootClass + webpCssRule.selector + \"{\" + cssValues.join(';') + \"}\";\n        resultCss.push(css);\n    }\n\n    var raw = f.read(source);\n    f.write(source, raw + \"\\n\" + resultCss.join(\"\\n\"));\n\n\n}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf-png-native/index.js":"var _handle = require('./binding.js');\n\nfunction Pngquant() {\n    this.params = '';\n}\n\nPngquant.prototype = {\n    option: function (opt) {\n        opt = opt || {};\n        opt.filename = opt.filename || 'stdin.png';\n        if (opt.params) {\n            this.params = opt.params + ' ' + opt.filename;\n        } else {\n            var toString = Object.prototype.toString;\n            var params = [];\n            for (var p in opt) {\n                if (opt.hasOwnProperty(p)) {\n                    switch(p) {\n                        case 'quality':\n                            var quality = opt[p];\n\n                            if (toString.call(quality) == '[object Array]') {\n                                var l = parseInt(quality[0]), h = parseInt(quality[1]);\n                                if (l < 0) {\n                                    l = 0;\n                                }\n                                \n                                if (h > 100) {\n                                    h = 100;\n                                }\n                                params.push('--quality=' + l + '-' + h)\n                            }\n                            break;\n                        case 'speed':\n                            var speed = parseInt(opt[p]);\n                            if (!speed) speed = 1;\n                            params.push('--speed='+speed);\n\n                            break;\n                        case 'iebug':\n                            if (opt[p]) {\n                                params.push('--iebug');\n                            }\n                            break;\n                    }\n                }\n            }\n            this.params = params.join(' ') + ' ' + opt.filename;\n        }\n        return this;\n    },\n\n    compress: function(buffer, opt) {\n        if (Object.prototype.toString.call(opt) == '[object Object]') {\n            this.option(opt);\n        }\n\n        if (process.versions.node >= '4.0.0') {\n            out = (new _handle(buffer, this.params)).compress();\n        } else {\n            var handle = new _handle.Pngquant();\n            out = handle.compress(buffer, this.params, function nope(){});\n        }\n\n        return out;\n    }\n};\n\nmodule.exports = new Pngquant;\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf-png-native/binding.js":"\n'use strict';\n\nvar fs = require('fs');\nvar bindName = 'pngquant_native';\n\nif (compiler(process.versions.node, '4.0.0') != -1) {\n    bindName = 'addon';\n}\n\nvar buildModule = __dirname + '/build/Release/' + bindName + '.node';\n\nif (fs.existsSync(buildModule)) {\n    try {\n        module.exports = require(buildModule);\n    } catch (e) {\n        console.log('Cant\\'t load `.node` module ' + buildModule);\n        throw e;\n    }\n    return;\n}\n\nfunction compiler(a, b) {\n\n    if (!/^(?:\\d+.?)+$/.test(a) || !/^(?:\\d+.?)+/.test(b)) {\n        return a > b;\n    }\n\n    var aArr = a.split('.');\n    var bArr = b.split('.');\n    var max = Math.max(aArr.length, bArr.length);\n\n    for (var i = 0; i < max; i++) {\n        if ((aArr[i] && !bArr[i])  || +aArr[i] > +bArr[i]) {\n            return 1;\n        } else if ((!aArr[i] && bArr[i]) || +aArr[i] < +bArr[i]) {\n            return -1;\n        }\n    }\n\n    return 0;\n}\n\nvar pkgInf = require('./package.json');\nvar bindingMap = pkgInf.bindingMap;\nvar bugUrl = pkgInf['bugs'] ? (pkgInf['bugs']['url'] || '') : '';\n\nfor ( var i in bindingMap) {\n    if (bindingMap.hasOwnProperty(i)) {\n        var target = i;\n        var versions = bindingMap[i];\n\n        var cur = process.versions['node'];\n\n        if (compiler(versions[0], cur) <= 0 && compiler(versions[1], cur) >= 0) {\n            try {\n                module.exports = require('./bindings/'+ process.platform + '/' + process.arch + '/' + target + '/' + bindName + '.node');\n                return;\n            } catch ( e ) {\n                throw new Error('Can\\'t load the addon. Issue to: ' + bugUrl + ' ' + e.stack);\n            }\n        }\n    }\n}\n\nthrow new Error('Can\\'t load the addon. Issue to: ' + bugUrl);\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/compressScheduler.js":"/**\n * Created by wangshaoxing on 2014/12/12.\n */\n\nvar path = require('path');\nvar fs = require('fs');\n//lib自身组件\nvar $ = require('./base.js');\nvar f = require('./file.js');\nvar jdf = require('./jdf.js');\n\n\n\n\nvar cpus = require('os').cpus();\n\nvar CompressScheduler = module.exports = {};\nCompressScheduler.isdebug = false;\n\n//初始化任务池\nvar arr = [];\nvar initFilesArray = function(rSource, isdebug) {\n    var isdebug = false || isdebug;\n    var source = f.realpath(rSource);\n    if (source) {\n        if (f.isDir(source)) {\n            fs.readdirSync(source).forEach(function(name) {\n                if (name != '.' && name != '..' && !(/.svn/.test(name))) {\n                    initFilesArray(source + '/' + name, isdebug);\n                }\n            });\n        };\n        if (f.isFile(source)) {\n            arr.push(source);\n        }\n    }\n}\n\n//当任务池 被取空时，确保线程合并\nvar _execOnceFlag = 0;\n\nCompressScheduler.init = function(outputdirName, isdebug, callBack) {\n    initFilesArray(outputdirName);\n    CompressScheduler.isdebug = isdebug;\n\n    //webp wrapper 只在单线程下最稳定\n    if (jdf.config.threads === 0 || (jdf.config.output && jdf.config.output.webp)) {\n        var Compress = require('./compress.js');\n        var task = arr.pop();\n        while (task) {\n\n            Compress.init(\n                task,\n                isdebug,\n                jdf.config\n            );\n            task = arr.pop();\n        }\n        callBack();\n    } else {\n        //多进程\n        var fork = require('child_process').fork;\n        var childPath = __dirname + \"/compressWorker.js\";\n        childPath = path.normalize(childPath);\n        var threadCount = jdf.config.threads || cpus.length;\n        for (var i = 0; i < threadCount; i++) {\n            var subProc = fork(childPath);\n            subProc.on('message', function(data) {\n                var task = arr.pop();\n                if (!task) {\n                    this.disconnect();\n                    _execOnceFlag++;\n                    if (_execOnceFlag >= threadCount) {\n                        callBack();\n                    }\n                    return;\n                }\n                this.send({\n                    task: task,\n                    isdebug: isdebug,\n                    config: jdf.config,\n                    getProject: jdf.getProject\n                });\n            });\n        }\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/compressWorker.js":"/**\n * Created by wangshaoxing on 2014/12/12.\n */\n\nvar path = require('path');\nvar fs = require('fs');\n\n//lib自身组件\nvar $ = require('./base.js');\nvar f = require('./file.js');\nvar compress = require('./compress.js');\nvar jdf = require('./jdf.js');\n\n\nprocess.on('message', function(data) {\n\n    compress.init(\n        data.task,\n        data.isdebug,\n        data.config,\n        data.getProject,\n        function() {\n            process.send({ tag: 1, job: data.task });\n        }\n    );\n\n\n    // if (jdf.config.output.webp) {\n    //     compress.init(\n    //         data.task,\n    //         data.isdebug,\n    //         data.config,\n    //         data.getProject,\n    //         function(){\n    //          process.send({ tag: 1, job: data.task });\n    //         }\n    //     );\n    // } else {\n    //     compress.init(\n    //         data.task,\n    //         data.isdebug,\n    //         data.config,\n    //         data.getProject\n    //     );\n    //     process.send({ tag: 1, job: data.task });\n    // }\n\n});\n\nprocess.send({ tag: 1, job: \"\" });\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/concat.js":"/**\n * @files concat\n * @ctime 2014-9-24\n */\n\nvar path = require('path');\nvar fs = require('fs');\n\n//lib自身组件\nvar $ = require('./base.js');\nvar f = require('./file.js');\nvar jdf = require('./jdf.js');\n\n//exports\nvar concat = module.exports = {};\n\nconcat.init = function(rSource){\n\tvar concatFiles = jdf.config.output.concat;\n\n\tObject.size = function(obj) {\n\t\tvar size = 0, key;\n\t\tfor (key in obj) {\n\t\t\tif (obj.hasOwnProperty(key)) size++;\n\t\t}\n\t\treturn size;\n\t};\n\tvar source = f.realpath(rSource)+'/'+jdf.getProjectPath();\n\t\n\tif ( Object.size(concatFiles)) {\n\t\tfor (var i in concatFiles  ){\n\t\t\tvar res = '';\n\t\t\tconcatFiles[i].forEach(function(j){\n\t\t\t\tvar m = $.getCssExtname(source+'/'+j);\n\t\t\t\tif (f.exists(m)) {\n\t\t\t\t\tres += f.read(m);\n\t\t\t\t\t//f.del(source+'/'+j);\n\t\t\t\t}else {\n\t\t\t\t\tconsole.log('jdf warnning \"'+j+'\" is not exists');\n\t\t\t\t}\n\t\t\t});\n\t\t\tif (res != '') {\n\t\t\t\tf.write(source+'/'+i, res);\n\t\t\t}\n\t\t}\n\t}\n}","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/csslint.js":"/**\n * @csslint\n * @ctime 2014-7-11\n * @wiki https://github.com/CSSLint/csslint/wiki/Command-line-interface\n */\n\nvar csslint = require('csslint').CSSLint;\n\nvar f = require('./file.js');\nvar $ = require('./base.js');\nvar colors = require('colors');\nvar os = require('os');\n\nfunction csslintInit(filename, fileContent){\n\tvar content = '';\n\tif(typeof(fileContent) == 'undefined'){\n\t\tcontent = f.read(filename);\n\t}else{\n\t\tcontent = fileContent;\n\t}\n\n\tvar result = csslint.verify(content);\n\t\t\n\tif(result && result.messages.length){\n\t\tvar n = 0;\n\t\tvar messagesType = function (type){\n\t\t\t return type == 'error' || type == 'warning';\n\t\t}\n\t\tresult.messages.forEach(function (message, i){\n\t\t\tvar type = message.type;\n\t\t\tif(messagesType(type)){\n\t\t\t\tn += 1;\n\t\t\t}\n\t\t});\n\n\t\tconsole.log(os.EOL + 'jdf csslint: ' + filename);\n\n\t\tresult.messages.forEach(function (message, index){\n\t\t\tvar type = message.type;\n\n\t\t\tif(messagesType(type)){\n\t\t\t\tconsole.log('#'+(index+1));\n                console.log(colors.red('> '), 'line: ' + message.line + ', column: ' + message.col);\n                console.log(colors.red('> '), 'msg: ' + message.message);\n                console.log(colors.red('> '), 'at: ' + message.evidence);\n            }\n\t\t});\n\n\t}else{\n\t\tconsole.log('jdf csslint: ' + filename + ' is ok' );\n\t}\n}\n\n/**\n * @init\n * @param {String} filename 文件名称\n * @param {String} fileContent 文件内容\n */\n\nexports.init = function(filename, fileContent){\n\tif(typeof(fileContent) == 'undefined'){\n\t\tif(f.isDir(filename)){\n\t        var filelist = f.getdirlist(filename, '(css|scss|less)$');\n\t        filelist.forEach(function(item){\n\t            csslintInit(item);\n\t        })\n\t    }else if(f.isFile(filename) && ($.is.css(filename) || $.is.less(filename) || $.is.sass(filename) ) ){\n\t       csslintInit(filename);\n\t    }else{\n\t    \tconsole.log('jdf csslint ' + filename + ' is not exists');\n\t    }\n\t}else{\n\t\tcsslintInit(filename, fileContent);\n\t}\n}","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/cssSprite.js":"/**\n * @css sprite\n * @ctime 2014-6-30\n * @todo : support repeat-x,repeat-y\n */\nvar $ = require('./base.js');\nvar f = require('./file.js');\nvar jdf = require('./jdf.js');\n\nvar path = require('path');\nvar Images = require('jdf-images');\n\nvar cssSprite = module.exports = {};\n\n/**\n * @addgetProjectPath\n */\nfunction addgetProjectPath(str){\n\tif(!jdf.config.cdn && !/^\\.\\./.test(str)){\n\t\tstr = '..'+str;\n\t}\n\treturn str ;\n}\n\n/**\n * @imagesUrlAddCdn\n */\nfunction imagesUrlAddCdn(imageUrl){\n\tvar res ='';\n\tif(jdf.config.cdn){\n\t\tres = $.replaceSlash(imageUrl);\n\t\tres = jdf.config.cdn + res;\n\t}else{\n\t\tres = addgetProjectPath(imageUrl);\n\t}\n\treturn  res;\n}\n\n/**\n * @init\n * @param {String} source css路径文件夹\n */\ncssSprite.init = function(source){\n\tif(jdf.config.output.cssSpriteMode == 0){\n\t\tcssSprite.overall(source);\n\t}\n\n\tif(jdf.config.output.cssSpriteMode == 1){\n\t\tvar list = f.getdirlist(source, '.css$');\n\t\tlist.forEach(function(item){\n\t\t\ttry{\n\t\t\t\tvar cssContent = cssSprite.scatter(item, f.read(item), source);\n\t\t\t\tf.write(item, cssContent);\n\t\t\t}catch(e){\n\t\t\t}\n\t\t});\n\t}\n}\n\n/**\n * @overall\n * @param {String} source css路径\n * @param {String} content css源码内容\n * @example\n \tbackground:#ffd4ae url(i/i-arrws.png?__sprite) no-repeat; \n\t--> \n\tbackground:#ffd4ae url(i/sptire_menu.png?__sprite) no-repeat;background-position:12px 10px;\n */\ncssSprite.overall = function(source){\n   \tvar reg_background = /background(?:-image)?:([\\s\\S]*?)(?:;|$)/gi;\n   \tvar reg_img_url = /url\\s*\\(\\s*(\"(?:[^\\\\\"\\r\\n\\f]|\\\\[\\s\\S])*\"|'(?:[^\\\\'\\n\\r\\f]|\\\\[\\s\\S])*'|[^)}]+)\\s*\\)/i;\n\tvar reg_position = /(0|[+-]?(?:\\d*\\.|)\\d+px|left|right)\\s*(0|[+-]?(?:\\d*\\.|)\\d+px|top)/i;\n\tvar reg_repeat = /\\brepeat-(x|y)/i;\n\tvar reg_is_sprite = /[?&]__sprite/i;\n\n\t\n\tvar result = [];\n\tvar resultNew = [];\n\n\tvar maxWidth = 0;\n\tvar heightTotal = 0;\n\tvar maxHeight = 0;\n\tvar widthTotal = 0;\n\n\tvar margin = jdf.config.output.cssSpriteMargin;//高度阈值\n\tvar suffix = jdf.config.suffix;\n\tvar imagesSuffix = jdf.config.output.imagesSuffix;\n\tvar cssSpriteDirection = jdf.config.output.cssSpriteDirection;\n\n\tvar cssFiles = f.getdirlist(source, '.css$');\n\tvar background = [];\n\n\tcssFiles.forEach(function(file, index){\n\t\tvar content = f.read(file);\n\t\tvar cssBg = content.match(reg_background);\n\t\tvar dir = path.dirname(file);\n\n\t\tif(cssBg){\n\t\t\tcssBg.forEach(function(bg, index){\n\t\t\t\tbackground.push({\n\t\t\t\t\tbg: bg,\n\t\t\t\t\tdir: dir\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t});\n\t\n\tif(background){\n\t\tvar resultTemp = {};\n\t\tbackground.forEach(function(item, index){\n\t\t\tvar img_url = item.bg.match(reg_img_url);\n\n\t\t\tif(img_url && reg_is_sprite.test(img_url[0]) ){\n\t\t\t\tvar res = {\n\t\t\t\t\tcontent:null,\n\t\t\t\t\turl:null,\n\t\t\t\t\tposition:null,\n\t\t\t\t\trepeat:null\n\t\t\t\t};\n\n\t\t\t\tvar url = img_url[0].replace(/url\\(|\\)|\\'|\\\"/gi,'');\n\n\t\t\t\tres.urlOrigin = url;\n\t\t\t\turl = url.replace(reg_is_sprite, '');\n\n\t\t\t\tvar sprite_rem = img_url[0].match(new RegExp('__rem\\\\d+', 'g'));\n\t\t\t\tif(sprite_rem){\n\t\t\t\t\tres.rem = parseFloat(sprite_rem[0].replace('__rem', '')); \n\t\t\t\t\turl = url.replace(/__rem\\d+/g, '');\n\t\t\t\t}\n\n\t\t\t\tres.url = path.join(item.dir, url);\n\n\t\t\t\tif(f.exists(res.url)){\n\t\t\t\t\tres.content = Images(res.url);\n\t\t\t\t\n\t\t\t\t\t//去重\n\t\t\t\t\tif(!resultTemp[res.url]){\n\t\t\t\t\t\tres.item = item.bg;\n\t\t\t\t\t\tres.width = res.content.size().width;\n\t\t\t\t\t\tres.height = res.content.size().height;\n\n\t\t\t\t\t\tif(cssSpriteDirection == 'vertical'){\n\t\t\t\t\t\t\tif(res.width>maxWidth){\n\t\t\t\t\t\t\t\tmaxWidth = res.width;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\theightTotal += res.height + margin;\n\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\tif(res.height>maxHeight){\n\t\t\t\t\t\t\t\tmaxHeight = res.height;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\twidthTotal += res.width + margin;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(item.bg.match(reg_position)){\n\t\t\t\t\t\t\tres.position = item.bg.match(reg_position)[0];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(item.bg.match(reg_repeat)){\n\t\t\t\t\t\t\tres.repeat = item.bg.match(reg_repeat)[0];\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresult.push(res);\n\t\t\t\t\t}\n\t\t\t\t\tresultTemp[res.url] = res.url;\n\t\t\t\t\t\n\t\t\t\t}else{\n\t\t\t\t\tconsole.log('jdf warning: [' + res.url + '] may be not exist.');\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tif(result.length>0){\n\n\t\tvar outputName = jdf.getProjectPath().replace(/\\//g, '_');\n\t\tvar outputExtname = '.png';\n\n\t\tvar imagesOutput = null;\n\t\tif(cssSpriteDirection == 'vertical'){\n\t\t\timagesOutput = Images(maxWidth, heightTotal);\n\t\t}else{\n\t\t\timagesOutput = Images(widthTotal, maxHeight);\n\t\t}\n\n\t\tvar w = 0;\n\t\tvar h = 0;\n\t\tresult.forEach(function(item, i){\n\t\t\tif(!item.repeat){\n\t\t\t\tvar positonArray = [];\n\t\t\t\tvar x = 0, y = h, y2 = -h;\n\n\t\t\t\tif(cssSpriteDirection == 'vertical'){\n\t\t\t\t\tvar x = 0, y = h, y2 = -h;\n\t\t\t\t\tif(item.position){\n\t\t\t\t\t\tvar position = item.position.split(' ');\n\t\t\t\t\t\tvar x1 = parseInt(position[0], 10)\n\t\t\t\t\t\tif(x1){ \n\t\t\t\t\t\t\tx += x1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar y1 = parseInt(position[1], 10)\n\t\t\t\t\t\tif(y1){\n\t\t\t\t\t\t\ty += y1;\n\t\t\t\t\t\t\ty2 -= y1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//画小图片\n\t\t\t\t\timagesOutput.draw(item.content, 0, y);\n\t\t\t\t}else{\n\t\t\t\t\tvar y = 0, x = w, x2 = -w;\n\t\t\t\t\tif(item.position){\n\t\t\t\t\t\tvar position = item.position.split(' ');\n\t\t\t\t\t\tvar x1 = parseInt(position[0], 10)\n\t\t\t\t\t\tif(x1){ \n\t\t\t\t\t\t\tx += x1;\n\t\t\t\t\t\t\tx2 -= x1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar y1 = parseInt(position[1], 10)\n\t\t\t\t\t\tif(y1){\n\t\t\t\t\t\t\ty += y1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//画小图片\n\t\t\t\t\timagesOutput.draw(item.content, x, 0);\n\t\t\t\t}\n\n\t\t\t\tvar urlOrigin = item.urlOrigin;\n\n\t\t\t\t//将需要合并的图片名称替换为合并后的新图片名称\n\t\t\t\tvar urlOriginNew = urlOrigin.replace(path.basename(item.url, path.extname(item.url)), outputName);\n\t\t\t\t\n\t\t\t\t//将图片的存放目录统一替换为css/i\n\t\t\t\turlOriginNew = urlOriginNew.replace(path.dirname(urlOriginNew), '/css/i');\n\n\t\t\t\t//给图片添加cdn\n\t\t\t\turlOriginNew = imagesUrlAddCdn('/' + jdf.getProjectPath() + urlOriginNew);\n\t\t\t\t\n\t\t\t\tvar backgroundNew = item.item.replace(urlOrigin, urlOriginNew);\n\t\t\t\tif(cssSpriteDirection == 'vertical'){\n\t\t\t\t\tif(item.rem){\n\t\t\t\t\t\tbackgroundNew += 'background-position:'+(x/item.rem)+'rem '+(y2/item.rem)+'rem;';\n\t\t\t\t\t\tbackgroundNew += 'background-size:' + (maxWidth/item.rem) + 'rem ' + (heightTotal/item.rem) + 'rem;';\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbackgroundNew += 'background-position:'+x+'px '+y2+'px;';\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tif(item.rem){\n\t\t\t\t\t\tbackgroundNew += 'background-position:'+(x2/item.rem)+'rem '+(y/item.rem)+'rem;';\n\t\t\t\t\t\tbackgroundNew += 'background-size:' + (maxWidth/item.rem) + 'rem ' + (heightTotal/item.rem) + 'rem;';\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbackgroundNew += 'background-position:'+x2+'px '+y+'px;';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\titem['backgroundNew'] = backgroundNew;\n\t\t\t\tresultNew.push(item);\n\t\t\t\t\n\t\t\t\tif(cssSpriteDirection == 'vertical'){\n\t\t\t\t\th = h + item.height + margin;\n\t\t\t\t}else{\n\t\t\t\t\tw = w + item.width + margin;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tcssFiles.forEach(function(file, index){\n\t\t\tvar content = escape(f.read(file));\n\t\t\tvar dir = path.dirname(file);\n\n\t\t\tresultNew.forEach(function(item, index){\n\t\t\t\t//替换css中的图片路径\n\t\t\t\tvar url = item.urlOrigin.replace('?__sprite', '').replace(/__rem\\d+/gi, '');\n\t\t\t\turl = path.join(dir, url);\n\t\t\t\t\n\t\t\t\tif(url == item.url){\n\t\t\t\t\tcontent = content.replace(new RegExp(escape(item.item), 'gi'), escape(item.backgroundNew));\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tif(/w2/.test(file)){\n\t\t\t\t// console.log(unescape(content))\n\t\t\t}\n\t\t\tf.write(file, unescape(content));\n\t\t});\n\t\t\n\t\t//保存合并完成的cssSprite图片\n\t\tvar outputDirName = jdf.config.outputDirName + '/' + jdf.getProjectPath() + '/css/i/';\n\t\tf.mkdir(outputDirName);\n\t\ttry{\n\t\t\tif(imagesSuffix == 2){\n\t\t\t\toutputName = outputName + suffix;\n\t\t\t}\n\t\t\timagesOutput.save(outputDirName + outputName + outputExtname);\n\t\t}catch(e){\n\t\t\tconsole.log(e);\n\t\t}\n\t}\n}\n\n\ncssSprite.scatter = function(source, content, sourceOrigin){\n   \tvar reg_background = /background(?:-image)?:([\\s\\S]*?)(?:;|$)/gi;\n   \tvar reg_img_url = /url\\s*\\(\\s*(\"(?:[^\\\\\"\\r\\n\\f]|\\\\[\\s\\S])*\"|'(?:[^\\\\'\\n\\r\\f]|\\\\[\\s\\S])*'|[^)}]+)\\s*\\)/i;\n\tvar reg_position = /(0|[+-]?(?:\\d*\\.|)\\d+px|left|right)\\s*(0|[+-]?(?:\\d*\\.|)\\d+px|top)/i;\n\tvar reg_repeat = /\\brepeat-(x|y)/i;\n\tvar reg_is_sprite = /[?&]__sprite/i;\n\n\tvar background = content.match(reg_background);\n\tvar result = [];\n\n\tvar maxWidth = 0;\n\tvar heightTotal = 0;\n\tvar maxHeight = 0;\n\tvar widthTotal = 0;\n\n\tvar margin = jdf.config.output.cssSpriteMargin;//高度阈值\n\tvar suffix = jdf.config.suffix;\n\tvar imagesSuffix = jdf.config.output.imagesSuffix;\n\tvar cssSpriteDirection = jdf.config.output.cssSpriteDirection;\n\n\tif(background){\n\t\tvar resultTemp = {};\n\t\tbackground.forEach(function(item){\n\t\t\tvar img_url = item.match(reg_img_url);\n\t\t\tif(img_url && reg_is_sprite.test(img_url[0]) ){\n\t\t\t\tvar res = {\n\t\t\t\t\tcontent:null,\n\t\t\t\t\turl:null,\n\t\t\t\t\tposition:null,\n\t\t\t\t\trepeat:null\n\t\t\t\t};\n\n\t\t\t\tvar url = img_url[0].replace(/url\\(|\\)|\\'|\\\"/gi,'');\n\t\t\t\tres.urlOrigin = url;\n\t\t\t\turl = url.replace(reg_is_sprite, '');\n\n\t\t\t\tvar sprite_rem = img_url[0].match(new RegExp('__rem\\\\d+', 'g'));\n\t\t\t\tif(sprite_rem){\n\t\t\t\t\tres.rem = parseFloat(sprite_rem[0].replace('__rem', '')); \n\t\t\t\t\turl = url.replace(/__rem\\d+/g, '');\n\t\t\t\t}\n\n\t\t\t\tif(/^\\/\\w/.test(url)){\n\t\t\t\t\tres.url = path.join(jdf.config.outputDirName, jdf.getProjectPath(), url)\n\t\t\t\t}else{\n\t\t\t\t\tres.url = path.join(path.dirname(source),url);\n\t\t\t\t}\n\t\t\t\tres.content = Images(res.url);\n\t\t\t\t\n\t\t\t\t//去重\n\t\t\t\tif(!resultTemp[url]){\n\t\t\t\t\tres.item = item;\n\t\t\t\t\tres.width = res.content.size().width;\n\t\t\t\t\tres.height = res.content.size().height;\n\n\t\t\t\t\tif(cssSpriteDirection == 'vertical'){\n\t\t\t\t\t\tif(res.width>maxWidth){\n\t\t\t\t\t\t\tmaxWidth = res.width;\n\t\t\t\t\t\t}\n\t\t\t\t\t\theightTotal += res.height + margin;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tif(res.height>maxHeight){\n\t\t\t\t\t\t\tmaxHeight = res.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twidthTotal += res.width + margin;\n\t\t\t\t\t}\n\n\t\t\t\t\tif(item.match(reg_position)){\n\t\t\t\t\t\tres.position = item.match(reg_position)[0];\n\t\t\t\t\t}\n\t\t\t\t\tif(item.match(reg_repeat)){\n\t\t\t\t\t\tres.repeat = item.match(reg_repeat)[0];\n\t\t\t\t\t}\n\t\t\t\t\tresult.push(res);\n\t\t\t\t}\n\t\t\t\tresultTemp[url] = url;\n\t\t\t}\n\t\t});\n\t}\n\n\tif(result.length>0){\n\n\t\tvar outputName = path.basename(source, path.extname(source));\n\t\tvar outputExtname = '.png';\n\n\t\tvar imagesOutput = null;\n\t\tif(cssSpriteDirection == 'vertical'){\n\t\t\timagesOutput = Images(maxWidth, heightTotal);\n\t\t}else{\n\t\t\timagesOutput = Images(widthTotal, maxHeight);\n\t\t}\n\t\t\n\t\tvar w = 0;\n\t\tvar h = 0;\n\t\tresult.forEach(function(item, i){\n\t\t\tif(!item.repeat){\n\t\t\t\toutputExtname = path.extname(item.url);\n\n\t\t\t\tif(cssSpriteDirection == 'vertical'){\n\t\t\t\t\tvar x = 0, y = h, y2 = -h;\n\t\t\t\t\tif(item.position){\n\t\t\t\t\t\tvar position = item.position.split(' ');\n\t\t\t\t\t\tvar x1 = parseInt(position[0], 10)\n\t\t\t\t\t\tif(x1){ \n\t\t\t\t\t\t\tx += x1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar y1 = parseInt(position[1], 10)\n\t\t\t\t\t\tif(y1){\n\t\t\t\t\t\t\ty += y1;\n\t\t\t\t\t\t\ty2 -= y1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//画小图片\n\t\t\t\t\timagesOutput.draw(item.content, 0, y);\n\t\t\t\t}else{\n\t\t\t\t\tvar y = 0, x = w, x2 = -w;\n\t\t\t\t\tif(item.position){\n\t\t\t\t\t\tvar position = item.position.split(' ');\n\t\t\t\t\t\tvar x1 = parseInt(position[0], 10)\n\t\t\t\t\t\tif(x1){ \n\t\t\t\t\t\t\tx += x1;\n\t\t\t\t\t\t\tx2 -= x1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tvar y1 = parseInt(position[1], 10)\n\t\t\t\t\t\tif(y1){\n\t\t\t\t\t\t\ty += y1;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t//画小图片\n\t\t\t\t\timagesOutput.draw(item.content, x, 0);\n\t\t\t\t}\n\n\t\t\t\t//样式替换\n\t\t\t\tvar urlOrigin = item.urlOrigin;\n\t\t\t\tvar urlOriginNew = urlOrigin.replace(path.basename(item.url, path.extname(item.url)) , outputName);\n\t\t\t\turlOriginNew = urlOriginNew.replace(/^\\//, '');\n\t\t\t\tif(jdf.config.cdn && jdf.config.output.cssImagesUrlReplace){\n\t\t\t\t\turlOriginNew = imagesUrlAddCdn(path.dirname(source).replace(sourceOrigin, '') +'/'+ urlOriginNew);\n\t\t\t\t}\n\t\t\t\turlOriginNew = urlOriginNew.replace(/\\.\\/|\\.\\.\\//gi, '');\n\t\t\t\t\n\t\t\t\tvar backgroundNew = item.item.replace(urlOrigin, urlOriginNew);\n\n\t\t\t\tif(cssSpriteDirection == 'vertical'){\n\t\t\t\t\tif(item.rem){\n\t\t\t\t\t\tbackgroundNew += 'background-position:'+(x/item.rem)+'rem '+(y2/item.rem)+'rem;';\n\t\t\t\t\t\tbackgroundNew += 'background-size:' + (maxWidth/item.rem) + 'rem ' + (heightTotal/item.rem) + 'rem;';\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbackgroundNew += 'background-position:'+x+'px '+y2+'px;';\n\t\t\t\t\t}\n\t\t\t\t}else{\n\t\t\t\t\tif(item.rem){\n\t\t\t\t\t\tbackgroundNew += 'background-position:'+(x2/item.rem)+'rem '+(y/item.rem)+'rem;';\n\t\t\t\t\t\tbackgroundNew += 'background-size:' + (maxWidth/item.rem) + 'rem ' + (heightTotal/item.rem) + 'rem;';\n\t\t\t\t\t}else{\n\t\t\t\t\t\tbackgroundNew += 'background-position:'+x2+'px '+y+'px;';\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t//替换图片路径\n\t\t\t\tcontent = escape(content);\n\t\t\t\tcontent = content.replace(new RegExp(escape(item.item), 'gi'), escape(backgroundNew));\n\t\t\t\tcontent = unescape(content);\n\n\t\t\t\tif(cssSpriteDirection == 'vertical'){\n\t\t\t\t\th = h + item.height + margin;\n\t\t\t\t}else{\n\t\t\t\t\tw = w + item.width + margin;\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t\n\t\t//合成大图\n\t\ttry{\n\t\t\tf.mkdir(path.dirname(source) + '/i/');\n\n\t\t\tif(imagesSuffix == 2){\n\t\t\t\toutputName = outputName + suffix;\n\t\t\t}\n\t\t\timagesOutput.save(path.dirname(source) + '/i/' + outputName + outputExtname);\n\t\t}catch(e){\n\t\t\tconsole.log(e);\n\t\t}\n\t}\n\treturn content;\n}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf-images/index.js":"module.exports = require('./jdf-images');","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf-images/jdf-images/index.js":"/*\n * Index.js\n *\n * The MIT License (MIT)\n *\n * Copyright (c) 2013 ZhangYuanwei <zhangyuanwei1988@gmail.com>\n *\n * Permission is hereby granted, free of charge, to any person obtaining a\n * copy of this software and associated documentation files (the\n * \"Software\"), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sub license, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:\n *\n * The above copyright notice and this permission notice (including the\n * next paragraph) shall be included in all copies or substantial portions\n * of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT.\n * IN NO EVENT SHALL INTEL AND/OR ITS SUPPLIERS BE LIABLE FOR\n * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\nvar USE_OLD_API = false,\n    fs = require(\"fs\"),\n    path = require(\"path\"),\n    _images = require(\"./binding.js\"),\n    _Image = _images.Image,\n    slice = Array.prototype.slice,\n    FILE_TYPE_MAP,\n    CONFIG_GENERATOR,\n    prototype,\n    nextGCThreshold = 0,\n    gcThreshold = 0;\n\nfunction WrappedImage(width, height) {\n    if (!(this instanceof WrappedImage)) return new WrappedImage(width, height);\n    if (gcThreshold && nextGCThreshold) {\n        if (images.getUsedMemory() > nextGCThreshold) {\n            images.gc();\n            nextGCThreshold = images.getUsedMemory() + gcThreshold;\n        }\n    }\n    this._handle = new _Image(width, height);\n}\n\nprototype = {\n    loadFromBuffer: function(buffer, start, end) {\n        this._handle.loadFromBuffer(buffer, start, end);\n    },\n    copyFromImage: function(img, x, y, width, height) {\n        if (img instanceof WrappedImage) {\n            img = img._handle;\n        }\n        this._handle.copyFromImage(img, x, y, width, height);\n    },\n    fill: function(red, green, blue, alpha) {\n        this._handle.fillColor(red, green, blue, alpha);\n    },\n    draw: function(img, x, y) {\n        if (img instanceof WrappedImage) {\n            img = img._handle;\n        }\n        this._handle.drawImage(img, x, y);\n    },\n    encode: function(type, config) {\n        var configurator;\n        if (typeof(type) != \"number\") {\n            type = String(type).toLowerCase();\n            type = (FILE_TYPE_MAP[\".\" + type] || FILE_TYPE_MAP[type]);\n        }\n        if (config != undefined) {\n            configurator = CONFIG_GENERATOR[type];\n            config = configurator && configurator(config);\n        }\n        return this._handle.toBuffer(type, config);\n    },\n    save: function(file, type, config) {\n        if (type && typeof(type) == \"object\") {\n            config = type;\n            type = undefined;\n        }\n        fs.writeFileSync(file, this.encode(type || path.extname(file), config));\n    },\n    saveAsync: function (file, type, config, callback) {\n        if (type && typeof(type) === 'object') {\n            config = type;\n            type = undefined;\n        }\n        if (!callback) {\n            if (typeof type === 'function') {\n                callback = type;\n                type = undefined;\n            }\n            if (typeof config === 'function') {\n                callback = config;\n                config = undefined;\n            }\n        }\n        fs.writeFile(file, this.encode(type || path.extname(file), config), callback);\n        return this;\n    },\n    resize: function(width, height, filter) {\n        this._handle.resize(width, height, filter);\n        return this;\n    },\n\n    size: function(width, height) {\n        var size;\n        if (width === undefined) return {\n            width: this.width(),\n            height: this.height()\n        };\n\n        if (height === undefined) {\n            size = this.size();\n            height = width * size.height / size.width;\n        }\n        this.width(width).height(height);\n    },\n    width: function(width) {\n        if (width === undefined) return this._handle.width;\n        this._handle.width = width;\n    },\n    height: function(height) {\n        if (height === undefined) return this._handle.height;\n        this._handle.height = height;\n    }\n};\n\nfunction bind(target, obj, aliases) {\n    var item;\n    for (item in obj) {\n        if (obj.hasOwnProperty(item)) {\n            target[item] = (function(fn) {\n                return function() {\n                    var ret = fn.apply(this, slice.call(arguments, 0));\n                    return ret === undefined ? this : ret;\n                };\n            })(obj[item]);\n            if (aliases.hasOwnProperty(item)) {\n                aliases[item].forEach(function(alias) {\n                    target[alias] = target[item];\n                });\n            }\n        }\n    }\n}\n\nbind(WrappedImage.prototype, prototype, {\n    \"fill\": [\"fillColor\"],\n    \"encode\": [\"toBuffer\"],\n    \"draw\": [\"drawImage\"]\n});\n\nfunction images(obj) {\n    var constructor;\n    if (obj instanceof Buffer) {\n        constructor = images.loadFromBuffer;\n    } else if (obj instanceof WrappedImage) {\n        constructor = images.copyFromImage;\n    } else if (typeof(obj) == \"string\") {\n        constructor = images.loadFromFile;\n    } else {\n        constructor = images.createImage;\n    }\n    return constructor.apply(images, slice.call(arguments, 0));\n}\n\nimages.TYPE_PNG = _images.TYPE_PNG;\nimages.TYPE_JPEG = _images.TYPE_JPEG;\nimages.TYPE_GIF = _images.TYPE_GIF;\nimages.TYPE_BMP = _images.TYPE_BMP;\nimages.TYPE_RAW = _images.TYPE_RAW;\n\nFILE_TYPE_MAP = {\n    \".png\": images.TYPE_PNG,\n    \".jpg\": images.TYPE_JPEG,\n    \".jpeg\": images.TYPE_JPEG,\n    \".gif\": images.TYPE_GIF,\n    \".bmp\": images.TYPE_BMP,\n    \".raw\": images.TYPE_RAW\n};\n\nCONFIG_GENERATOR = [];\n//CONFIG_GENERATOR[images.TYPE_PNG]\nCONFIG_GENERATOR[images.TYPE_JPEG] = function(config) {\n    var JPEG_CONFIG_SIZE = 5,\n        ret = new Buffer(JPEG_CONFIG_SIZE);\n\n    ret.write(\"JPEG\", 0, 4, \"ascii\");\n    ret[4] = config.quality === undefined ? 100 : config.quality;\n    return ret;\n};\n\nimages.Image = WrappedImage;\n\nimages.loadFromFile = function(file) {\n    return images.loadFromBuffer(fs.readFileSync(file));\n};\n\nimages.createImage = function(width, height) {\n    return WrappedImage(width, height);\n};\n\nimages.loadFromBuffer = function(buffer, start, end) {\n    return WrappedImage().loadFromBuffer(buffer, start, end);\n};\n\nimages.copyFromImage = function(src, x, y, width, height) {\n    return WrappedImage().copyFromImage(src, x, y, width, height);\n};\n\nimages.setLimit = function(maxWidth, maxHeight) {\n    _images.maxHeight = maxHeight;\n    _images.maxWidth = maxWidth;\n    return images;\n};\n\nimages.setGCThreshold = function(value) {\n    gcThreshold = value;\n    nextGCThreshold = value;\n};\n\nimages.getUsedMemory = function() {\n    return _images.usedMemory;\n};\n\nimages.gc = function() {\n    return _images.gc();\n};\n\nmodule.exports = USE_OLD_API ? _images : images;\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf-images/jdf-images/binding.js":"\n'use strict';\n\nvar fs = require('fs');\n\nvar buildModule = __dirname + '/build/Release/binding.node';\n\nif (fs.existsSync(buildModule)) {\n    try {\n        module.exports = require(buildModule);\n    } catch (e) {\n        console.log('Cant\\'t load `.node` module ' + buildModule);\n        throw e;\n    }\n    return;\n}\n\nfunction compiler(a, b) {\n\n    if (!/^(?:\\d+.?)+$/.test(a) || !/^(?:\\d+.?)+/.test(b)) {\n        return a > b;\n    }\n\n    var aArr = a.split('.');\n    var bArr = b.split('.');\n    var max = Math.max(aArr.length, bArr.length);\n\n    for (var i = 0; i < max; i++) {\n        if ((aArr[i] && !bArr[i])  || +aArr[i] > +bArr[i]) {\n            return 1;\n        } else if ((!aArr[i] && bArr[i]) || +aArr[i] < +bArr[i]) {\n            return -1;\n        }\n    }\n\n    return 0;\n}\n\nvar pkgInf = require('./package.json');\nvar bindingMap = pkgInf.bindingMap;\nvar bugUrl = pkgInf['bugs'] ? (pkgInf['bugs']['url'] || '') : '';\n\nfor ( var i in bindingMap)  {\n    if (bindingMap.hasOwnProperty(i)) {\n        var target = i;\n        var versions = bindingMap[i];\n\n        var cur = process.versions['node'];\n\n        if (compiler(versions[0], cur) <= 0 && compiler(versions[1], cur) >= 0) {\n            try {\n                module.exports = require('./bindings/'+ process.platform + '/' + process.arch + '/' + target + '/binding.node');\n                return;\n            } catch ( e ) {\n                throw new Error('Can\\'t load the addon. Issue to: ' + bugUrl + ' ' + e.stack);\n            }\n        }\n    }\n}\n\nthrow new Error('Can\\'t load the addon. Issue to: ' + bugUrl);\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/fileFormat.js":"var beautify = require('js-beautify');\nvar f = require('./file.js');\nvar $ = require('./base.js');\n\n\n/**\n * @init\n * @param {String} filename 文件名称\n */\nexports.init = function(filename){\n\tif(!typeof(filename) !== 'undefined'){\n\t\tif(f.isDir(filename)){\n\t\t\tvar filelist = f.getdirlist(filename, '(html|vm|tpl|css|scss|less|js)$');\n\n\t\t\tfilelist.forEach(function(file){\n\t\t\t\troute(file);\n\t\t\t});\n\n\t\t}else{\n\t\t\troute(filename);\n\t\t}\n\t}\n\n\tfunction route(file){\n\t\tvar exists = f.exists(file);\n\t\t\n\t\tif(exists){\n\t\t\tif($.is.html(file) || $.is.vm(file) || $.is.tpl(file)){\n\t\t\t\thtmlFormat(file);\n\n\t\t\t}else if($.is.css(file) || $.is.less(file) || $.is.sass(file)){\n\t\t\t\tcssFormat(file);\n\n\t\t\t}else if($.is.js(file)){\n\t\t\t\tjsFormat(file);\n\n\t\t\t}else{\n\t\t\t\tconsole.log('jdf warning: can not format the [' + file + '].\\n');\n\t\t\t}\n\t\t}else{\n\t\t\tconsole.log('jdf error: the [' + file + '] may be not exist.');\n\t\t}\n\t}\n}\n\nfunction htmlFormat(filename){\n\tvar content = f.read(filename);\n\n\tf.write(filename, beautify.html_beautify(content));\n\tconsole.log('jdf format ['+filename+'] success');\n}\n\nfunction cssFormat(filename){\n\tvar content = f.read(filename);\n\n\tf.write(filename, beautify.css_beautify(content));\n\tconsole.log('jdf format ['+filename+'] success');\n}\n\nfunction jsFormat(filename){\n\tvar content = f.read(filename);\n\n\tf.write(filename, beautify.js_beautify(content));\n\tconsole.log('jdf format ['+filename+'] success');\n}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/fileUpload.js":"/**\n * @upload by receiver\n * @ctime 2016-11-29\n */\n\nvar f = require('./file.js');\nvar jdf = require('./jdf.js');\nvar async = require('async');\nvar path = require('path');\n\nvar parseUrl = function(url, opt){\n    opt = opt || {};\n    url = require('url').parse(url);\n    var ssl = url.protocol === 'https:';\n    opt.host = opt.host\n        || opt.hostname\n        || ((ssl || url.protocol === 'http:') ? url.hostname : 'localhost');\n    opt.port = opt.port || (url.port || (ssl ? 443 : 80));\n    opt.path = opt.path || (url.pathname + (url.search ? url.search : ''));\n    opt.method = opt.method || 'GET';\n    opt.agent = opt.agent || false;\n    return opt;\n};\n\nvar map = function(obj, callback, merge){\n    var index = 0;\n    for(var key in obj){\n        if(obj.hasOwnProperty(key)){\n            if(merge){\n                callback[key] = obj[key];\n            } else if(callback(key, obj[key], index++)) {\n                break;\n            }\n        }\n    }\n};\n\nvar upload = function( opt, url, data, content, subpath, callback){\n    if(typeof content === 'string'){\n        content = new Buffer(content, 'utf8');\n    } else if(!(content instanceof  Buffer)){\n        console.log('unable to upload content [' + (typeof content) + ']');\n    }\n    data = data || {};\n    var endl = '\\r\\n';\n    var boundary = '-----np' + Math.random();\n    var collect = [];\n    map(data, function(key, value){\n        collect.push('--' + boundary + endl);\n        collect.push('Content-Disposition: form-data; name=\"' + key + '\"' + endl);\n        collect.push(endl);\n        collect.push(value + endl);\n    });\n    collect.push('--' + boundary + endl);\n    collect.push('Content-Disposition: form-data; name=\"file\"; filename=\"' + subpath + '\"' + endl);\n    collect.push(endl);\n    collect.push(content);\n    collect.push('--' + boundary + '--' + endl);\n    \n    var length = 0;\n    collect.forEach(function(ele){\n        length += ele.length;\n    });\n    \n    opt = opt || {};\n    opt.method = opt.method || 'POST';\n    opt.headers = {\n        'Content-Type': 'multipart/form-data; boundary=' + boundary,\n        'Content-Length': length\n    };\n  \n    opt = parseUrl(url, opt);\n    var http = opt.protocol === 'https:' ? require('https') : require('http');\n    \n    var req = http.request(opt, function(res){\n        var status = res.statusCode;\n        var body = '';\n        res\n            .on('data', function(chunk){\n                body += chunk;\n            })\n            .on('end', function(){\n                if(status >= 200 && status < 300 || status === 304){\n                    callback(null, body);\n                } else {\n                    callback(status);\n                }\n            })\n            .on('error', function(err){\n                callback(err.message || err);\n            });\n    });\n    collect.forEach(function(d){\n        req.write(d);\n        if(d instanceof Buffer){\n            req.write(endl);\n        }\n    });\n    req.end();\n};\n\nvar doTask = function (tasks, done) {\n    var asyncTasks = [];\n    tasks.forEach(function(task) {\n        asyncTasks.push(function(cb) {\n                upload(task.opt, task.url, task.data, task.content, task.subpath, function(n, data) {\n                    if(jdf.config.build.hasCmdLog) console.log('upload---'+task.subpath + ', by '+data);\n                    if(data==1){\n                        console.log('jdf upload \"'+task.subpath+'\" error'\n                            //' by '+ data+' !'\n                        );\n                    }else if(data==0){\n                        // console.log('jdf upload success');\n                    }\n\n                    //https://github.com/caolan/async/issues/75\n                    setTimeout(function() {\n                        cb && cb();\n                    }, 0);\n                });\n        });\n    });\n\n    async.parallelLimit(asyncTasks, 5, done);\n};\n\n\n\n\n\n/**\n* @upload\n* @time 2016-11-29\n* @param {} source 本地文件夹\n* @param {} target 远端机器文件夹\n* @param {} host 远端机器机器ip/域名\n* @param {} argv argv\n* @param {Function} callback 回调函数\n* @example\n* \n*   jdf u (上传js/css/widget)\n*   jdf u -h (上传js/css/widget/html)\n*   \n*   jdf u -custom ./dist (自定义上传dist文件夹)\n*   \n*/\n\nexports = module.exports = function(source, target, host, argv, callbak){\n    var tasks = [];\n\n    source.forEach(function(sourceItem){\n        var i = sourceItem.replace(jdf.currentDir+'/'+jdf.config.outputDirName,'');\n        if(i.search(\"\\\\\\\\\") != -1){\n            i = sourceItem.replace(jdf.currentDir+'\\\\'+jdf.config.outputDirName,'');\n        }\n\n        //只取文件里面的文件\n        if(argv[3] == '-custom' || argv[3] == '-c'){\n            i = i.replace(argv[4], '')\n        }\n\n        // {\n        //     opt:null,\n        //     url:'http://xxx.com/receiver.php',\n        //     data:{ to: '/xxx.com/build/index.html' },\n        //     content:'index.html content',\n        //     subpath:'/build/index.html'\n        // }\n\n        tasks.push({\n            opt: null,\n            url: 'http://'+host+'/receiver.php',\n            data: { to: target+i },\n            content: f.read(sourceItem, null),\n            subpath: ('/'+i).replace('//','/')\n        })\n        // console.log({\n        //     opt: null,\n        //     url: 'http://'+host+'/receiver.php',\n        //     data: { to: target+i },\n        //     content: f.read(sourceItem, null),\n        //     subpath: ('/'+i).replace('//','/')\n        // });\n    })\n    // console.log(tasks);\n    doTask(tasks, function(){\n        if(callbak) callbak();\n    });\n}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/fileWorker.js":"/**\n * Created by wangshaoxing on 2014/12/15.\n */\nvar path = require('path');\nvar fs = require('fs');\n\n//lib自身组件\nvar $ = require('./base.js');\nvar f = require('./file.js');\n\nprocess.on('message', function(data) {\n    switch (data.route){\n        case \"copy\":move(data);break;\n        case \"del\":del(data);break;\n        default :break;\n\n    }\n    process.send({tag:1,job:1});\n});\n\n/**\n * @在辅助进程里 移动文件夹\n */\nvar move=function(data){\n    f.copy(data.source,data.target);\n    f.del(data.source);\n}\n\n/**\n * @在辅助进程里 删除文件夹\n */\nvar del=function(data){\n    f.del(data.target);\n}","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/findPort.js":"/**\n * @find Port\n */\nvar net = require('net');\nmodule.exports = function (port, callback) {\n\tvar server = net.createServer().listen(port);\n\tserver.on('listening',function() {\n\t\tif (server) server.close();\n\t\tcallback(true, port);\n\t});\n\n\tserver.on('error',function(err) {\n\t\tvar result = true;\n\t\tif (err.code === 'EADDRINUSE' || err.code === 'EACCES') result = false;\n\t\tcallback(result, port);\n\t});\n}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/ftp.js":"/**\n * @ftp (upload files to remote server)\n * @time 2014-2-26 10:46:32\n */\nvar path = require('path');\nvar fs = require('fs');\n\n//依赖lib\nvar f = require('./file.js');\nvar jdf = require('./jdf.js');\n\n//exports\nvar ftp = module.exports;\nvar FTP = require('ftp');\n//挂在ftp下面,供内部和外部调用\nftp.client = new FTP();\n/**\n* @取配置信息\n* @config.json相关格式如下\n\n    {\n        \"host\":\"192.168.1.1\",\n        \"user\":\"*\",\n        \"password\":\"*\"\n    }\n\n*/\nvar options = {};\noptions.port = jdf.config.port || 21;\noptions.host = jdf.config.host || null;\noptions.user = jdf.config.user || null;\noptions.password = jdf.config.password || null;\n\n//建立链接\n\n\n\n/**\n * @当检测到ftp连接已开通,直接调用回调,否则放入 ready 事件中\n */\nftp.tryConnect = function() {\n    var _promise = {};\n    _promise.done = function(cb) {\n        _promise._done = cb;\n        return _promise;\n    };\n    _promise.err = function(cb) {\n        _promise._err = function(){\n            ftp.client.end();\n            cb();\n        } \n        return _promise;\n    };\n\n\n    if (ftp.client.connected) {\n        _promise._done();\n    } else {\n        ftp.client.on('ready', function(err) {\n            _promise._done();\n        }).on('error', function(err) {\n            try{\n                _promise._err(err);\n            }catch(e){\n                console.log('jdf error [ftp.tryConnect] ftp配置错误');\n            }\n        });\n        ftp.client.connect(options);\n\n    }\n    return _promise;\n\n}\n\n\n/**\n * @上传文件夹/文件\n * @param {String} source 原始文件夹/文件路径\n * @param {String} target 远端机器目标文件夹/文件路径\n * @param {Boole} uncover false\n * @param {Boole} move false 移动\n * @example ftp.upload('../test','test', null, null, false, false, false, function(){});\n */\n\nftp.upload = function(source, target, include, exclude, uncover, move, logTag, callback) {\n    //打开进程\n    \n    ftp.tryConnect().done(function() {\n        ftp.uploadMain(source, target, include, exclude, uncover, move, logTag, callback);\n    }).err(function(err) {\n        console.log('jdf error [ftp.upload] - ' + err);\n\n    });\n}\n\n/**\n * @上传递归函数\n */\n//上传本地和服务器端计数\nvar uploadLocalNum = 0;\nvar uploadRemoteNum = 0;\n\nftp.uploadMain = function(source, target, include, exclude, uncover, move, logTag, callback) {\n    var removedAll = true;\n    var source = f.realpath(source);\n    if (source) {\n        var core = function() {\n            if (f.isDir(source)) {\n                if (!f.isBlankDir(source)) {\n                    ftp.client.mkdir(target, false, function() {});\n                    fs.readdirSync(source).forEach(function(name) {\n                            if (name != '.' && name != '..' && !(/.svn/.test(name))) {\n                                removedAll = ftp.uploadMain(source + '/' + name, target + '/' + name, include, exclude, uncover, move, logTag, callback) && removedAll;\n                            }\n                        });\n\n                        if (move && removedAll) {\n                            fs.rmdirSync(source);\n                        }\n                }\n            } else if (f.isFile(source) && f.filter(source, include, exclude)) {\n                uploadLocalNum += 1;\n                 \n\n                if (uncover /*&& f.exists(target)*/ ) {\n                    //uncover\n                    removedAll = false;\n                } else {\n                    ftp.put(source, target, function(err) {\n                        uploadRemoteNum += 1;\n                        if (uploadLocalNum == uploadRemoteNum) {\n                            if (callback){\n                                \n                                callback(err);\n                            } \n                            //关闭进程\n                            ftp.client.end();\n                        }\n\n                    });\n\n                    if (move) {\n                        fs.unlinkSync(source);\n                    }\n                }\n            } else {\n                removedAll = false;\n            }\n        }\n        core();\n    } else {\n        if (typeof(logTag) != 'undefined' && !logTag) {\n            return;\n        }\n        console.log('[ ' + source + ' ] --- no such file or dir');\n    }\n    return removedAll;\n}\n\n/**\n * @put a file\n */\nftp.put = function(source, target, callback) {\n    ftp.client.put(source, target, function(err) {\n        if (err) {\n            console.log('jdf error [ftp.put] - ' + target + ' - ' + err);\n            if (callback) callback(err);\n            ftp.client.end();\n        } else {\n            if (callback) callback();\n        }\n    });\n}\n\n/**\n * @get a file\n */\nftp.get = function(source, target, callback) {\n    ftp.client.get(source, function(err, stream) {\n        if (err) {\n            console.log('jdf error [ftp.get] - ' + target + ' - ' + err);\n            if (callback) callback(err);\n            ftp.client.end();\n        } else {\n            stream.once('close', function() {\n                // ftp.client.end(); \n            });\n            stream.pipe(fs.createWriteStream(target));\n            if (callback) callback();\n        }\n    });\n}\n\n/**\n * @download\n * @param {String} source 远端机器目标文件夹/文件路径\n * @param {String} target 本地文件夹/文件路径\n */\nftp.download = function(source, target, callback) {\n\n    ftp.tryConnect().done(function() {\n        ftp.downloadMain(source, target, callback);\n    }).err(function(err) {\n\n    });\n}\n\n/**\n * @downloadMain\n */\nftp.downloadMain = function(source, target, callback) {\n\n    ftp.listMain(source, function(data) {\n        if (data != 'error') {\n            f.mkdir(target);\n            var serverNum = 0,\n                localNum = 0;\n            data.forEach(function(item) {\n                if (item.type == 'file') {\n                    serverNum += 1;\n                    var sourcePut = source + '/' + item.name;\n                    var targetPut = target + '/' + item.name;\n\n                    ftp.get(sourcePut, targetPut, function() {\n                        localNum += 1;\n                        if (serverNum == localNum) {\n                            ftp.client.end();\n                            if (callback) callback();\n                        }\n                    });\n                }\n            })\n        } else {\n            if (callback) callback(data);\n        };\n    });\n}\n\n/**\n * @get server files list\n */\nftp.list = function(source, callback) {\n    if (typeof(source) == 'undefined') {\n        var source = './';\n    }\n\n    ftp.tryConnect().done(function() {\n        ftp.listMain(source, callback);\n    }).err(function(err) {\n\n    });\n\n\n}\n\n/**\n * @get server files list main\n */\nftp.listMain = function(source, callback) {\n    ftp.client.list(source, function(err, list) {\n        if (err) {\n            console.log('jdf error [ftp.list] - ' + err);\n            ftp.client.end();\n        } else {\n\n            if (list && list.length > 0) {\n                var filesList = [];\n                list.forEach(function(data) {\n                    var fileType = '';\n                    if (data.type == '-') {\n                        fileType = 'file';\n                    } else if (data.type == 'd') {\n                        fileType = 'dir';\n                    }\n\n                    filesList.push({\n                        name: data.name,\n                        type: fileType\n                    })\n                })\n                if (callback) callback(filesList);\n                //ftp.client.end();\n                //console.log(\"end at 274\");\n            } else {\n                if (callback) {\n                    callback('error');\n                } else {\n                    console.log('jdf warnning : \"' + source + '\" is not exists');\n                };\n                //ftp.client.end();\n                //console.log(\"end at 282\");\n            }\n\n            if (!callback) {\n                //ftp.client.end();\n                //console.log(\"end at 287\");\n            }\n        }\n    });\n}\n\n/**\n * @get server files list\n */\nftp.mkdir = function(source, callback) {\n    if (typeof(source) == 'undefined') {\n        console.log('jdf error [ftp.mkdir] source is not exists');\n        return;\n    }\n\n    ftp.tryConnect().done(function() {\n        ftp.client.mkdir(source, false, function(err) {\n            if (callback) callback(err);\n        });\n    }).err(function(err) {\n\n    });\n\n}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/ftpUpload.js":"/**\n * @upload 2014-12-5\n */\n\nvar path = require('path');\n\n//依赖lib\nvar f = require('./file.js');\nvar jdf = require('./jdf.js');\n\n/**\n* @upload init\n* @time 2014-2-26 19:17:39 / 2014-12-5\n* @param {Function} callback custom模式下回调函数\n* @param {Boolse} haslog custom模式下是否显示log\n* @param {Boolse} hasConfig 配置文件是否存在\n* @example\n*\tjdf upload (default first run \"jdf output -html\")\n*\tjdf upload js/a.js (first run \"jdf output js/a.js\")\n*\tjdf upload -custom localdir serverdir (serverdir no exists, the same localdir)\n*  \n*  another call method \n*  \tjdf.upload([0, 0, 0, '-custom', 'localdirname', 'serverdirname'], true ,function(){})\n*  \n*/\nexports.init = function(argv, hasConfig, haslog, callback){\n\tvar haslog = typeof(haslog) == 'undefined' ? true : haslog;\n\tvar hasConfig = typeof(hasConfig) == 'undefined' ? true : hasConfig;\n\tvar ftp = {};\n\tvar uploadSource = path.normalize(f.currentDir()+'/' + jdf.config.outputDirName);\n\tvar uploadTarget = jdf.config.serverDir;\n\n\t//core function\n\tvar ftpFn = function(source, target){\n\t\t//jdf u -c ./dist /export/App/xxx 172.xxx\n\t\tif(jdf.config.serverType  == \"linux\" || argv[6]){\n\n\t\t\tvar fileUpload = require('./fileUpload.js');\n\t\t\tvar sourceFilse = f.getdirlist(source, null, '.svn|Thumbs.db|.DS_Store' );\n\t\t\tvar target = jdf.config.serverDir;\n\t\t\tvar host = jdf.config.host;\n\t\t\tif(argv[5]) target = argv[5];\n\t\t\tif(argv[6]) host = argv[6];\n\n\t\t\tfileUpload(sourceFilse, target, host, argv, function(){\n\t\t\t\tjdf.dot.end(haslog);\n\t\t\t\tif(haslog) console.log('jdf upload \"'+host+' '+target+ '\" success!');\n\t\t\t\tif(callback) callback();\n\t\t\t});\n\t\t}else if(jdf.config.serverType  == \"ftp\" ){\n\t\t\t//console.log('jdf process: uploading [' + source + '].');\n\t\t\tftp = require('./ftp.js');\n\t\t\tftp.upload(source, target, null, null, null, null, null, function(err){\n\t\t\t\tjdf.dot.end(haslog);\n\t\t\t\tif(haslog) console.log('jdf upload ['+jdf.config.host +'/'+ target+'] success!');\n\t\t\t\tif(callback) callback();\n\t\t\t});\n\t\t}else{\n\t\t\tconsole.log('jdf error [jdf.upload] - server host no setup');\n\t\t}\n\t}\n\t\n\t//default upload,do \"jdf output -html\" first\n\tvar outputFnOnce = function(){\n\t\tif (typeof(argv[3]) == 'undefined') {\n\t\t\t//argv[3] = '-html';\n\t\t}\n\t\tjdf.argvInit('output', argv, function(){\n\t\t\tftpFn(uploadSource, uploadTarget);\n\t\t});\n\t}\n\n\t//watch upload\n\tvar outputFnWatch = function(){\n\t\tftp.quit();\n\t\tjdf.buildMain('output');\n\t\tOutput.init({\n\t\t\t//type:'hashtml',\n\t\t\tcallback:function(){\n\t\t\t\tftpFn(uploadSource, uploadTarget);\n\t\t\t}\n\t\t});\n\t}\n\t\n\tif( (argv[3] == '-custom'||argv[3] == '-c') && argv[4] ){\n\t\t//custom upload\t\n\t\tif ( f.exists(argv[4]) ) {\n\t\t\tvar serverdir = argv[5] ? argv[5] : argv[4];\n\t\t\tconsole.log('jdf uploading');\n\t\t\tjdf.dot.begin();\n\t\t\tftpFn(argv[4], serverdir);\n\t\t} else{\n\t\t\tconsole.log('jdf warning [jdf.upload] - \"'+argv[4]+'\" not exists');\n\t\t};\n\t}else{\n\t\tif(!hasConfig){\n\t\t\tconsole.log('jdf error: \"config.json\" is not exists');\n\t\t\treturn;\n\t\t}\n\n\t\tif(jdf.config.host == JSON.parse(jdf.config.configJsonFileContent).host){\n\t\t\tconsole.log('jdf error: config.json \"host\" is empty');\n\t\t\treturn;\n\t\t}\n\t\n\t\t//entrance\n\t\tif (argv[3] == '-watch') {\n\t\t\t//watch upload\n\t\t\toutputFnOnce();\n\t\t\tNode_watch(f.currentDir(), function(filename) {\n\t\t\t\tconsole.log(filename);\n\t\t\t\toutputFnWatch();\n\t\t\t});\n\t\t}else if( (argv[3]=='-preview' || argv[3]=='-p' || argv[4]=='-preview' || argv[4]=='-p') && jdf.config.previewServerDir ){\n\t\t\t//preview\n\t\t\tif(argv[3] == '-preview' || argv[3] == '-p'){\n\t\t\t\targv[3] = jdf.config.buildDirName;\n\t\t\t}\n\t\t\t\n\t\t\tjdf.argvInit('output', argv, function(){\n\t\t\t\tftpFn(uploadSource, jdf.config.previewServerDir);\n\t\t\t});\n\t\t}else if( argv[3] == '-nc' && jdf.config.newcdn ){\n\t\t\t//newcdn css/js/widget\n\t\t\tif (typeof(argv[4]) != 'undefined'){\n\t\t\t\targv[3] = argv[4];\n\t\t\t\tdelete argv[4];\n\t\t\t}else{\n\t\t\t\tdelete argv[3];\n\t\t\t}\n\n\t\t\tjdf.config.cdn = jdf.config.newcdn;\n\t\t\toutputFnOnce();\n\t\t}else if( argv[3] == '-nh' && jdf.config.newcdn){\n\t\t\t//newcdn html\n\t\t\targv[3] = jdf.config.buildDirName;\n\t\t\t//内链link src替换\n\t\t\tjdf.config.cdnDefalut = jdf.config.cdn;\n\t\t\tjdf.config.cdn = jdf.config.newcdn;\n\t\t\tjdf.argvInit('output', argv, function(){\n\t\t\t\tftpFn(uploadSource, jdf.config.previewServerDir);\n\t\t\t});\n\t\t}else if(argv[3] == '-list' && jdf.config.uploadList){\n\t\t\t// 根据config.json配置上传\n\t\t\targv[3] = jdf.config.uploadList;\n\t\t\tjdf.argvInit('output', argv, function(){\n\t\t\t\tftpFn(uploadSource, uploadTarget);\n\t\t\t});\n\t\t}else {\n\t\t\t//default upload\n\t\t\toutputFnOnce();\n\t\t}\n\t}\n}","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/livereload.js":"/**\n** update **\n* \n* 2014-10-29 10:13:00 by chenxiaochun\n* 当修改scss、less文件时都不会刷新页面\n*/\n\n(function() {\nvar __customevents = {}, __protocol = {}, __connector = {}, __timer = {}, __options = {}, __reloader = {}, __livereload = {}, __less = {}, __startup = {};\n\n// customevents\nvar CustomEvents;\nCustomEvents = {\n  bind: function(element, eventName, handler) {\n    if (element.addEventListener) {\n      return element.addEventListener(eventName, handler, false);\n    } else if (element.attachEvent) {\n      element[eventName] = 1;\n      return element.attachEvent('onpropertychange', function(event) {\n        if (event.propertyName === eventName) {\n          return handler();\n        }\n      });\n    } else {\n      throw new Error(\"Attempt to attach custom event \" + eventName + \" to something which isn't a DOMElement\");\n    }\n  },\n  fire: function(element, eventName) {\n    var event;\n    if (element.addEventListener) {\n      event = document.createEvent('HTMLEvents');\n      event.initEvent(eventName, true, true);\n      return document.dispatchEvent(event);\n    } else if (element.attachEvent) {\n      if (element[eventName]) {\n        return element[eventName]++;\n      }\n    } else {\n      throw new Error(\"Attempt to fire custom event \" + eventName + \" on something which isn't a DOMElement\");\n    }\n  }\n};\n__customevents.bind = CustomEvents.bind;\n__customevents.fire = CustomEvents.fire;\n\n// protocol\nvar PROTOCOL_6, PROTOCOL_7, Parser, ProtocolError;\nvar __indexOf = Array.prototype.indexOf || function(item) {\n  for (var i = 0, l = this.length; i < l; i++) {\n    if (this[i] === item) return i;\n  }\n  return -1;\n};\n__protocol.PROTOCOL_6 = PROTOCOL_6 = 'http://livereload.com/protocols/official-6';\n__protocol.PROTOCOL_7 = PROTOCOL_7 = 'http://livereload.com/protocols/official-7';\n__protocol.ProtocolError = ProtocolError = (function() {\n  function ProtocolError(reason, data) {\n    this.message = \"LiveReload protocol error (\" + reason + \") after receiving data: \\\"\" + data + \"\\\".\";\n  }\n  return ProtocolError;\n})();\n__protocol.Parser = Parser = (function() {\n  function Parser(handlers) {\n    this.handlers = handlers;\n    this.reset();\n  }\n  Parser.prototype.reset = function() {\n    return this.protocol = null;\n  };\n  Parser.prototype.process = function(data) {\n    var command, message, options, _ref;\n    try {\n      if (!(this.protocol != null)) {\n        if (data.match(/^!!ver:([\\d.]+)$/)) {\n          this.protocol = 6;\n        } else if (message = this._parseMessage(data, ['hello'])) {\n          if (!message.protocols.length) {\n            throw new ProtocolError(\"no protocols specified in handshake message\");\n          } else if (__indexOf.call(message.protocols, PROTOCOL_7) >= 0) {\n            this.protocol = 7;\n          } else if (__indexOf.call(message.protocols, PROTOCOL_6) >= 0) {\n            this.protocol = 6;\n          } else {\n            throw new ProtocolError(\"no supported protocols found\");\n          }\n        }\n        return this.handlers.connected(this.protocol);\n      } else if (this.protocol === 6) {\n        message = JSON.parse(data);\n        if (!message.length) {\n          throw new ProtocolError(\"protocol 6 messages must be arrays\");\n        }\n        command = message[0], options = message[1];\n        if (command !== 'refresh') {\n          throw new ProtocolError(\"unknown protocol 6 command\");\n        }\n        return this.handlers.message({\n          command: 'reload',\n          path: options.path,\n          liveCSS: (_ref = options.apply_css_live) != null ? _ref : true\n        });\n      } else {\n        message = this._parseMessage(data, ['reload', 'alert']);\n        return this.handlers.message(message);\n      }\n    } catch (e) {\n      if (e instanceof ProtocolError) {\n        return this.handlers.error(e);\n      } else {\n        throw e;\n      }\n    }\n  };\n  Parser.prototype._parseMessage = function(data, validCommands) {\n    var message, _ref;\n    try {\n      message = JSON.parse(data);\n    } catch (e) {\n      throw new ProtocolError('unparsable JSON', data);\n    }\n    if (!message.command) {\n      throw new ProtocolError('missing \"command\" key', data);\n    }\n    if (_ref = message.command, __indexOf.call(validCommands, _ref) < 0) {\n      throw new ProtocolError(\"invalid command '\" + message.command + \"', only valid commands are: \" + (validCommands.join(', ')) + \")\", data);\n    }\n    return message;\n  };\n  return Parser;\n})();\n\n// connector\n// Generated by CoffeeScript 1.3.3\nvar Connector, PROTOCOL_6, PROTOCOL_7, Parser, Version, _ref;\n\n_ref = __protocol, Parser = _ref.Parser, PROTOCOL_6 = _ref.PROTOCOL_6, PROTOCOL_7 = _ref.PROTOCOL_7;\n\nVersion = '2.0.8';\n\n__connector.Connector = Connector = (function() {\n\n  function Connector(options, WebSocket, Timer, handlers) {\n    var _this = this;\n    this.options = options;\n    this.WebSocket = WebSocket;\n    this.Timer = Timer;\n    this.handlers = handlers;\n    this._uri = \"ws://\" + this.options.host + \":\" + this.options.port + \"/livereload\";\n    this._nextDelay = this.options.mindelay;\n    this._connectionDesired = false;\n    this.protocol = 0;\n    this.protocolParser = new Parser({\n      connected: function(protocol) {\n        _this.protocol = protocol;\n        _this._handshakeTimeout.stop();\n        _this._nextDelay = _this.options.mindelay;\n        _this._disconnectionReason = 'broken';\n        return _this.handlers.connected(protocol);\n      },\n      error: function(e) {\n        _this.handlers.error(e);\n        return _this._closeOnError();\n      },\n      message: function(message) {\n        return _this.handlers.message(message);\n      }\n    });\n    this._handshakeTimeout = new Timer(function() {\n      if (!_this._isSocketConnected()) {\n        return;\n      }\n      _this._disconnectionReason = 'handshake-timeout';\n      return _this.socket.close();\n    });\n    this._reconnectTimer = new Timer(function() {\n      if (!_this._connectionDesired) {\n        return;\n      }\n      return _this.connect();\n    });\n    this.connect();\n  }\n\n  Connector.prototype._isSocketConnected = function() {\n    return this.socket && this.socket.readyState === this.WebSocket.OPEN;\n  };\n\n  Connector.prototype.connect = function() {\n    var _this = this;\n    this._connectionDesired = true;\n    if (this._isSocketConnected()) {\n      return;\n    }\n    this._reconnectTimer.stop();\n    this._disconnectionReason = 'cannot-connect';\n    this.protocolParser.reset();\n    this.handlers.connecting();\n    this.socket = new this.WebSocket(this._uri);\n    this.socket.onopen = function(e) {\n      return _this._onopen(e);\n    };\n    this.socket.onclose = function(e) {\n      return _this._onclose(e);\n    };\n    this.socket.onmessage = function(e) {\n      return _this._onmessage(e);\n    };\n    return this.socket.onerror = function(e) {\n      return _this._onerror(e);\n    };\n  };\n\n  Connector.prototype.disconnect = function() {\n    this._connectionDesired = false;\n    this._reconnectTimer.stop();\n    if (!this._isSocketConnected()) {\n      return;\n    }\n    this._disconnectionReason = 'manual';\n    return this.socket.close();\n  };\n\n  Connector.prototype._scheduleReconnection = function() {\n    if (!this._connectionDesired) {\n      return;\n    }\n    if (!this._reconnectTimer.running) {\n      this._reconnectTimer.start(this._nextDelay);\n      return this._nextDelay = Math.min(this.options.maxdelay, this._nextDelay * 2);\n    }\n  };\n\n  Connector.prototype.sendCommand = function(command) {\n    if (this.protocol == null) {\n      return;\n    }\n    return this._sendCommand(command);\n  };\n\n  Connector.prototype._sendCommand = function(command) {\n    return this.socket.send(JSON.stringify(command));\n  };\n\n  Connector.prototype._closeOnError = function() {\n    this._handshakeTimeout.stop();\n    this._disconnectionReason = 'error';\n    return this.socket.close();\n  };\n\n  Connector.prototype._onopen = function(e) {\n    var hello;\n    this.handlers.socketConnected();\n    this._disconnectionReason = 'handshake-failed';\n    hello = {\n      command: 'hello',\n      protocols: [PROTOCOL_6, PROTOCOL_7]\n    };\n    hello.ver = Version;\n    if (this.options.ext) {\n      hello.ext = this.options.ext;\n    }\n    if (this.options.extver) {\n      hello.extver = this.options.extver;\n    }\n    if (this.options.snipver) {\n      hello.snipver = this.options.snipver;\n    }\n    this._sendCommand(hello);\n    return this._handshakeTimeout.start(this.options.handshake_timeout);\n  };\n\n  Connector.prototype._onclose = function(e) {\n    this.protocol = 0;\n    this.handlers.disconnected(this._disconnectionReason, this._nextDelay);\n    return this._scheduleReconnection();\n  };\n\n  Connector.prototype._onerror = function(e) {};\n\n  Connector.prototype._onmessage = function(e) {\n    return this.protocolParser.process(e.data);\n  };\n\n  return Connector;\n\n})();\n\n// timer\nvar Timer;\nvar __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n__timer.Timer = Timer = (function() {\n  function Timer(func) {\n    this.func = func;\n    this.running = false;\n    this.id = null;\n    this._handler = __bind(function() {\n      this.running = false;\n      this.id = null;\n      return this.func();\n    }, this);\n  }\n  Timer.prototype.start = function(timeout) {\n    if (this.running) {\n      clearTimeout(this.id);\n    }\n    this.id = setTimeout(this._handler, timeout);\n    return this.running = true;\n  };\n  Timer.prototype.stop = function() {\n    if (this.running) {\n      clearTimeout(this.id);\n      this.running = false;\n      return this.id = null;\n    }\n  };\n  return Timer;\n})();\nTimer.start = function(timeout, func) {\n  return setTimeout(func, timeout);\n};\n\n// options\nvar Options;\n__options.Options = Options = (function() {\n  function Options() {\n    this.host = null;\n    this.port = 35729;\n    this.snipver = null;\n    this.ext = null;\n    this.extver = null;\n    this.mindelay = 1000;\n    this.maxdelay = 60000;\n    this.handshake_timeout = 5000;\n  }\n  Options.prototype.set = function(name, value) {\n    switch (typeof this[name]) {\n      case 'undefined':\n        break;\n      case 'number':\n        return this[name] = +value;\n      default:\n        return this[name] = value;\n    }\n  };\n  return Options;\n})();\nOptions.extract = function(document) {\n  var element, keyAndValue, m, mm, options, pair, src, _i, _j, _len, _len2, _ref, _ref2;\n  _ref = document.getElementsByTagName('script');\n  for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n    element = _ref[_i];\n    if ((src = element.src) && (m = src.match(/^[^:]+:\\/\\/(.*)\\/z?livereload\\.js(?:\\?(.*))?$/))) {\n      options = new Options();\n      if (mm = m[1].match(/^([^\\/:]+)(?::(\\d+))?$/)) {\n        options.host = mm[1];\n        if (mm[2]) {\n          options.port = parseInt(mm[2], 10);\n        }\n      }\n      if (m[2]) {\n        _ref2 = m[2].split('&');\n        for (_j = 0, _len2 = _ref2.length; _j < _len2; _j++) {\n          pair = _ref2[_j];\n          if ((keyAndValue = pair.split('=')).length > 1) {\n            options.set(keyAndValue[0].replace(/-/g, '_'), keyAndValue.slice(1).join('='));\n          }\n        }\n      }\n      return options;\n    }\n  }\n  return null;\n};\n\n// reloader\n// Generated by CoffeeScript 1.3.1\n(function() {\n  var IMAGE_STYLES, Reloader, numberOfMatchingSegments, pathFromUrl, pathsMatch, pickBestMatch, splitUrl;\n\n  splitUrl = function(url) {\n    var hash, index, params;\n    if ((index = url.indexOf('#')) >= 0) {\n      hash = url.slice(index);\n      url = url.slice(0, index);\n    } else {\n      hash = '';\n    }\n    if ((index = url.indexOf('?')) >= 0) {\n      params = url.slice(index);\n      url = url.slice(0, index);\n    } else {\n      params = '';\n    }\n    return {\n      url: url,\n      params: params,\n      hash: hash\n    };\n  };\n\n  pathFromUrl = function(url) {\n    var path;\n    url = splitUrl(url).url;\n    if (url.indexOf('file://') === 0) {\n      path = url.replace(/^file:\\/\\/(localhost)?/, '');\n    } else {\n      path = url.replace(/^([^:]+:)?\\/\\/([^:\\/]+)(:\\d*)?\\//, '/');\n    }\n    return decodeURIComponent(path);\n  };\n\n  pickBestMatch = function(path, objects, pathFunc) {\n    var bestMatch, object, score, _i, _len;\n    bestMatch = {\n      score: 0\n    };\n    for (_i = 0, _len = objects.length; _i < _len; _i++) {\n      object = objects[_i];\n      score = numberOfMatchingSegments(path, pathFunc(object));\n      if (score > bestMatch.score) {\n        bestMatch = {\n          object: object,\n          score: score\n        };\n      }\n    }\n    if (bestMatch.score > 0) {\n      return bestMatch;\n    } else {\n      return null;\n    }\n  };\n\n  numberOfMatchingSegments = function(path1, path2) {\n    var comps1, comps2, eqCount, len;\n    path1 = path1.replace(/^\\/+/, '').toLowerCase();\n    path2 = path2.replace(/^\\/+/, '').toLowerCase();\n    if (path1 === path2) {\n      return 10000;\n    }\n    comps1 = path1.split('/').reverse();\n    comps2 = path2.split('/').reverse();\n    len = Math.min(comps1.length, comps2.length);\n    eqCount = 0;\n    while (eqCount < len && comps1[eqCount] === comps2[eqCount]) {\n      ++eqCount;\n    }\n    return eqCount;\n  };\n\n  pathsMatch = function(path1, path2) {\n    return numberOfMatchingSegments(path1, path2) > 0;\n  };\n\n  IMAGE_STYLES = [\n    {\n      selector: 'background',\n      styleNames: ['backgroundImage']\n    }, {\n      selector: 'border',\n      styleNames: ['borderImage', 'webkitBorderImage', 'MozBorderImage']\n    }\n  ];\n\n  __reloader.Reloader = Reloader = (function() {\n\n    Reloader.name = 'Reloader';\n\n    function Reloader(window, console, Timer) {\n      this.window = window;\n      this.console = console;\n      this.Timer = Timer;\n      this.document = this.window.document;\n      this.importCacheWaitPeriod = 200;\n      this.plugins = [];\n    }\n\n    Reloader.prototype.addPlugin = function(plugin) {\n      return this.plugins.push(plugin);\n    };\n\n    Reloader.prototype.analyze = function(callback) {\n      return results;\n    };\n\n    Reloader.prototype.reload = function(path, options) {\n      var plugin, _base, _i, _len, _ref;\n      this.options = options;\n      if ((_base = this.options).stylesheetReloadTimeout == null) {\n        _base.stylesheetReloadTimeout = 15000;\n      }\n      _ref = this.plugins;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        plugin = _ref[_i];\n        if (plugin.reload && plugin.reload(path, options)) {\n          return;\n        }\n      }\n      if (options.liveCSS) {\n        if (path.match(/\\.css|\\.scss|\\.sass|\\.less$/i)) {\n          if (this.reloadStylesheet(path)) {\n            return;\n          }\n        }\n      }\n      if (options.liveImg) {\n        if (path.match(/\\.(jpe?g|png|gif)$/i)) {\n          this.reloadImages(path);\n          return;\n        }\n      }\n      return this.reloadPage();\n    };\n\n    Reloader.prototype.reloadPage = function() {\n      return this.window.document.location.reload();\n    };\n\n    Reloader.prototype.reloadImages = function(path) {\n      var expando, img, selector, styleNames, styleSheet, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _ref3, _results;\n      expando = this.generateUniqueString();\n      _ref = this.document.images;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        img = _ref[_i];\n        if (pathsMatch(path, pathFromUrl(img.src))) {\n          img.src = this.generateCacheBustUrl(img.src, expando);\n        }\n      }\n      if (this.document.querySelectorAll) {\n        for (_j = 0, _len1 = IMAGE_STYLES.length; _j < _len1; _j++) {\n          _ref1 = IMAGE_STYLES[_j], selector = _ref1.selector, styleNames = _ref1.styleNames;\n          _ref2 = this.document.querySelectorAll(\"[style*=\" + selector + \"]\");\n          for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {\n            img = _ref2[_k];\n            this.reloadStyleImages(img.style, styleNames, path, expando);\n          }\n        }\n      }\n      if (this.document.styleSheets) {\n        _ref3 = this.document.styleSheets;\n        _results = [];\n        for (_l = 0, _len3 = _ref3.length; _l < _len3; _l++) {\n          styleSheet = _ref3[_l];\n          _results.push(this.reloadStylesheetImages(styleSheet, path, expando));\n        }\n        return _results;\n      }\n    };\n\n    Reloader.prototype.reloadStylesheetImages = function(styleSheet, path, expando) {\n      var rule, rules, styleNames, _i, _j, _len, _len1;\n      try {\n        rules = styleSheet != null ? styleSheet.cssRules : void 0;\n      } catch (e) {\n\n      }\n      if (!rules) {\n        return;\n      }\n      for (_i = 0, _len = rules.length; _i < _len; _i++) {\n        rule = rules[_i];\n        switch (rule.type) {\n          case CSSRule.IMPORT_RULE:\n            this.reloadStylesheetImages(rule.styleSheet, path, expando);\n            break;\n          case CSSRule.STYLE_RULE:\n            for (_j = 0, _len1 = IMAGE_STYLES.length; _j < _len1; _j++) {\n              styleNames = IMAGE_STYLES[_j].styleNames;\n              this.reloadStyleImages(rule.style, styleNames, path, expando);\n            }\n            break;\n          case CSSRule.MEDIA_RULE:\n            this.reloadStylesheetImages(rule, path, expando);\n        }\n      }\n    };\n\n    Reloader.prototype.reloadStyleImages = function(style, styleNames, path, expando) {\n      var newValue, styleName, value, _i, _len,\n        _this = this;\n      for (_i = 0, _len = styleNames.length; _i < _len; _i++) {\n        styleName = styleNames[_i];\n        value = style[styleName];\n        if (typeof value === 'string') {\n          newValue = value.replace(/\\burl\\s*\\(([^)]*)\\)/, function(match, src) {\n            if (pathsMatch(path, pathFromUrl(src))) {\n              return \"url(\" + (_this.generateCacheBustUrl(src, expando)) + \")\";\n            } else {\n              return match;\n            }\n          });\n          if (newValue !== value) {\n            style[styleName] = newValue;\n          }\n        }\n      }\n    };\n\n    Reloader.prototype.reloadStylesheet = function(path) {\n      var imported, link, links, match, style, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1,\n        _this = this;\n      links = (function() {\n        var _i, _len, _ref, _results;\n        _ref = this.document.getElementsByTagName('link');\n        _results = [];\n        for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n          link = _ref[_i];\n          if (link.rel === 'stylesheet' && !link.__LiveReload_pendingRemoval) {\n            _results.push(link);\n          }\n        }\n        return _results;\n      }).call(this);\n      imported = [];\n      _ref = this.document.getElementsByTagName('style');\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        style = _ref[_i];\n        if (style.sheet) {\n          this.collectImportedStylesheets(style, style.sheet, imported);\n        }\n      }\n      for (_j = 0, _len1 = links.length; _j < _len1; _j++) {\n        link = links[_j];\n        this.collectImportedStylesheets(link, link.sheet, imported);\n      }\n      if (this.window.StyleFix && this.document.querySelectorAll) {\n        _ref1 = this.document.querySelectorAll('style[data-href]');\n        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {\n          style = _ref1[_k];\n          links.push(style);\n        }\n      }\n      this.console.log(\"LiveReload found \" + links.length + \" LINKed stylesheets, \" + imported.length + \" @imported stylesheets\");\n      match = pickBestMatch(path, links.concat(imported), function(l) {\n        return pathFromUrl(_this.linkHref(l));\n      });\n      if (match) {\n        if (match.object.rule) {\n          this.console.log(\"LiveReload is reloading imported stylesheet: \" + match.object.href);\n          this.reattachImportedRule(match.object);\n        } else {\n          this.console.log(\"LiveReload is reloading stylesheet: \" + (this.linkHref(match.object)));\n          this.reattachStylesheetLink(match.object);\n        }\n      } else {\n        this.console.log(\"LiveReload will reload all stylesheets because path '\" + path + \"' did not match any specific one\");\n        for (_l = 0, _len3 = links.length; _l < _len3; _l++) {\n          link = links[_l];\n          this.reattachStylesheetLink(link);\n        }\n      }\n      return true;\n    };\n\n    Reloader.prototype.collectImportedStylesheets = function(link, styleSheet, result) {\n      var index, rule, rules, _i, _len;\n      try {\n        rules = styleSheet != null ? styleSheet.cssRules : void 0;\n      } catch (e) {\n\n      }\n      if (rules && rules.length) {\n        for (index = _i = 0, _len = rules.length; _i < _len; index = ++_i) {\n          rule = rules[index];\n          switch (rule.type) {\n            case CSSRule.CHARSET_RULE:\n              continue;\n            case CSSRule.IMPORT_RULE:\n              result.push({\n                link: link,\n                rule: rule,\n                index: index,\n                href: rule.href\n              });\n              this.collectImportedStylesheets(link, rule.styleSheet, result);\n              break;\n            default:\n              break;\n          }\n        }\n      }\n    };\n\n    Reloader.prototype.waitUntilCssLoads = function(clone, func) {\n      var callbackExecuted, executeCallback, poll,\n        _this = this;\n      callbackExecuted = false;\n      executeCallback = function() {\n        if (callbackExecuted) {\n          return;\n        }\n        callbackExecuted = true;\n        return func();\n      };\n      clone.onload = function() {\n        console.log(\"onload!\");\n        _this.knownToSupportCssOnLoad = true;\n        return executeCallback();\n      };\n      if (!this.knownToSupportCssOnLoad) {\n        (poll = function() {\n          if (clone.sheet) {\n            console.log(\"polling!\");\n            return executeCallback();\n          } else {\n            return _this.Timer.start(50, poll);\n          }\n        })();\n      }\n      return this.Timer.start(this.options.stylesheetReloadTimeout, executeCallback);\n    };\n\n    Reloader.prototype.linkHref = function(link) {\n      return link.href || link.getAttribute('data-href');\n    };\n\n    Reloader.prototype.reattachStylesheetLink = function(link) {\n      var clone, parent,\n        _this = this;\n      if (link.__LiveReload_pendingRemoval) {\n        return;\n      }\n      link.__LiveReload_pendingRemoval = true;\n      if (link.tagName === 'STYLE') {\n        clone = this.document.createElement('link');\n        clone.rel = 'stylesheet';\n        clone.media = link.media;\n        clone.disabled = link.disabled;\n      } else {\n        clone = link.cloneNode(false);\n      }\n      clone.href = this.generateCacheBustUrl(this.linkHref(link));\n      parent = link.parentNode;\n      if (parent.lastChild === link) {\n        parent.appendChild(clone);\n      } else {\n        parent.insertBefore(clone, link.nextSibling);\n      }\n      return this.waitUntilCssLoads(clone, function() {\n        var additionalWaitingTime;\n        if (/AppleWebKit/.test(navigator.userAgent)) {\n          additionalWaitingTime = 5;\n        } else {\n          additionalWaitingTime = 200;\n        }\n        return _this.Timer.start(additionalWaitingTime, function() {\n          var _ref;\n          if (!link.parentNode) {\n            return;\n          }\n          link.parentNode.removeChild(link);\n          clone.onreadystatechange = null;\n          return (_ref = _this.window.StyleFix) != null ? _ref.link(clone) : void 0;\n        });\n      });\n    };\n\n    Reloader.prototype.reattachImportedRule = function(_arg) {\n      var href, index, link, media, newRule, parent, rule, tempLink,\n        _this = this;\n      rule = _arg.rule, index = _arg.index, link = _arg.link;\n      parent = rule.parentStyleSheet;\n      href = this.generateCacheBustUrl(rule.href);\n      media = rule.media.length ? [].join.call(rule.media, ', ') : '';\n      newRule = \"@import url(\\\"\" + href + \"\\\") \" + media + \";\";\n      rule.__LiveReload_newHref = href;\n      tempLink = this.document.createElement(\"link\");\n      tempLink.rel = 'stylesheet';\n      tempLink.href = href;\n      tempLink.__LiveReload_pendingRemoval = true;\n      if (link.parentNode) {\n        link.parentNode.insertBefore(tempLink, link);\n      }\n      return this.Timer.start(this.importCacheWaitPeriod, function() {\n        if (tempLink.parentNode) {\n          tempLink.parentNode.removeChild(tempLink);\n        }\n        if (rule.__LiveReload_newHref !== href) {\n          return;\n        }\n        parent.insertRule(newRule, index);\n        parent.deleteRule(index + 1);\n        rule = parent.cssRules[index];\n        rule.__LiveReload_newHref = href;\n        return _this.Timer.start(_this.importCacheWaitPeriod, function() {\n          if (rule.__LiveReload_newHref !== href) {\n            return;\n          }\n          parent.insertRule(newRule, index);\n          return parent.deleteRule(index + 1);\n        });\n      });\n    };\n\n    Reloader.prototype.generateUniqueString = function() {\n      return 'livereload=' + Date.now();\n    };\n\n    Reloader.prototype.generateCacheBustUrl = function(url, expando) {\n      var hash, oldParams, params, _ref;\n      if (expando == null) {\n        expando = this.generateUniqueString();\n      }\n      _ref = splitUrl(url), url = _ref.url, hash = _ref.hash, oldParams = _ref.params;\n      if (this.options.overrideURL) {\n        if (url.indexOf(this.options.serverURL) < 0) {\n          url = this.options.serverURL + this.options.overrideURL + \"?url=\" + encodeURIComponent(url);\n        }\n      }\n      params = oldParams.replace(/(\\?|&)livereload=(\\d+)/, function(match, sep) {\n        return \"\" + sep + expando;\n      });\n      if (params === oldParams) {\n        if (oldParams.length === 0) {\n          params = \"?\" + expando;\n        } else {\n          params = \"\" + oldParams + \"&\" + expando;\n        }\n      }\n      return url + params + hash;\n    };\n\n    return Reloader;\n\n  })();\n\n}).call(this);\n\n// livereload\nvar Connector, LiveReload, Options, Reloader, Timer;\n\nConnector = __connector.Connector;\n\nTimer = __timer.Timer;\n\nOptions = __options.Options;\n\nReloader = __reloader.Reloader;\n\n__livereload.LiveReload = LiveReload = (function() {\n\n  function LiveReload(window) {\n    var _this = this;\n    this.window = window;\n    this.listeners = {};\n    this.plugins = [];\n    this.pluginIdentifiers = {};\n    this.console = this.window.location.href.match(/LR-verbose/) && this.window.console && this.window.console.log && this.window.console.error ? this.window.console : {\n      log: function() {},\n      error: function() {}\n    };\n    if (!(this.WebSocket = this.window.WebSocket || this.window.MozWebSocket)) {\n      console.error(\"LiveReload disabled because the browser does not seem to support web sockets\");\n      return;\n    }\n    if (!(this.options = Options.extract(this.window.document))) {\n      console.error(\"LiveReload disabled because it could not find its own <SCRIPT> tag\");\n      return;\n    }\n    this.reloader = new Reloader(this.window, this.console, Timer);\n    this.connector = new Connector(this.options, this.WebSocket, Timer, {\n      connecting: function() {},\n      socketConnected: function() {},\n      connected: function(protocol) {\n        var _base;\n        if (typeof (_base = _this.listeners).connect === \"function\") {\n          _base.connect();\n        }\n        _this.log(\"LiveReload is connected to \" + _this.options.host + \":\" + _this.options.port + \" (protocol v\" + protocol + \").\");\n        return _this.analyze();\n      },\n      error: function(e) {\n        if (e instanceof ProtocolError) {\n          return console.log(\"\" + e.message + \".\");\n        } else {\n          return console.log(\"LiveReload internal error: \" + e.message);\n        }\n      },\n      disconnected: function(reason, nextDelay) {\n        var _base;\n        if (typeof (_base = _this.listeners).disconnect === \"function\") {\n          _base.disconnect();\n        }\n        switch (reason) {\n          case 'cannot-connect':\n            return _this.log(\"LiveReload cannot connect to \" + _this.options.host + \":\" + _this.options.port + \", will retry in \" + nextDelay + \" sec.\");\n          case 'broken':\n            return _this.log(\"LiveReload disconnected from \" + _this.options.host + \":\" + _this.options.port + \", reconnecting in \" + nextDelay + \" sec.\");\n          case 'handshake-timeout':\n            return _this.log(\"LiveReload cannot connect to \" + _this.options.host + \":\" + _this.options.port + \" (handshake timeout), will retry in \" + nextDelay + \" sec.\");\n          case 'handshake-failed':\n            return _this.log(\"LiveReload cannot connect to \" + _this.options.host + \":\" + _this.options.port + \" (handshake failed), will retry in \" + nextDelay + \" sec.\");\n          case 'manual':\n            break;\n          case 'error':\n            break;\n          default:\n            return _this.log(\"LiveReload disconnected from \" + _this.options.host + \":\" + _this.options.port + \" (\" + reason + \"), reconnecting in \" + nextDelay + \" sec.\");\n        }\n      },\n      message: function(message) {\n        switch (message.command) {\n          case 'reload':\n            return _this.performReload(message);\n          case 'alert':\n            return _this.performAlert(message);\n        }\n      }\n    });\n  }\n\n  LiveReload.prototype.on = function(eventName, handler) {\n    return this.listeners[eventName] = handler;\n  };\n\n  LiveReload.prototype.log = function(message) {\n    return this.console.log(\"\" + message);\n  };\n\n  LiveReload.prototype.performReload = function(message) {\n    var _ref, _ref2;\n    this.log(\"LiveReload received reload request for \" + message.path + \".\");\n    return this.reloader.reload(message.path, {\n      liveCSS: (_ref = message.liveCSS) != null ? _ref : true,\n      liveImg: (_ref2 = message.liveImg) != null ? _ref2 : true,\n      originalPath: message.originalPath || '',\n      overrideURL: message.overrideURL || '',\n      serverURL: \"http://\" + this.options.host + \":\" + this.options.port\n    });\n  };\n\n  LiveReload.prototype.performAlert = function(message) {\n    return alert(message.message);\n  };\n\n  LiveReload.prototype.shutDown = function() {\n    var _base;\n    this.connector.disconnect();\n    this.log(\"LiveReload disconnected.\");\n    return typeof (_base = this.listeners).shutdown === \"function\" ? _base.shutdown() : void 0;\n  };\n\n  LiveReload.prototype.hasPlugin = function(identifier) {\n    return !!this.pluginIdentifiers[identifier];\n  };\n\n  LiveReload.prototype.addPlugin = function(pluginClass) {\n    var plugin;\n    var _this = this;\n    if (this.hasPlugin(pluginClass.identifier)) return;\n    this.pluginIdentifiers[pluginClass.identifier] = true;\n    plugin = new pluginClass(this.window, {\n      _livereload: this,\n      _reloader: this.reloader,\n      _connector: this.connector,\n      console: this.console,\n      Timer: Timer,\n      generateCacheBustUrl: function(url) {\n        return _this.reloader.generateCacheBustUrl(url);\n      }\n    });\n    this.plugins.push(plugin);\n    this.reloader.addPlugin(plugin);\n  };\n\n  LiveReload.prototype.analyze = function() {\n    var plugin, pluginData, pluginsData, _i, _len, _ref;\n    if (!(this.connector.protocol >= 7)) return;\n    pluginsData = {};\n    _ref = this.plugins;\n    for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n      plugin = _ref[_i];\n      pluginsData[plugin.constructor.identifier] = pluginData = (typeof plugin.analyze === \"function\" ? plugin.analyze() : void 0) || {};\n      pluginData.version = plugin.constructor.version;\n    }\n    this.connector.sendCommand({\n      command: 'info',\n      plugins: pluginsData,\n      url: this.window.location.href\n    });\n  };\n\n  return LiveReload;\n\n})();\n\n// less\nvar LessPlugin;\n__less = LessPlugin = (function() {\n  LessPlugin.identifier = 'less';\n  LessPlugin.version = '1.0';\n  function LessPlugin(window, host) {\n    this.window = window;\n    this.host = host;\n  }\n  LessPlugin.prototype.reload = function(path, options) {\n    if (this.window.less && this.window.less.refresh) {\n      if (path.match(/\\.less$/i)) {\n        return this.reloadLess(path);\n      }\n      if (options.originalPath.match(/\\.less$/i)) {\n        return this.reloadLess(options.originalPath);\n      }\n    }\n    return false;\n  };\n  LessPlugin.prototype.reloadLess = function(path) {\n    var link, links, _i, _len;\n    links = (function() {\n      var _i, _len, _ref, _results;\n      _ref = document.getElementsByTagName('link');\n      _results = [];\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        link = _ref[_i];\n        if (link.href && link.rel === 'stylesheet/less' || (link.rel.match(/stylesheet/) && link.type.match(/^text\\/(x-)?less$/))) {\n          _results.push(link);\n        }\n      }\n      return _results;\n    })();\n    if (links.length === 0) {\n      return false;\n    }\n    for (_i = 0, _len = links.length; _i < _len; _i++) {\n      link = links[_i];\n      link.href = this.host.generateCacheBustUrl(link.href);\n    }\n    this.host.console.log(\"LiveReload is asking LESS to recompile all stylesheets\");\n    this.window.less.refresh(true);\n    return true;\n  };\n  LessPlugin.prototype.analyze = function() {\n    return {\n      disable: !!(this.window.less && this.window.less.refresh)\n    };\n  };\n  return LessPlugin;\n})();\n\n// startup\nvar CustomEvents, LiveReload, k;\nCustomEvents = __customevents;\nLiveReload = window.LiveReload = new (__livereload.LiveReload)(window);\nfor (k in window) {\n  if (k.match(/^LiveReloadPlugin/)) {\n    LiveReload.addPlugin(window[k]);\n  }\n}\nLiveReload.addPlugin(__less);\nLiveReload.on('shutdown', function() {\n  return delete window.LiveReload;\n});\nLiveReload.on('connect', function() {\n  return CustomEvents.fire(document, 'LiveReloadConnect');\n});\nLiveReload.on('disconnect', function() {\n  return CustomEvents.fire(document, 'LiveReloadDisconnect');\n});\nCustomEvents.bind(document, 'LiveReloadShutDown', function() {\n  return LiveReload.shutDown();\n});\n})();","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/livereloadServer.js":"/**\n * @livereload\n * @refer http://feedback.livereload.com/knowledgebase/articles/86174-livereload-protocol\n * @refer https://www.npmjs.org/package/node-livereload\n */\nvar livereloadPath = \"\" + __dirname + \"/../lib/\";\n\nvar http = require('http');\nvar path = require('path');\nvar url = require('url');\nvar fs = require('fs');\n\nvar WSServer = require('jdf-ws').Server;\n\nvar Server={};\nmodule.exports = Server;\n\n/**\n * @init\n */\nServer.init = function(options) {\n\tvar key, opts, value;\n\tif ( typeof(options) == 'undefined' ) {\n\t\tvar options = {};\n\t}\n\topts = {\n\t\tapiVersion: '1.6',\n\t\t//host: '0.0.0.0',\n\t\tport: '35729'// 不能变\n\t};\n\n\tfor (key in opts) {\n\t\tvalue = opts[key];\n\t\tif (options[key]) {\n\t\t\topts[key] = options[value];\n\t\t}\n\t}\n\n\tthis.conns = [];\n\tthis.web = null;\n\tthis.options = opts;\n\n\tconsole.log(\"LiveReload is waiting for a browser to connect\");\n\tvar connectTag = true;\n\tthis.start(function(){\n\t\tif (connectTag) {\n\t\t\tconsole.log('Browser connected LiveReload');\n\t\t}\n\t\tconnectTag = false;\n\t});\n};\n\nServer.reloadBrowser = function(paths) {\n\tvar conn, data, _i, _len, _results;\n\tif (paths == null) {\n\t\tpaths = [];\n\t}\n\t//console.log(\"Reloading browser: \" + (paths.join(' ')));\n\t_results = [];\n\tfor (_i = 0, _len = paths.length; _i < _len; _i++) {\n\t\tpath = paths[_i];\n\t\tdata = {\n\t\t\tcommand: 'reload',\n\t\t\tpath: path,\n\t\t\tliveCSS: true,\n\t\t\tliveImg: true\n\t\t};\n\t\t_results.push((function() {\n\t\t\tvar _j, _len1, _ref, _results1;\n\t\t\t_ref = this.conns;\n\t\t\t_results1 = [];\n\t\t\tfor (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {\n\t\t\t\tconn = _ref[_j];\n\t\t\t\t_results1.push(conn.send(JSON.stringify(data)));\n\t\t\t}\n\t\t\treturn _results1;\n\t\t}).call(this));\n\t}\n\treturn _results;\n};\n\nServer.stop = function() {\n\treturn this.web.close(function() {\n\t\tif (this.web) {\n\t\t\treturn console.log('Shutdown the server.');\n\t\t}\n\t});\n};\n\nServer.start = function(callback) {\n\tvar conns, web, wss;\n\t//console.log(\"LiveReload \" + this.options.apiVersion + \" is waiting for a browser to connect.\");\n\tconns = this.conns;\n\n\tweb = http.createServer(function(request, response) {\n\t\tvar body, exists, existsFuc, file, query, read;\n\t\tquery = url.parse(request.url, true);\n\t\texistsFuc = fs.existsSync ? fs.existsSync: path.existsSync;\n\t\tfile = \"\" + livereloadPath + query.pathname;\n\t\texists = existsFuc(file);\n\t\tif (exists && query.pathname !== '/') {\n\t\t\tresponse.writeHead(200, {\n\t\t\t\t'Transfer-Encoding': 'chunked',\n\t\t\t\t'Content-Type': 'application/x-javascript'\n\t\t\t});\n\t\t\tread = fs.createReadStream(file);\n\t\t\treturn read.pipe(response);\n\t\t} else {\n\t\t\tbody = 'Not Found';\n\t\t\tresponse.writeHead(404, {\n\t\t\t\t'Content-Length': body.length,\n\t\t\t\t'Content-Type': 'text/plain'\n\t\t\t});\n\t\t\treturn response.end(body);\n\t\t}\n\t});\n\n\tweb.listen(this.options.port, this.options.host);\n\tthis.web = web;\n\n\twss = new WSServer({\n\t\tserver: web,\n\t\tpath: '/livereload'\n\t});\n\t\n\twss.on('connection',function(ws) {\n\t\tif(callback) callback();\n\t\t//console.log('Browser connected.');\n\t\tconns.push(ws);\n\n\t\tws.on('message', function(msg, flag) {\n\t\t\tvar handshake, protocols;\n\t\t\tmsg = JSON.parse(msg);\n\t\t\tif (msg.command === 'hello') {\n\t\t\t\tprotocols = msg.protocols;\n\t\t\t\tprotocols.push('http://livereload.com/protocols/2.x-remote-control');\n\t\t\t\tprotocols.push('http://livereload.com/protocols/official-7');\n\t\t\t\thandshake = {\n\t\t\t\t\t'command': 'hello',\n\t\t\t\t\t'protocols': protocols,\n\t\t\t\t\t'serverName': 'livereload-node'\n\t\t\t\t};\n\t\t\t\tws.send(JSON.stringify(handshake));\n\t\t\t}\n\t\t\tif (msg.command === 'info' && msg['url']) {\n\t\t\t\t//return console.log(\"Browser URL: \" + msg.url);\n\t\t\t}\n\t\t});\n\t\t\n\t\tws.on('close',function() {\n\t\t\tconns.splice(conns.indexOf(ws, 1));\n\t\t\t//return console.log('Browser disconnected.');\n\t\t});\n\t});\n};","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf-ws/index.js":"module.exports = require('./ws');","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf-ws/ws/index.js":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nmodule.exports = require('./lib/WebSocket');\nmodule.exports.Server = require('./lib/WebSocketServer');\nmodule.exports.Sender = require('./lib/Sender');\nmodule.exports.Receiver = require('./lib/Receiver');\n\nmodule.exports.createServer = function (options, connectionListener) {\n  var server = new module.exports.Server(options);\n  if (typeof connectionListener === 'function') {\n    server.on('connection', connectionListener);\n  }\n  return server;\n};\n\nmodule.exports.connect = module.exports.createConnection = function (address, openListener) {\n  var client = new module.exports(address);\n  if (typeof openListener === 'function') {\n    client.on('open', openListener);\n  }\n  return client;\n};\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf-ws/ws/lib/WebSocket.js":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar util = require('util')\n  , events = require('events')\n  , http = require('http')\n  , https = require('https')\n  , crypto = require('crypto')\n  , url = require('url')\n  , fs = require('fs')\n  , Options = require('../options')\n  , Sender = require('./Sender')\n  , Receiver = require('./Receiver')\n  , SenderHixie = require('./Sender.hixie')\n  , ReceiverHixie = require('./Receiver.hixie');\n\n/**\n * Constants\n */\n\n// Default protocol version\n\nvar protocolVersion = 13;\n\n// Close timeout\n\nvar closeTimeout = 30000; // Allow 5 seconds to terminate the connection cleanly\n\n/**\n * Node version 0.4 and 0.6 compatibility\n */\n\nvar isNodeV4 = /^v0\\.4/.test(process.version);\n\n/**\n * WebSocket implementation\n */\n\nfunction WebSocket(address, protocols, options) {\n\n  if (protocols && !Array.isArray(protocols) && 'object' == typeof protocols) {\n    // accept the \"options\" Object as the 2nd argument\n    options = protocols;\n    protocols = null;\n  }\n  if ('string' == typeof protocols) {\n    protocols = [ protocols ];\n  }\n  if (!Array.isArray(protocols)) {\n    protocols = [];\n  }\n  // TODO: actually handle the `Sub-Protocols` part of the WebSocket client\n\n  this._socket = null;\n  this.bytesReceived = 0;\n  this.readyState = null;\n  this.supports = {};\n\n  if (Array.isArray(address)) {\n    initAsServerClient.apply(this, address.concat(options));\n  } else {\n    initAsClient.apply(this, [address, protocols, options]);\n  }\n}\n\n/**\n * Inherits from EventEmitter.\n */\n\nutil.inherits(WebSocket, events.EventEmitter);\n\n/**\n * Ready States\n */\n\n[\"CONNECTING\", \"OPEN\", \"CLOSING\", \"CLOSED\"].forEach(function (state, index) {\n    WebSocket.prototype[state] = WebSocket[state] = index;\n});\n\n/**\n * Gracefully closes the connection, after sending a description message to the server\n *\n * @param {Object} data to be sent to the server\n * @api public\n */\n\nWebSocket.prototype.close = function(code, data) {\n  if (this.readyState == WebSocket.CLOSING || this.readyState == WebSocket.CLOSED) return;\n  if (this.readyState == WebSocket.CONNECTING) {\n    this.readyState = WebSocket.CLOSED;\n    return;\n  }\n  try {\n    this.readyState = WebSocket.CLOSING;\n    this._closeCode = code;\n    this._closeMessage = data;\n    var mask = !this._isServer;\n    this._sender.close(code, data, mask);\n  }\n  catch (e) {\n    this.emit('error', e);\n  }\n  finally {\n    this.terminate();\n  }\n}\n\n/**\n * Pause the client stream\n *\n * @api public\n */\n\nWebSocket.prototype.pause = function() {\n  if (this.readyState != WebSocket.OPEN) throw new Error('not opened');\n  return this._socket.pause();\n}\n\n/**\n * Sends a ping\n *\n * @param {Object} data to be sent to the server\n * @param {Object} Members - mask: boolean, binary: boolean\n * @param {boolean} dontFailWhenClosed indicates whether or not to throw if the connection isnt open\n * @api public\n */\n\nWebSocket.prototype.ping = function(data, options, dontFailWhenClosed) {\n  if (this.readyState != WebSocket.OPEN) {\n    if (dontFailWhenClosed === true) return;\n    throw new Error('not opened');\n  }\n  options = options || {};\n  if (typeof options.mask == 'undefined') options.mask = !this._isServer;\n  this._sender.ping(data, options);\n}\n\n/**\n * Sends a pong\n *\n * @param {Object} data to be sent to the server\n * @param {Object} Members - mask: boolean, binary: boolean\n * @param {boolean} dontFailWhenClosed indicates whether or not to throw if the connection isnt open\n * @api public\n */\n\nWebSocket.prototype.pong = function(data, options, dontFailWhenClosed) {\n  if (this.readyState != WebSocket.OPEN) {\n    if (dontFailWhenClosed === true) return;\n    throw new Error('not opened');\n  }\n  options = options || {};\n  if (typeof options.mask == 'undefined') options.mask = !this._isServer;\n  this._sender.pong(data, options);\n}\n\n/**\n * Resume the client stream\n *\n * @api public\n */\n\nWebSocket.prototype.resume = function() {\n  if (this.readyState != WebSocket.OPEN) throw new Error('not opened');\n  return this._socket.resume();\n}\n\n/**\n * Sends a piece of data\n *\n * @param {Object} data to be sent to the server\n * @param {Object} Members - mask: boolean, binary: boolean\n * @param {function} Optional callback which is executed after the send completes\n * @api public\n */\n\nWebSocket.prototype.send = function(data, options, cb) {\n  if (typeof options == 'function') {\n    cb = options;\n    options = {};\n  }\n  if (this.readyState != WebSocket.OPEN) {\n    if (typeof cb == 'function') cb(new Error('not opened'));\n    else throw new Error('not opened');\n    return;\n  }\n  if (!data) data = '';\n  if (this._queue) {\n    var self = this;\n    this._queue.push(function() { self.send(data, options, cb); });\n    return;\n  }\n  options = options || {};\n  options.fin = true;\n  if (typeof options.binary == 'undefined') {\n    options.binary = (data instanceof ArrayBuffer || data instanceof Buffer ||\n      data instanceof Uint8Array ||\n      data instanceof Uint16Array ||\n      data instanceof Uint32Array ||\n      data instanceof Int8Array ||\n      data instanceof Int16Array ||\n      data instanceof Int32Array ||\n      data instanceof Float32Array ||\n      data instanceof Float64Array);\n  }\n  if (typeof options.mask == 'undefined') options.mask = !this._isServer;\n  if (data instanceof fs.ReadStream) {\n    startQueue(this);\n    var self = this;\n    sendStream(this, data, options, function(error) {\n      process.nextTick(function() { executeQueueSends(self); });\n      if (typeof cb == 'function') cb(error);\n    });\n  }\n  else this._sender.send(data, options, cb);\n}\n\n/**\n * Streams data through calls to a user supplied function\n *\n * @param {Object} Members - mask: boolean, binary: boolean\n * @param {function} 'function (error, send)' which is executed on successive ticks of which send is 'function (data, final)'.\n * @api public\n */\n\nWebSocket.prototype.stream = function(options, cb) {\n  if (typeof options == 'function') {\n    cb = options;\n    options = {};\n  }\n  var self = this;\n  if (typeof cb != 'function') throw new Error('callback must be provided');\n  if (this.readyState != WebSocket.OPEN) {\n    if (typeof cb == 'function') cb(new Error('not opened'));\n    else throw new Error('not opened');\n    return;\n  }\n  if (this._queue) {\n    this._queue.push(function() { self.stream(options, cb); });\n    return;\n  }\n  options = options || {};\n  if (typeof options.mask == 'undefined') options.mask = !this._isServer;\n  startQueue(this);\n  var send = function(data, final) {\n    try {\n      if (self.readyState != WebSocket.OPEN) throw new Error('not opened');\n      options.fin = final === true;\n      self._sender.send(data, options);\n      if (!final) process.nextTick(cb.bind(null, null, send));\n      else executeQueueSends(self);\n    }\n    catch (e) {\n      if (typeof cb == 'function') cb(e);\n      else {\n        delete self._queue;\n        self.emit('error', e);\n      }\n    }\n  }\n  process.nextTick(cb.bind(null, null, send));\n}\n\n/**\n * Immediately shuts down the connection\n *\n * @api public\n */\n\nWebSocket.prototype.terminate = function() {\n  if (this.readyState == WebSocket.CLOSED) return;\n  if (this._socket) {\n    try {\n      // End the connection\n      this._socket.end();\n    }\n    catch (e) {\n      // Socket error during end() call, so just destroy it right now\n      cleanupWebsocketResources.call(this, true);\n      return;\n    }\n\n    // Add a timeout to ensure that the connection is completely\n    // cleaned up within 30 seconds, even if the clean close procedure\n    // fails for whatever reason\n    this._closeTimer = setTimeout(cleanupWebsocketResources.bind(this, true), closeTimeout);\n  }\n  else if (this.readyState == WebSocket.CONNECTING) {\n    cleanupWebsocketResources.call(this, true);\n  }\n};\n\n/**\n * Expose bufferedAmount\n *\n * @api public\n */\n\nObject.defineProperty(WebSocket.prototype, 'bufferedAmount', {\n  get: function get() {\n    var amount = 0;\n    if (this._socket) {\n      amount = this._socket.bufferSize || 0;\n    }\n    return amount;\n  }\n});\n\n/**\n * Emulates the W3C Browser based WebSocket interface using function members.\n *\n * @see http://dev.w3.org/html5/websockets/#the-websocket-interface\n * @api public\n */\n\n['open', 'error', 'close', 'message'].forEach(function(method) {\n  Object.defineProperty(WebSocket.prototype, 'on' + method, {\n    /**\n     * Returns the current listener\n     *\n     * @returns {Mixed} the set function or undefined\n     * @api public\n     */\n\n    get: function get() {\n      var listener = this.listeners(method)[0];\n      return listener ? (listener._listener ? listener._listener : listener) : undefined;\n    },\n\n    /**\n     * Start listening for events\n     *\n     * @param {Function} listener the listener\n     * @returns {Mixed} the set function or undefined\n     * @api public\n     */\n\n    set: function set(listener) {\n      this.removeAllListeners(method);\n      this.addEventListener(method, listener);\n    }\n  });\n});\n\n/**\n * Emulates the W3C Browser based WebSocket interface using addEventListener.\n *\n * @see https://developer.mozilla.org/en/DOM/element.addEventListener\n * @see http://dev.w3.org/html5/websockets/#the-websocket-interface\n * @api public\n */\nWebSocket.prototype.addEventListener = function(method, listener) {\n  var target = this;\n  if (typeof listener === 'function') {\n    if (method === 'message') {\n      function onMessage (data, flags) {\n        listener.call(this, new MessageEvent(data, flags.binary ? 'Binary' : 'Text', target));\n      }\n      // store a reference so we can return the original function from the addEventListener hook\n      onMessage._listener = listener;\n      this.on(method, onMessage);\n    } else if (method === 'close') {\n      function onClose (code, message) {\n        listener.call(this, new CloseEvent(code, message, target));\n      }\n      // store a reference so we can return the original function from the addEventListener hook\n      onClose._listener = listener;\n      this.on(method, onClose);\n    } else if (method === 'error') {\n      function onError (event) {\n        event.target = target;\n        listener.call(this, event);\n      }\n      // store a reference so we can return the original function from the addEventListener hook\n      onError._listener = listener;\n      this.on(method, onError);\n    } else if (method === 'open') {\n      function onOpen () {\n        listener.call(this, new OpenEvent(target));\n      }\n      // store a reference so we can return the original function from the addEventListener hook\n      onOpen._listener = listener;\n      this.on(method, onOpen);\n    } else {\n      this.on(method, listener);\n    }\n  }\n}\n\nmodule.exports = WebSocket;\n\n/**\n * W3C MessageEvent\n *\n * @see http://www.w3.org/TR/html5/comms.html\n * @api private\n */\n\nfunction MessageEvent(dataArg, typeArg, target) {\n  this.data = dataArg;\n  this.type = typeArg;\n  this.target = target;\n}\n\n/**\n * W3C CloseEvent\n *\n * @see http://www.w3.org/TR/html5/comms.html\n * @api private\n */\n\nfunction CloseEvent(code, reason, target) {\n  this.wasClean = (typeof code == 'undefined' || code == 1000);\n  this.code = code;\n  this.reason = reason;\n  this.target = target;\n}\n\n/**\n * W3C OpenEvent\n *\n * @see http://www.w3.org/TR/html5/comms.html\n * @api private\n */\n\nfunction OpenEvent(target) {\n  this.target = target;\n}\n\n/**\n * Entirely private apis,\n * which may or may not be bound to a sepcific WebSocket instance.\n */\n\nfunction initAsServerClient(req, socket, upgradeHead, options) {\n  options = new Options({\n    protocolVersion: protocolVersion,\n    protocol: null\n  }).merge(options);\n\n  // expose state properties\n  this.protocol = options.value.protocol;\n  this.protocolVersion = options.value.protocolVersion;\n  this.supports.binary = (this.protocolVersion != 'hixie-76');\n  this.upgradeReq = req;\n  this.readyState = WebSocket.CONNECTING;\n  this._isServer = true;\n\n  // establish connection\n  if (options.value.protocolVersion == 'hixie-76') establishConnection.call(this, ReceiverHixie, SenderHixie, socket, upgradeHead);\n  else establishConnection.call(this, Receiver, Sender, socket, upgradeHead);\n}\n\nfunction initAsClient(address, protocols, options) {\n  options = new Options({\n    origin: null,\n    protocolVersion: protocolVersion,\n    host: null,\n    headers: null,\n    protocol: null,\n    agent: null,\n\n    // ssl-related options\n    pfx: null,\n    key: null,\n    passphrase: null,\n    cert: null,\n    ca: null,\n    ciphers: null,\n    rejectUnauthorized: null\n  }).merge(options);\n  if (options.value.protocolVersion != 8 && options.value.protocolVersion != 13) {\n    throw new Error('unsupported protocol version');\n  }\n\n  // verify url and establish http class\n  var serverUrl = url.parse(address);\n  var isUnixSocket = serverUrl.protocol === 'ws+unix:';\n  if (!serverUrl.host && !isUnixSocket) throw new Error('invalid url');\n  var isSecure = serverUrl.protocol === 'wss:' || serverUrl.protocol === 'https:';\n  var httpObj = isSecure ? https : http;\n  var port = serverUrl.port || (isSecure ? 443 : 80);\n  var auth = serverUrl.auth;\n\n  // expose state properties\n  this._isServer = false;\n  this.url = address;\n  this.protocolVersion = options.value.protocolVersion;\n  this.supports.binary = (this.protocolVersion != 'hixie-76');\n\n  // begin handshake\n  var key = new Buffer(options.value.protocolVersion + '-' + Date.now()).toString('base64');\n  var shasum = crypto.createHash('sha1');\n  shasum.update(key + '258EAFA5-E914-47DA-95CA-C5AB0DC85B11');\n  var expectedServerKey = shasum.digest('base64');\n\n  var agent = options.value.agent;\n  // node<=v0.4.x compatibility\n  if (!agent && isNodeV4) {\n    isNodeV4 = true;\n    agent = new httpObj.Agent({\n      host: serverUrl.hostname,\n      port: port\n    });\n  }\n\n  var headerHost = serverUrl.hostname;\n  // Append port number to Host and Origin header, only if specified in the url and non-default\n  if(serverUrl.port) {\n    if((isSecure && (port != 443)) || (!isSecure && (port != 80))){\n      headerHost = headerHost + ':' + port;\n    }\n  }\n\n  var requestOptions = {\n    port: port,\n    host: serverUrl.hostname,\n    headers: {\n      'Connection': 'Upgrade',\n      'Upgrade': 'websocket',\n      'Host': headerHost,\n      'Origin': headerHost,\n      'Sec-WebSocket-Version': options.value.protocolVersion,\n      'Sec-WebSocket-Key': key\n    }\n  };\n\n  // If we have basic auth.\n  if (auth) {\n    requestOptions.headers['Authorization'] = 'Basic ' + new Buffer(auth).toString('base64');\n  }\n\n  if (options.value.protocol) {\n    requestOptions.headers['Sec-WebSocket-Protocol'] = options.value.protocol;\n  }\n\n  if (options.value.host) {\n    requestOptions.headers['Host'] = options.value.host;\n  }\n\n  if (options.value.headers) {\n    for (var header in options.value.headers) {\n       if (options.value.headers.hasOwnProperty(header)) {\n        requestOptions.headers[header] = options.value.headers[header];\n       }\n    }\n  }\n\n  if (options.isDefinedAndNonNull('pfx')\n   || options.isDefinedAndNonNull('key')\n   || options.isDefinedAndNonNull('passphrase')\n   || options.isDefinedAndNonNull('cert')\n   || options.isDefinedAndNonNull('ca')\n   || options.isDefinedAndNonNull('ciphers')\n   || options.isDefinedAndNonNull('rejectUnauthorized')) {\n\n    if (isNodeV4) {\n      throw new Error('Client side certificates are not supported on Node 0.4.x');\n    }\n\n    if (options.isDefinedAndNonNull('pfx')) requestOptions.pfx = options.value.pfx;\n    if (options.isDefinedAndNonNull('key')) requestOptions.key = options.value.key;\n    if (options.isDefinedAndNonNull('passphrase')) requestOptions.passphrase = options.value.passphrase;\n    if (options.isDefinedAndNonNull('cert')) requestOptions.cert = options.value.cert;\n    if (options.isDefinedAndNonNull('ca')) requestOptions.ca = options.value.ca;\n    if (options.isDefinedAndNonNull('ciphers')) requestOptions.ciphers = options.value.ciphers;\n    if (options.isDefinedAndNonNull('rejectUnauthorized')) requestOptions.rejectUnauthorized = options.value.rejectUnauthorized;\n\n    if (!agent) {\n        // global agent ignores client side certificates\n        agent = new httpObj.Agent(requestOptions);\n    }\n  }\n\n  if (isNodeV4) {\n    requestOptions.path = (serverUrl.pathname || '/') + (serverUrl.search || '');\n  }\n  else requestOptions.path = serverUrl.path || '/';\n\n  if (agent) {\n    requestOptions.agent = agent;\n  }\n\n  if (isUnixSocket) {\n    requestOptions.socketPath = serverUrl.pathname;\n  }\n  if (options.value.origin) {\n    if (options.value.protocolVersion < 13) requestOptions.headers['Sec-WebSocket-Origin'] = options.value.origin;\n    else requestOptions.headers['Origin'] = options.value.origin;\n  }\n\n  var self = this;\n  var req = httpObj.request(requestOptions);\n\n  (isNodeV4 ? agent : req).on('error', function(error) {\n    self.emit('error', error);\n    cleanupWebsocketResources.call(this, error);\n  });\n  (isNodeV4 ? agent : req).once('response', function(res) {\n    var error = new Error('unexpected server response (' + res.statusCode + ')');\n    self.emit('error', error);\n    cleanupWebsocketResources.call(this, error);\n  });\n  (isNodeV4 ? agent : req).once('upgrade', function(res, socket, upgradeHead) {\n    if (self.readyState == WebSocket.CLOSED) {\n      // client closed before server accepted connection\n      self.emit('close');\n      removeAllListeners(self);\n      socket.end();\n      return;\n    }\n    var serverKey = res.headers['sec-websocket-accept'];\n    if (typeof serverKey == 'undefined' || serverKey !== expectedServerKey) {\n      self.emit('error', 'invalid server key');\n      removeAllListeners(self);\n      socket.end();\n      return;\n    }\n\n    var serverProt = res.headers['sec-websocket-protocol'];\n    var protList = (options.value.protocol || \"\").split(/, */);\n    var protError = null;\n    if (!options.value.protocol && serverProt) {\n        protError = 'server sent a subprotocol even though none requested';\n    } else if (options.value.protocol && !serverProt) {\n        protError = 'server sent no subprotocol even though requested';\n    } else if (serverProt && protList.indexOf(serverProt) === -1) {\n        protError = 'server responded with an invalid protocol';\n    }\n    if (protError) {\n        self.emit('error', protError);\n        removeAllListeners(self);\n        socket.end();\n        return;\n    } else if (serverProt) {\n        self.protocol = serverProt;\n    }\n\n    establishConnection.call(self, Receiver, Sender, socket, upgradeHead);\n\n    // perform cleanup on http resources\n    removeAllListeners(isNodeV4 ? agent : req);\n    req = null;\n    agent = null;\n  });\n\n  req.end();\n  this.readyState = WebSocket.CONNECTING;\n}\n\nfunction establishConnection(ReceiverClass, SenderClass, socket, upgradeHead) {\n  this._socket = socket;\n  socket.setTimeout(0);\n  socket.setNoDelay(true);\n  var self = this;\n  this._receiver = new ReceiverClass();\n\n  // socket cleanup handlers\n  socket.on('end', cleanupWebsocketResources.bind(this));\n  socket.on('close', cleanupWebsocketResources.bind(this));\n  socket.on('error', cleanupWebsocketResources.bind(this));\n\n  // ensure that the upgradeHead is added to the receiver\n  function firstHandler(data) {\n    if (self.readyState != WebSocket.OPEN) return;\n    if (upgradeHead && upgradeHead.length > 0) {\n      self.bytesReceived += upgradeHead.length;\n      var head = upgradeHead;\n      upgradeHead = null;\n      self._receiver.add(head);\n    }\n    dataHandler = realHandler;\n    if (data) {\n      self.bytesReceived += data.length;\n      self._receiver.add(data);\n    }\n  }\n  // subsequent packets are pushed straight to the receiver\n  function realHandler(data) {\n    if (data) self.bytesReceived += data.length;\n    self._receiver.add(data);\n  }\n  var dataHandler = firstHandler;\n  // if data was passed along with the http upgrade,\n  // this will schedule a push of that on to the receiver.\n  // this has to be done on next tick, since the caller\n  // hasn't had a chance to set event handlers on this client\n  // object yet.\n  process.nextTick(firstHandler);\n\n  // receiver event handlers\n  self._receiver.ontext = function (data, flags) {\n    flags = flags || {};\n    self.emit('message', data, flags);\n  };\n  self._receiver.onbinary = function (data, flags) {\n    flags = flags || {};\n    flags.binary = true;\n    self.emit('message', data, flags);\n  };\n  self._receiver.onping = function(data, flags) {\n    flags = flags || {};\n    self.pong(data, {mask: !self._isServer, binary: flags.binary === true}, true);\n    self.emit('ping', data, flags);\n  };\n  self._receiver.onpong = function(data, flags) {\n    self.emit('pong', data, flags);\n  };\n  self._receiver.onclose = function(code, data, flags) {\n    flags = flags || {};\n    self.close(code, data);\n  };\n  self._receiver.onerror = function(reason, errorCode) {\n    // close the connection when the receiver reports a HyBi error code\n    self.close(typeof errorCode != 'undefined' ? errorCode : 1002, '');\n    self.emit('error', reason, errorCode);\n  };\n\n  // finalize the client\n  this._sender = new SenderClass(socket);\n  this._sender.on('error', function(error) {\n    self.close(1002, '');\n    self.emit('error', error);\n  });\n  this.readyState = WebSocket.OPEN;\n  this.emit('open');\n\n  socket.on('data', dataHandler);\n}\n\nfunction startQueue(instance) {\n  instance._queue = instance._queue || [];\n}\n\nfunction executeQueueSends(instance) {\n  var queue = instance._queue;\n  if (typeof queue == 'undefined') return;\n  delete instance._queue;\n  for (var i = 0, l = queue.length; i < l; ++i) {\n    queue[i]();\n  }\n}\n\nfunction sendStream(instance, stream, options, cb) {\n  stream.on('data', function(data) {\n    if (instance.readyState != WebSocket.OPEN) {\n      if (typeof cb == 'function') cb(new Error('not opened'));\n      else {\n        delete instance._queue;\n        instance.emit('error', new Error('not opened'));\n      }\n      return;\n    }\n    options.fin = false;\n    instance._sender.send(data, options);\n  });\n  stream.on('end', function() {\n    if (instance.readyState != WebSocket.OPEN) {\n      if (typeof cb == 'function') cb(new Error('not opened'));\n      else {\n        delete instance._queue;\n        instance.emit('error', new Error('not opened'));\n      }\n      return;\n    }\n    options.fin = true;\n    instance._sender.send(null, options);\n    if (typeof cb == 'function') cb(null);\n  });\n}\n\nfunction cleanupWebsocketResources(error) {\n  if (this.readyState == WebSocket.CLOSED) return;\n  var emitClose = this.readyState != WebSocket.CONNECTING;\n  this.readyState = WebSocket.CLOSED;\n\n  clearTimeout(this._closeTimer);\n  this._closeTimer = null;\n  if (emitClose) this.emit('close', this._closeCode || 1000, this._closeMessage || '');\n\n  if (this._socket) {\n    removeAllListeners(this._socket);\n    // catch all socket error after removing all standard handlers\n    var socket = this._socket;\n    this._socket.on('error', function() {\n      try { socket.destroy(); } catch (e) {}\n    });\n    try {\n      if (!error) this._socket.end();\n      else this._socket.destroy();\n    }\n    catch (e) { /* Ignore termination errors */ }\n    this._socket = null;\n  }\n  if (this._sender) {\n    removeAllListeners(this._sender);\n    this._sender = null;\n  }\n  if (this._receiver) {\n    this._receiver.cleanup();\n    this._receiver = null;\n  }\n  removeAllListeners(this);\n  this.on('error', function() {}); // catch all errors after this\n  delete this._queue;\n}\n\nfunction removeAllListeners(instance) {\n  if (isNodeV4) {\n    // node v4 doesn't *actually* remove all listeners globally,\n    // so we do that instead\n    instance._events = {};\n  }\n  else instance.removeAllListeners();\n}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf-ws/ws/options/lib/options.js":"/*!\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar fs = require('fs');\n\nfunction Options(defaults) {\n  var internalValues = {};\n  var values = this.value = {};\n  Object.keys(defaults).forEach(function(key) {\n    internalValues[key] = defaults[key];\n    Object.defineProperty(values, key, {\n      get: function() { return internalValues[key]; },\n      configurable: false,\n      enumerable: true\n    });\n  });\n  this.reset = function() {\n    Object.keys(defaults).forEach(function(key) {\n      internalValues[key] = defaults[key];\n    });\n    return this;\n  };\n  this.merge = function(options, required) {\n    options = options || {};\n    if (Object.prototype.toString.call(required) === '[object Array]') {\n      var missing = [];\n      for (var i = 0, l = required.length; i < l; ++i) {\n        var key = required[i];\n        if (!(key in options)) {\n          missing.push(key);\n        }\n      }\n      if (missing.length > 0) {\n        if (missing.length > 1) {\n          throw new Error('options ' +\n            missing.slice(0, missing.length - 1).join(', ') + ' and ' +\n            missing[missing.length - 1] + ' must be defined');\n        }\n        else throw new Error('option ' + missing[0] + ' must be defined');\n      }\n    }\n    Object.keys(options).forEach(function(key) {\n      if (key in internalValues) {\n        internalValues[key] = options[key];\n      }\n    });\n    return this;\n  };\n  this.copy = function(keys) {\n    var obj = {};\n    Object.keys(defaults).forEach(function(key) {\n      if (keys.indexOf(key) !== -1) {\n        obj[key] = values[key];\n      }\n    });\n    return obj;\n  };\n  this.read = function(filename, cb) {\n    if (typeof cb == 'function') {\n      var self = this;\n      fs.readFile(filename, function(error, data) {\n        if (error) return cb(error);\n        var conf = JSON.parse(data);\n        self.merge(conf);\n        cb();\n      });\n    }\n    else {\n      var conf = JSON.parse(fs.readFileSync(filename));\n      this.merge(conf);\n    }\n    return this;\n  };\n  this.isDefined = function(key) {\n    return typeof values[key] != 'undefined';\n  };\n  this.isDefinedAndNonNull = function(key) {\n    return typeof values[key] != 'undefined' && values[key] !== null;\n  };\n  Object.freeze(values);\n  Object.freeze(this);\n}\n\nmodule.exports = Options;\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf-ws/ws/lib/Sender.js":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar events = require('events')\n  , util = require('util')\n  , EventEmitter = events.EventEmitter\n  , ErrorCodes = require('./ErrorCodes')\n  , bufferUtil = require('./BufferUtil').BufferUtil;\n\n/**\n * HyBi Sender implementation\n */\n\nfunction Sender(socket) {\n  this._socket = socket;\n  this.firstFragment = true;\n}\n\n/**\n * Inherits from EventEmitter.\n */\n\nutil.inherits(Sender, events.EventEmitter);\n\n/**\n * Sends a close instruction to the remote party.\n *\n * @api public\n */\n\nSender.prototype.close = function(code, data, mask) {\n  if (typeof code !== 'undefined') {\n    if (typeof code !== 'number' ||\n      !ErrorCodes.isValidErrorCode(code)) throw new Error('first argument must be a valid error code number');\n  }\n  code = code || 1000;\n  var dataBuffer = new Buffer(2 + (data ? Buffer.byteLength(data) : 0));\n  writeUInt16BE.call(dataBuffer, code, 0);\n  if (dataBuffer.length > 2) dataBuffer.write(data, 2);\n  this.frameAndSend(0x8, dataBuffer, true, mask);\n}\n\n/**\n * Sends a ping message to the remote party.\n *\n * @api public\n */\n\nSender.prototype.ping = function(data, options) {\n  var mask = options && options.mask;\n  this.frameAndSend(0x9, data || '', true, mask);\n}\n\n/**\n * Sends a pong message to the remote party.\n *\n * @api public\n */\n\nSender.prototype.pong = function(data, options) {\n  var mask = options && options.mask;\n  this.frameAndSend(0xa, data || '', true, mask);\n}\n\n/**\n * Sends text or binary data to the remote party.\n *\n * @api public\n */\n\nSender.prototype.send = function(data, options, cb) {\n  var finalFragment = options && options.fin === false ? false : true;\n  var mask = options && options.mask;\n  var opcode = options && options.binary ? 2 : 1;\n  if (this.firstFragment === false) opcode = 0;\n  else this.firstFragment = false;\n  if (finalFragment) this.firstFragment = true\n  this.frameAndSend(opcode, data, finalFragment, mask, cb);\n}\n\n/**\n * Frames and sends a piece of data according to the HyBi WebSocket protocol.\n *\n * @api private\n */\n\nSender.prototype.frameAndSend = function(opcode, data, finalFragment, maskData, cb) {\n  var canModifyData = false;\n\n  if (!data) {\n    try {\n      this._socket.write(new Buffer([opcode | (finalFragment ? 0x80 : 0), 0 | (maskData ? 0x80 : 0)].concat(maskData ? [0, 0, 0, 0] : [])), 'binary', cb);\n    }\n    catch (e) {\n      if (typeof cb == 'function') cb(e);\n      else this.emit('error', e);\n    }\n    return;\n  }\n\n  if (!Buffer.isBuffer(data)) {\n    canModifyData = true;\n    if (data && (typeof data.byteLength !== 'undefined' || typeof data.buffer !== 'undefined')) {\n      data = getArrayBuffer(data);\n    } else {\n      data = new Buffer(data);\n    }\n  }\n\n  var dataLength = data.length\n    , dataOffset = maskData ? 6 : 2\n    , secondByte = dataLength;\n\n  if (dataLength >= 65536) {\n    dataOffset += 8;\n    secondByte = 127;\n  }\n  else if (dataLength > 125) {\n    dataOffset += 2;\n    secondByte = 126;\n  }\n\n  var mergeBuffers = dataLength < 32768 || (maskData && !canModifyData);\n  var totalLength = mergeBuffers ? dataLength + dataOffset : dataOffset;\n  var outputBuffer = new Buffer(totalLength);\n  outputBuffer[0] = finalFragment ? opcode | 0x80 : opcode;\n\n  switch (secondByte) {\n    case 126:\n      writeUInt16BE.call(outputBuffer, dataLength, 2);\n      break;\n    case 127:\n      writeUInt32BE.call(outputBuffer, 0, 2);\n      writeUInt32BE.call(outputBuffer, dataLength, 6);\n  }\n\n  if (maskData) {\n    outputBuffer[1] = secondByte | 0x80;\n    var mask = this._randomMask || (this._randomMask = getRandomMask());\n    outputBuffer[dataOffset - 4] = mask[0];\n    outputBuffer[dataOffset - 3] = mask[1];\n    outputBuffer[dataOffset - 2] = mask[2];\n    outputBuffer[dataOffset - 1] = mask[3];\n    if (mergeBuffers) {\n      bufferUtil.mask(data, mask, outputBuffer, dataOffset, dataLength);\n      try {\n        this._socket.write(outputBuffer, 'binary', cb);\n      }\n      catch (e) {\n        if (typeof cb == 'function') cb(e);\n        else this.emit('error', e);\n      }\n    }\n    else {\n      bufferUtil.mask(data, mask, data, 0, dataLength);\n      try {\n        this._socket.write(outputBuffer, 'binary');\n        this._socket.write(data, 'binary', cb);\n      }\n      catch (e) {\n        if (typeof cb == 'function') cb(e);\n        else this.emit('error', e);\n      }\n    }\n  }\n  else {\n    outputBuffer[1] = secondByte;\n    if (mergeBuffers) {\n      data.copy(outputBuffer, dataOffset);\n      try {\n        this._socket.write(outputBuffer, 'binary', cb);\n      }\n      catch (e) {\n        if (typeof cb == 'function') cb(e);\n        else this.emit('error', e);\n      }\n    }\n    else {\n      try {\n        this._socket.write(outputBuffer, 'binary');\n        this._socket.write(data, 'binary', cb);\n      }\n      catch (e) {\n        if (typeof cb == 'function') cb(e);\n        else this.emit('error', e);\n      }\n    }\n  }\n}\n\nmodule.exports = Sender;\n\nfunction writeUInt16BE(value, offset) {\n  this[offset] = (value & 0xff00)>>8;\n  this[offset+1] = value & 0xff;\n}\n\nfunction writeUInt32BE(value, offset) {\n  this[offset] = (value & 0xff000000)>>24;\n  this[offset+1] = (value & 0xff0000)>>16;\n  this[offset+2] = (value & 0xff00)>>8;\n  this[offset+3] = value & 0xff;\n}\n\nfunction getArrayBuffer(data) {\n  // data is either an ArrayBuffer or ArrayBufferView.\n  var array = new Uint8Array(data.buffer || data)\n    , l = data.byteLength || data.length\n    , o = data.byteOffset || 0\n    , buffer = new Buffer(l);\n  for (var i = 0; i < l; ++i) {\n    buffer[i] = array[o+i];\n  }\n  return buffer;\n}\n\nfunction getRandomMask() {\n  return new Buffer([\n    ~~(Math.random() * 255),\n    ~~(Math.random() * 255),\n    ~~(Math.random() * 255),\n    ~~(Math.random() * 255)\n  ]);\n}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf-ws/ws/lib/ErrorCodes.js":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nmodule.exports = {\n  isValidErrorCode: function(code) {\n    return (code >= 1000 && code <= 1011 && code != 1004 && code != 1005 && code != 1006) ||\n         (code >= 3000 && code <= 4999);\n  },\n  1000: 'normal',\n  1001: 'going away',\n  1002: 'protocol error',\n  1003: 'unsupported data',\n  1004: 'reserved',\n  1005: 'reserved for extensions',\n  1006: 'reserved for extensions',\n  1007: 'inconsistent or invalid data',\n  1008: 'policy violation',\n  1009: 'message too big',\n  1010: 'extension handshake missing',\n  1011: 'an unexpected condition prevented the request from being fulfilled',\n};","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf-ws/ws/lib/BufferUtil.js":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\ntry {\n  module.exports = require('../build/Release/bufferutil');\n} catch (e) { try {\n  module.exports = require('../build/default/bufferutil');\n} catch (e) { try {\n  module.exports = require('./BufferUtil.fallback');\n} catch (e) {\n  console.error('bufferutil.node seems to not have been built. Run npm install.');\n  throw e;\n}}}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf-ws/ws/lib/BufferUtil.fallback.js":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nmodule.exports.BufferUtil = {\n  merge: function(mergedBuffer, buffers) {\n    var offset = 0;\n    for (var i = 0, l = buffers.length; i < l; ++i) {\n      var buf = buffers[i];\n      buf.copy(mergedBuffer, offset);\n      offset += buf.length;\n    }\n  },\n  mask: function(source, mask, output, offset, length) {\n    var maskNum = mask.readUInt32LE(0, true);\n    var i = 0;\n    for (; i < length - 3; i += 4) {\n      var num = maskNum ^ source.readUInt32LE(i, true);\n      if (num < 0) num = 4294967296 + num;\n      output.writeUInt32LE(num, offset + i, true);\n    }\n    switch (length % 4) {\n      case 3: output[offset + i + 2] = source[i + 2] ^ mask[2];\n      case 2: output[offset + i + 1] = source[i + 1] ^ mask[1];\n      case 1: output[offset + i] = source[i] ^ mask[0];\n      case 0:;\n    }\n  },\n  unmask: function(data, mask) {\n    var maskNum = mask.readUInt32LE(0, true);\n    var length = data.length;\n    var i = 0;\n    for (; i < length - 3; i += 4) {\n      var num = maskNum ^ data.readUInt32LE(i, true);\n      if (num < 0) num = 4294967296 + num;\n      data.writeUInt32LE(num, i, true);\n    }\n    switch (length % 4) {\n      case 3: data[i + 2] = data[i + 2] ^ mask[2];\n      case 2: data[i + 1] = data[i + 1] ^ mask[1];\n      case 1: data[i] = data[i] ^ mask[0];\n      case 0:;\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf-ws/ws/lib/Receiver.js":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar util = require('util')\n  , Validation = require('./Validation').Validation\n  , ErrorCodes = require('./ErrorCodes')\n  , BufferPool = require('./BufferPool')\n  , bufferUtil = require('./BufferUtil').BufferUtil;\n\n/**\n * Node version 0.4 and 0.6 compatibility\n */\n\nvar isNodeV4 = /^v0\\.4/.test(process.version);\n\n/**\n * HyBi Receiver implementation\n */\n\nfunction Receiver () {\n  // memory pool for fragmented messages\n  var fragmentedPoolPrevUsed = -1;\n  this.fragmentedBufferPool = new BufferPool(1024, function(db, length) {\n    return db.used + length;\n  }, function(db) {\n    return fragmentedPoolPrevUsed = fragmentedPoolPrevUsed >= 0 ?\n      (fragmentedPoolPrevUsed + db.used) / 2 :\n      db.used;\n  });\n\n  // memory pool for unfragmented messages\n  var unfragmentedPoolPrevUsed = -1;\n  this.unfragmentedBufferPool = new BufferPool(1024, function(db, length) {\n    return db.used + length;\n  }, function(db) {\n    return unfragmentedPoolPrevUsed = unfragmentedPoolPrevUsed >= 0 ?\n      (unfragmentedPoolPrevUsed + db.used) / 2 :\n      db.used;\n  });\n\n  this.state = {\n    activeFragmentedOperation: null,\n    lastFragment: false,\n    masked: false,\n    opcode: 0,\n    fragmentedOperation: false\n  };\n  this.overflow = [];\n  this.headerBuffer = new Buffer(10);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.currentMessage = [];\n  this.expectHeader(2, this.processPacket);\n  this.dead = false;\n\n  this.onerror = function() {};\n  this.ontext = function() {};\n  this.onbinary = function() {};\n  this.onclose = function() {};\n  this.onping = function() {};\n  this.onpong = function() {};\n};\n\nmodule.exports = Receiver;\n\n/**\n * Add new data to the parser.\n *\n * @api public\n */\n\nReceiver.prototype.add = function(data) {\n  var dataLength = data.length;\n  if (dataLength == 0) return;\n  if (this.expectBuffer == null) {\n    this.overflow.push(data);\n    return;\n  }\n  var toRead = Math.min(dataLength, this.expectBuffer.length - this.expectOffset);\n  fastCopy(toRead, data, this.expectBuffer, this.expectOffset);\n  this.expectOffset += toRead;\n  if (toRead < dataLength) {\n    this.overflow.push(data.slice(toRead));\n  }\n  while (this.expectBuffer && this.expectOffset == this.expectBuffer.length) {\n    var bufferForHandler = this.expectBuffer;\n    this.expectBuffer = null;\n    this.expectOffset = 0;\n    this.expectHandler.call(this, bufferForHandler);\n  }\n}\n\n/**\n * Releases all resources used by the receiver.\n *\n * @api public\n */\n\nReceiver.prototype.cleanup = function() {\n  this.dead = true;\n  this.overflow = null;\n  this.headerBuffer = null;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.unfragmentedBufferPool = null;\n  this.fragmentedBufferPool = null;\n  this.state = null;\n  this.currentMessage = null;\n  this.onerror = null;\n  this.ontext = null;\n  this.onbinary = null;\n  this.onclose = null;\n  this.onping = null;\n  this.onpong = null;\n}\n\n/**\n * Waits for a certain amount of header bytes to be available, then fires a callback.\n *\n * @api private\n */\n\nReceiver.prototype.expectHeader = function(length, handler) {\n  if (length == 0) {\n    handler(null);\n    return;\n  }\n  this.expectBuffer = this.headerBuffer.slice(this.expectOffset, this.expectOffset + length);\n  this.expectHandler = handler;\n  var toRead = length;\n  while (toRead > 0 && this.overflow.length > 0) {\n    var fromOverflow = this.overflow.pop();\n    if (toRead < fromOverflow.length) this.overflow.push(fromOverflow.slice(toRead));\n    var read = Math.min(fromOverflow.length, toRead);\n    fastCopy(read, fromOverflow, this.expectBuffer, this.expectOffset);\n    this.expectOffset += read;\n    toRead -= read;\n  }\n}\n\n/**\n * Waits for a certain amount of data bytes to be available, then fires a callback.\n *\n * @api private\n */\n\nReceiver.prototype.expectData = function(length, handler) {\n  if (length == 0) {\n    handler(null);\n    return;\n  }\n  this.expectBuffer = this.allocateFromPool(length, this.state.fragmentedOperation);\n  this.expectHandler = handler;\n  var toRead = length;\n  while (toRead > 0 && this.overflow.length > 0) {\n    var fromOverflow = this.overflow.pop();\n    if (toRead < fromOverflow.length) this.overflow.push(fromOverflow.slice(toRead));\n    var read = Math.min(fromOverflow.length, toRead);\n    fastCopy(read, fromOverflow, this.expectBuffer, this.expectOffset);\n    this.expectOffset += read;\n    toRead -= read;\n  }\n}\n\n/**\n * Allocates memory from the buffer pool.\n *\n * @api private\n */\n\nReceiver.prototype.allocateFromPool = !isNodeV4\n  ? function(length, isFragmented) { return (isFragmented ? this.fragmentedBufferPool : this.unfragmentedBufferPool).get(length); }\n  : function(length) { return new Buffer(length); };\n\n/**\n * Start processing a new packet.\n *\n * @api private\n */\n\nReceiver.prototype.processPacket = function (data) {\n  if ((data[0] & 0x70) != 0) {\n    this.error('reserved fields must be empty', 1002);\n    return;\n  }\n  this.state.lastFragment = (data[0] & 0x80) == 0x80;\n  this.state.masked = (data[1] & 0x80) == 0x80;\n  var opcode = data[0] & 0xf;\n  if (opcode === 0) {\n    // continuation frame\n    this.state.fragmentedOperation = true;\n    this.state.opcode = this.state.activeFragmentedOperation;\n    if (!(this.state.opcode == 1 || this.state.opcode == 2)) {\n      this.error('continuation frame cannot follow current opcode', 1002);\n      return;\n    }\n  }\n  else {\n    if (opcode < 3 && this.state.activeFragmentedOperation != null) {\n      this.error('data frames after the initial data frame must have opcode 0', 1002);\n      return;\n    }\n    this.state.opcode = opcode;\n    if (this.state.lastFragment === false) {\n      this.state.fragmentedOperation = true;\n      this.state.activeFragmentedOperation = opcode;\n    }\n    else this.state.fragmentedOperation = false;\n  }\n  var handler = opcodes[this.state.opcode];\n  if (typeof handler == 'undefined') this.error('no handler for opcode ' + this.state.opcode, 1002);\n  else {\n    handler.start.call(this, data);\n  }\n}\n\n/**\n * Endprocessing a packet.\n *\n * @api private\n */\n\nReceiver.prototype.endPacket = function() {\n  if (!this.state.fragmentedOperation) this.unfragmentedBufferPool.reset(true);\n  else if (this.state.lastFragment) this.fragmentedBufferPool.reset(false);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  if (this.state.lastFragment && this.state.opcode === this.state.activeFragmentedOperation) {\n    // end current fragmented operation\n    this.state.activeFragmentedOperation = null;\n  }\n  this.state.lastFragment = false;\n  this.state.opcode = this.state.activeFragmentedOperation != null ? this.state.activeFragmentedOperation : 0;\n  this.state.masked = false;\n  this.expectHeader(2, this.processPacket);\n}\n\n/**\n * Reset the parser state.\n *\n * @api private\n */\n\nReceiver.prototype.reset = function() {\n  if (this.dead) return;\n  this.state = {\n    activeFragmentedOperation: null,\n    lastFragment: false,\n    masked: false,\n    opcode: 0,\n    fragmentedOperation: false\n  };\n  this.fragmentedBufferPool.reset(true);\n  this.unfragmentedBufferPool.reset(true);\n  this.expectOffset = 0;\n  this.expectBuffer = null;\n  this.expectHandler = null;\n  this.overflow = [];\n  this.currentMessage = [];\n}\n\n/**\n * Unmask received data.\n *\n * @api private\n */\n\nReceiver.prototype.unmask = function (mask, buf, binary) {\n  if (mask != null && buf != null) bufferUtil.unmask(buf, mask);\n  if (binary) return buf;\n  return buf != null ? buf.toString('utf8') : '';\n}\n\n/**\n * Concatenates a list of buffers.\n *\n * @api private\n */\n\nReceiver.prototype.concatBuffers = function(buffers) {\n  var length = 0;\n  for (var i = 0, l = buffers.length; i < l; ++i) length += buffers[i].length;\n  var mergedBuffer = new Buffer(length);\n  bufferUtil.merge(mergedBuffer, buffers);\n  return mergedBuffer;\n}\n\n/**\n * Handles an error\n *\n * @api private\n */\n\nReceiver.prototype.error = function (reason, protocolErrorCode) {\n  this.reset();\n  this.onerror(reason, protocolErrorCode);\n  return this;\n}\n\n/**\n * Buffer utilities\n */\n\nfunction readUInt16BE(start) {\n  return (this[start]<<8) +\n         this[start+1];\n}\n\nfunction readUInt32BE(start) {\n  return (this[start]<<24) +\n         (this[start+1]<<16) +\n         (this[start+2]<<8) +\n         this[start+3];\n}\n\nfunction fastCopy(length, srcBuffer, dstBuffer, dstOffset) {\n  switch (length) {\n    default: srcBuffer.copy(dstBuffer, dstOffset, 0, length); break;\n    case 16: dstBuffer[dstOffset+15] = srcBuffer[15];\n    case 15: dstBuffer[dstOffset+14] = srcBuffer[14];\n    case 14: dstBuffer[dstOffset+13] = srcBuffer[13];\n    case 13: dstBuffer[dstOffset+12] = srcBuffer[12];\n    case 12: dstBuffer[dstOffset+11] = srcBuffer[11];\n    case 11: dstBuffer[dstOffset+10] = srcBuffer[10];\n    case 10: dstBuffer[dstOffset+9] = srcBuffer[9];\n    case 9: dstBuffer[dstOffset+8] = srcBuffer[8];\n    case 8: dstBuffer[dstOffset+7] = srcBuffer[7];\n    case 7: dstBuffer[dstOffset+6] = srcBuffer[6];\n    case 6: dstBuffer[dstOffset+5] = srcBuffer[5];\n    case 5: dstBuffer[dstOffset+4] = srcBuffer[4];\n    case 4: dstBuffer[dstOffset+3] = srcBuffer[3];\n    case 3: dstBuffer[dstOffset+2] = srcBuffer[2];\n    case 2: dstBuffer[dstOffset+1] = srcBuffer[1];\n    case 1: dstBuffer[dstOffset] = srcBuffer[0];\n  }\n}\n\n/**\n * Opcode handlers\n */\n\nvar opcodes = {\n  // text\n  '1': {\n    start: function(data) {\n      var self = this;\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['1'].getData.call(self, firstLength);\n      }\n      else if (firstLength == 126) {\n        self.expectHeader(2, function(data) {\n          opcodes['1'].getData.call(self, readUInt16BE.call(data, 0));\n        });\n      }\n      else if (firstLength == 127) {\n        self.expectHeader(8, function(data) {\n          if (readUInt32BE.call(data, 0) != 0) {\n            self.error('packets with length spanning more than 32 bit is currently not supported', 1008);\n            return;\n          }\n          opcodes['1'].getData.call(self, readUInt32BE.call(data, 4));\n        });\n      }\n    },\n    getData: function(length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function(data) {\n          var mask = data;\n          self.expectData(length, function(data) {\n            opcodes['1'].finish.call(self, mask, data);\n          });\n        });\n      }\n      else {\n        self.expectData(length, function(data) {\n          opcodes['1'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function(mask, data) {\n      var packet = this.unmask(mask, data, true);\n      if (packet != null) this.currentMessage.push(packet);\n      if (this.state.lastFragment) {\n        var messageBuffer = this.concatBuffers(this.currentMessage);\n        if (!Validation.isValidUTF8(messageBuffer)) {\n          this.error('invalid utf8 sequence', 1007);\n          return;\n        }\n        this.ontext(messageBuffer.toString('utf8'), {masked: this.state.masked, buffer: messageBuffer});\n        this.currentMessage = [];\n      }\n      this.endPacket();\n    }\n  },\n  // binary\n  '2': {\n    start: function(data) {\n      var self = this;\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['2'].getData.call(self, firstLength);\n      }\n      else if (firstLength == 126) {\n        self.expectHeader(2, function(data) {\n          opcodes['2'].getData.call(self, readUInt16BE.call(data, 0));\n        });\n      }\n      else if (firstLength == 127) {\n        self.expectHeader(8, function(data) {\n          if (readUInt32BE.call(data, 0) != 0) {\n            self.error('packets with length spanning more than 32 bit is currently not supported', 1008);\n            return;\n          }\n          opcodes['2'].getData.call(self, readUInt32BE.call(data, 4, true));\n        });\n      }\n    },\n    getData: function(length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function(data) {\n          var mask = data;\n          self.expectData(length, function(data) {\n            opcodes['2'].finish.call(self, mask, data);\n          });\n        });\n      }\n      else {\n        self.expectData(length, function(data) {\n          opcodes['2'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function(mask, data) {\n      var packet = this.unmask(mask, data, true);\n      if (packet != null) this.currentMessage.push(packet);\n      if (this.state.lastFragment) {\n        var messageBuffer = this.concatBuffers(this.currentMessage);\n        this.onbinary(messageBuffer, {masked: this.state.masked, buffer: messageBuffer});\n        this.currentMessage = [];\n      }\n      this.endPacket();\n    }\n  },\n  // close\n  '8': {\n    start: function(data) {\n      var self = this;\n      if (self.state.lastFragment == false) {\n        self.error('fragmented close is not supported', 1002);\n        return;\n      }\n\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['8'].getData.call(self, firstLength);\n      }\n      else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function(length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function(data) {\n          var mask = data;\n          self.expectData(length, function(data) {\n            opcodes['8'].finish.call(self, mask, data);\n          });\n        });\n      }\n      else {\n        self.expectData(length, function(data) {\n          opcodes['8'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function(mask, data) {\n      var self = this;\n      data = self.unmask(mask, data, true);\n      if (data && data.length == 1) {\n        self.error('close packets with data must be at least two bytes long', 1002);\n        return;\n      }\n      var code = data && data.length > 1 ? readUInt16BE.call(data, 0) : 1000;\n      if (!ErrorCodes.isValidErrorCode(code)) {\n        self.error('invalid error code', 1002);\n        return;\n      }\n      var message = '';\n      if (data && data.length > 2) {\n        var messageBuffer = data.slice(2);\n        if (!Validation.isValidUTF8(messageBuffer)) {\n          self.error('invalid utf8 sequence', 1007);\n          return;\n        }\n        message = messageBuffer.toString('utf8');\n      }\n      this.onclose(code, message, {masked: self.state.masked});\n      this.reset();\n    },\n  },\n  // ping\n  '9': {\n    start: function(data) {\n      var self = this;\n      if (self.state.lastFragment == false) {\n        self.error('fragmented ping is not supported', 1002);\n        return;\n      }\n\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['9'].getData.call(self, firstLength);\n      }\n      else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function(length) {\n      var self = this;\n      if (self.state.masked) {\n        self.expectHeader(4, function(data) {\n          var mask = data;\n          self.expectData(length, function(data) {\n            opcodes['9'].finish.call(self, mask, data);\n          });\n        });\n      }\n      else {\n        self.expectData(length, function(data) {\n          opcodes['9'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function(mask, data) {\n      this.onping(this.unmask(mask, data, true), {masked: this.state.masked, binary: true});\n      this.endPacket();\n    }\n  },\n  // pong\n  '10': {\n    start: function(data) {\n      var self = this;\n      if (self.state.lastFragment == false) {\n        self.error('fragmented pong is not supported', 1002);\n        return;\n      }\n\n      // decode length\n      var firstLength = data[1] & 0x7f;\n      if (firstLength < 126) {\n        opcodes['10'].getData.call(self, firstLength);\n      }\n      else {\n        self.error('control frames cannot have more than 125 bytes of data', 1002);\n      }\n    },\n    getData: function(length) {\n      var self = this;\n      if (this.state.masked) {\n        this.expectHeader(4, function(data) {\n          var mask = data;\n          self.expectData(length, function(data) {\n            opcodes['10'].finish.call(self, mask, data);\n          });\n        });\n      }\n      else {\n        this.expectData(length, function(data) {\n          opcodes['10'].finish.call(self, null, data);\n        });\n      }\n    },\n    finish: function(mask, data) {\n      this.onpong(this.unmask(mask, data, true), {masked: this.state.masked, binary: true});\n      this.endPacket();\n    }\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf-ws/ws/lib/Validation.js":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\ntry {\n  module.exports = require('../build/Release/validation');\n} catch (e) { try {\n  module.exports = require('../build/default/validation');\n} catch (e) { try {\n  module.exports = require('./Validation.fallback');\n} catch (e) {\n  console.error('validation.node seems to not have been built. Run npm install.');\n  throw e;\n}}}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf-ws/ws/lib/Validation.fallback.js":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n \nmodule.exports.Validation = {\n  isValidUTF8: function(buffer) {\n    return true;\n  }\n};\n\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf-ws/ws/lib/BufferPool.js":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar util = require('util');\n\nfunction BufferPool(initialSize, growStrategy, shrinkStrategy) {\n  if (typeof initialSize === 'function') {\n    shrinkStrategy = growStrategy;\n    growStrategy = initialSize;\n    initialSize = 0;\n  }\n  else if (typeof initialSize === 'undefined') {\n    initialSize = 0;\n  }\n  this._growStrategy = (growStrategy || function(db, size) {\n    return db.used + size;\n  }).bind(null, this);\n  this._shrinkStrategy = (shrinkStrategy || function(db) {\n    return initialSize;\n  }).bind(null, this);\n  this._buffer = initialSize ? new Buffer(initialSize) : null;\n  this._offset = 0;\n  this._used = 0;\n  this._changeFactor = 0;\n  this.__defineGetter__('size', function(){\n    return this._buffer == null ? 0 : this._buffer.length;\n  });\n  this.__defineGetter__('used', function(){\n    return this._used;\n  });\n}\n\nBufferPool.prototype.get = function(length) {\n  if (this._buffer == null || this._offset + length > this._buffer.length) {\n    var newBuf = new Buffer(this._growStrategy(length));\n    this._buffer = newBuf;\n    this._offset = 0;\n  }\n  this._used += length;\n  var buf = this._buffer.slice(this._offset, this._offset + length);\n  this._offset += length;\n  return buf;\n}\n\nBufferPool.prototype.reset = function(forceNewBuffer) {\n  var len = this._shrinkStrategy();\n  if (len < this.size) this._changeFactor -= 1;\n  if (forceNewBuffer || this._changeFactor < -2) {\n    this._changeFactor = 0;\n    this._buffer = len ? new Buffer(len) : null;\n  }\n  this._offset = 0;\n  this._used = 0;\n}\n\nmodule.exports = BufferPool;\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf-ws/ws/lib/Sender.hixie.js":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar events = require('events')\n  , util = require('util')\n  , EventEmitter = events.EventEmitter;\n\n/**\n * Hixie Sender implementation\n */\n\nfunction Sender(socket) {\n  this.socket = socket;\n  this.continuationFrame = false;\n  this.isClosed = false;\n}\n\nmodule.exports = Sender;\n\n/**\n * Inherits from EventEmitter.\n */\n\nutil.inherits(Sender, events.EventEmitter);\n\n/**\n * Frames and writes data.\n *\n * @api public\n */\n\nSender.prototype.send = function(data, options, cb) {\n  if (this.isClosed) return;\n/*\n  if (options && options.binary) {\n    this.error('hixie websockets do not support binary');\n    return;\n  }\n*/\n  var isString = typeof data == 'string'\n    , length = isString ? Buffer.byteLength(data) : data.length\n    , lengthbytes = (length > 127) ? 2 : 1 // assume less than 2**14 bytes\n    , writeStartMarker = this.continuationFrame == false\n    , writeEndMarker = !options || !(typeof options.fin != 'undefined' && !options.fin)\n    , buffer = new Buffer((writeStartMarker ? ((options && options.binary) ? (1 + lengthbytes) : 1) : 0) + length + ((writeEndMarker && !(options && options.binary)) ? 1 : 0))\n    , offset = writeStartMarker ? 1 : 0;\n\n  if (writeStartMarker) {\n    if (options && options.binary) {\n      buffer.write('\\x80', 'binary');\n      // assume length less than 2**14 bytes\n      if (lengthbytes > 1) \n        buffer.write(String.fromCharCode(128+length/128), offset++, 'binary');\n      buffer.write(String.fromCharCode(length&0x7f), offset++, 'binary');\n    } else\n      buffer.write('\\x00', 'binary');\n  }\n\n  if (isString) buffer.write(data, offset, 'utf8');\n  else data.copy(buffer, offset, 0);\n\n  if (writeEndMarker) {\n    if (options && options.binary) {\n      // sending binary, not writing end marker\n    } else \n      buffer.write('\\xff', offset + length, 'binary');\n    this.continuationFrame = false;\n  }\n  else this.continuationFrame = true;\n\n  try {\n    this.socket.write(buffer, 'binary', cb);\n  } catch (e) {\n    this.error(e.toString());\n  }\n}\n\n/**\n * Sends a close instruction to the remote party.\n *\n * @api public\n */\n\nSender.prototype.close = function(code, data, mask, cb) {\n  if (this.isClosed) return;\n  this.isClosed = true;\n  try {\n    if (this.continuationFrame) this.socket.write(new Buffer([0xff], 'binary'));\n    this.socket.write(new Buffer([0xff, 0x00]), 'binary', cb);\n  } catch (e) {\n    this.error(e.toString());\n  }\n}\n\n/**\n * Sends a ping message to the remote party. Not available for hixie.\n *\n * @api public\n */\n\nSender.prototype.ping = function(data, options) {}\n\n/**\n * Sends a pong message to the remote party. Not available for hixie.\n *\n * @api public\n */\n\nSender.prototype.pong = function(data, options) {}\n\n/**\n * Handles an error\n *\n * @api private\n */\n\nSender.prototype.error = function (reason) {\n  this.emit('error', reason);\n  return this;\n}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf-ws/ws/lib/Receiver.hixie.js":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar util = require('util');\n\n/**\n * State constants\n */\n\nvar EMPTY = 0\n  , BODY = 1;\nvar BINARYLENGTH = 2\n  , BINARYBODY = 3;\n\n/**\n * Hixie Receiver implementation\n */\n\nfunction Receiver () {\n  this.state = EMPTY;\n  this.buffers = [];\n  this.messageEnd = -1;\n  this.spanLength = 0;\n  this.dead = false;\n\n  this.onerror = function() {};\n  this.ontext = function() {};\n  this.onbinary = function() {};\n  this.onclose = function() {};\n  this.onping = function() {};\n  this.onpong = function() {};\n}\n\nmodule.exports = Receiver;\n\n/**\n * Add new data to the parser.\n *\n * @api public\n */\n\nReceiver.prototype.add = function(data) {\n  var self = this;\n  function doAdd() {\n    if (self.state === EMPTY) {\n      if (data.length == 2 && data[0] == 0xFF && data[1] == 0x00) {\n        self.reset();\n        self.onclose();\n        return;\n      }\n      if (data[0] === 0x80) {\n        self.messageEnd = 0;\n\tself.state = BINARYLENGTH;\n        data = data.slice(1);\n      } else {\n\n      if (data[0] !== 0x00) {\n        self.error('payload must start with 0x00 byte', true);\n        return;\n      }\n      data = data.slice(1);\n      self.state = BODY;\n\n      }\n    }\n    if (self.state === BINARYLENGTH) {\n      var i = 0;\n      while ((i < data.length) && (data[i] & 0x80)) {\n        self.messageEnd = 128 * self.messageEnd + (data[i] & 0x7f);\n        ++i;\n      }\n      if (i < data.length) {\n        self.messageEnd = 128 * self.messageEnd + (data[i] & 0x7f);\n        self.state = BINARYBODY;\n        ++i;\n      }\n      if (i > 0)\n        data = data.slice(i);\n    }\n    if (self.state === BINARYBODY) {\n      var dataleft = self.messageEnd - self.spanLength;\n      if (data.length >= dataleft) {\n\t// consume the whole buffer to finish the frame\n        self.buffers.push(data);\n        self.spanLength += dataleft;\n        self.messageEnd = dataleft;\n        return self.parse();\n      }\n      // frame's not done even if we consume it all\n      self.buffers.push(data);\n      self.spanLength += data.length;\n      return;\n    }\n    self.buffers.push(data);\n    if ((self.messageEnd = bufferIndex(data, 0xFF)) != -1) {\n      self.spanLength += self.messageEnd;\n      return self.parse();\n    }\n    else self.spanLength += data.length;\n  }\n  while(data) data = doAdd();\n}\n\n/**\n * Releases all resources used by the receiver.\n *\n * @api public\n */\n\nReceiver.prototype.cleanup = function() {\n  this.dead = true;\n  this.state = EMPTY;\n  this.buffers = [];\n}\n\n/**\n * Process buffered data.\n *\n * @api public\n */\n\nReceiver.prototype.parse = function() {\n  var output = new Buffer(this.spanLength);\n  var outputIndex = 0;\n  for (var bi = 0, bl = this.buffers.length; bi < bl - 1; ++bi) {\n    var buffer = this.buffers[bi];\n    buffer.copy(output, outputIndex);\n    outputIndex += buffer.length;\n  }\n  var lastBuffer = this.buffers[this.buffers.length - 1];\n  if (this.messageEnd > 0) lastBuffer.copy(output, outputIndex, 0, this.messageEnd);\n  if (this.state !== BODY) --this.messageEnd;\n  var tail = null;\n  if (this.messageEnd < lastBuffer.length - 1) {\n    tail = lastBuffer.slice(this.messageEnd + 1);\n  }\n  this.reset();\n  this.ontext(output.toString('utf8'));\n  return tail;\n}\n\n/**\n * Handles an error\n *\n * @api private\n */\n\nReceiver.prototype.error = function (reason, terminate) {\n  this.reset();\n  this.onerror(reason, terminate);\n  return this;\n}\n\n/**\n * Reset parser state\n *\n * @api private\n */\n\nReceiver.prototype.reset = function (reason) {\n  if (this.dead) return;\n  this.state = EMPTY;\n  this.buffers = [];\n  this.messageEnd = -1;\n  this.spanLength = 0;\n}\n\n/**\n * Internal api\n */\n\nfunction bufferIndex(buffer, byte) {\n  for (var i = 0, l = buffer.length; i < l; ++i) {\n    if (buffer[i] === byte) return i;\n  }\n  return -1;\n}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf-ws/ws/lib/WebSocketServer.js":"/*!\n * ws: a node.js websocket client\n * Copyright(c) 2011 Einar Otto Stangvik <einaros@gmail.com>\n * MIT Licensed\n */\n\nvar util = require('util')\n  , events = require('events')\n  , http = require('http')\n  , crypto = require('crypto')\n  , url = require('url')\n  , Options = require('../options')\n  , WebSocket = require('./WebSocket')\n  , tls = require('tls')\n  , url = require('url');\n\n/**\n * WebSocket Server implementation\n */\n\nfunction WebSocketServer(options, callback) {\n  options = new Options({\n    host: '0.0.0.0',\n    port: null,\n    server: null,\n    verifyClient: null,\n    handleProtocols: null,\n    path: null,\n    noServer: false,\n    disableHixie: false,\n    clientTracking: true\n  }).merge(options);\n\n  if (!options.isDefinedAndNonNull('port') && !options.isDefinedAndNonNull('server') && !options.value.noServer) {\n    throw new TypeError('`port` or a `server` must be provided');\n  }\n\n  var self = this;\n\n  if (options.isDefinedAndNonNull('port')) {\n    this._server = http.createServer(function (req, res) {\n      res.writeHead(200, {'Content-Type': 'text/plain'});\n      res.end('Not implemented');\n    });\n    this._server.listen(options.value.port, options.value.host, callback);\n    this._closeServer = function() { self._server.close(); };\n  }\n  else if (options.value.server) {\n    this._server = options.value.server;\n    if (options.value.path) {\n      // take note of the path, to avoid collisions when multiple websocket servers are\n      // listening on the same http server\n      if (this._server._webSocketPaths && options.value.server._webSocketPaths[options.value.path]) {\n        throw new Error('two instances of WebSocketServer cannot listen on the same http server path');\n      }\n      if (typeof this._server._webSocketPaths !== 'object') {\n        this._server._webSocketPaths = {};\n      }\n      this._server._webSocketPaths[options.value.path] = 1;\n    }\n  }\n  if (this._server) this._server.once('listening', function() { self.emit('listening'); });\n\n  if (typeof this._server != 'undefined') {\n    this._server.on('error', function(error) {\n      self.emit('error', error)\n    });\n    this._server.on('upgrade', function(req, socket, upgradeHead) {\n      //copy upgradeHead to avoid retention of large slab buffers used in node core\n      var head = new Buffer(upgradeHead.length);\n      upgradeHead.copy(head);\n\n      self.handleUpgrade(req, socket, head, function(client) {\n        self.emit('connection'+req.url, client);\n        self.emit('connection', client);\n      });\n    });\n  }\n\n  this.options = options.value;\n  this.path = options.value.path;\n  this.clients = [];\n}\n\n/**\n * Inherits from EventEmitter.\n */\n\nutil.inherits(WebSocketServer, events.EventEmitter);\n\n/**\n * Immediately shuts down the connection.\n *\n * @api public\n */\n\nWebSocketServer.prototype.close = function() {\n  // terminate all associated clients\n  var error = null;\n  try {\n    for (var i = 0, l = this.clients.length; i < l; ++i) {\n      this.clients[i].terminate();\n    }\n  }\n  catch (e) {\n    error = e;\n  }\n\n  // remove path descriptor, if any\n  if (this.path && this._server._webSocketPaths) {\n    delete this._server._webSocketPaths[this.path];\n    if (Object.keys(this._server._webSocketPaths).length == 0) {\n      delete this._server._webSocketPaths;\n    }\n  }\n\n  // close the http server if it was internally created\n  try {\n    if (typeof this._closeServer !== 'undefined') {\n      this._closeServer();\n    }\n  }\n  finally {\n    delete this._server;\n  }\n  if (error) throw error;\n}\n\n/**\n * Handle a HTTP Upgrade request.\n *\n * @api public\n */\n\nWebSocketServer.prototype.handleUpgrade = function(req, socket, upgradeHead, cb) {\n  // check for wrong path\n  if (this.options.path) {\n    var u = url.parse(req.url);\n    if (u && u.pathname !== this.options.path) return;\n  }\n\n  if (typeof req.headers.upgrade === 'undefined' || req.headers.upgrade.toLowerCase() !== 'websocket') {\n    abortConnection(socket, 400, 'Bad Request');\n    return;\n  }\n\n  if (req.headers['sec-websocket-key1']) handleHixieUpgrade.apply(this, arguments);\n  else handleHybiUpgrade.apply(this, arguments);\n}\n\nmodule.exports = WebSocketServer;\n\n/**\n * Entirely private apis,\n * which may or may not be bound to a sepcific WebSocket instance.\n */\n\nfunction handleHybiUpgrade(req, socket, upgradeHead, cb) {\n  // handle premature socket errors\n  var errorHandler = function() {\n    try { socket.destroy(); } catch (e) {}\n  }\n  socket.on('error', errorHandler);\n\n  // verify key presence\n  if (!req.headers['sec-websocket-key']) {\n    abortConnection(socket, 400, 'Bad Request');\n    return;\n  }\n\n  // verify version\n  var version = parseInt(req.headers['sec-websocket-version']);\n  if ([8, 13].indexOf(version) === -1) {\n    abortConnection(socket, 400, 'Bad Request');\n    return;\n  }\n\n  // verify protocol\n  var protocols = req.headers['sec-websocket-protocol'];\n\n  // verify client\n  var origin = version < 13 ?\n    req.headers['sec-websocket-origin'] :\n    req.headers['origin'];\n\n  // handler to call when the connection sequence completes\n  var self = this;\n  var completeHybiUpgrade2 = function(protocol) {\n\n    // calc key\n    var key = req.headers['sec-websocket-key'];\n    var shasum = crypto.createHash('sha1');\n    shasum.update(key + \"258EAFA5-E914-47DA-95CA-C5AB0DC85B11\");\n    key = shasum.digest('base64');\n\n    var headers = [\n        'HTTP/1.1 101 Switching Protocols'\n      , 'Upgrade: websocket'\n      , 'Connection: Upgrade'\n      , 'Sec-WebSocket-Accept: ' + key\n    ];\n\n    if (typeof protocol != 'undefined') {\n      headers.push('Sec-WebSocket-Protocol: ' + protocol);\n    }\n\n    // allows external modification/inspection of handshake headers\n    self.emit('headers', headers);\n\n    socket.setTimeout(0);\n    socket.setNoDelay(true);\n    try {\n      socket.write(headers.concat('', '').join('\\r\\n'));\n    }\n    catch (e) {\n      // if the upgrade write fails, shut the connection down hard\n      try { socket.destroy(); } catch (e) {}\n      return;\n    }\n\n    var client = new WebSocket([req, socket, upgradeHead], {\n      protocolVersion: version,\n      protocol: protocol\n    });\n\n    if (self.options.clientTracking) {\n      self.clients.push(client);\n      client.on('close', function() {\n        var index = self.clients.indexOf(client);\n        if (index != -1) {\n          self.clients.splice(index, 1);\n        }\n      });\n    }\n\n    // signal upgrade complete\n    socket.removeListener('error', errorHandler);\n    cb(client);\n  }\n\n  // optionally call external protocol selection handler before\n  // calling completeHybiUpgrade2\n  var completeHybiUpgrade1 = function() {\n    // choose from the sub-protocols\n    if (typeof self.options.handleProtocols == 'function') {\n        var protList = (protocols || \"\").split(/, */);\n        var callbackCalled = false;\n        var res = self.options.handleProtocols(protList, function(result, protocol) {\n          callbackCalled = true;\n          if (!result) abortConnection(socket, 404, 'Unauthorized')\n          else completeHybiUpgrade2(protocol);\n        });\n        if (!callbackCalled) {\n            // the handleProtocols handler never called our callback\n            abortConnection(socket, 501, 'Could not process protocols');\n        }\n        return;\n    } else {\n        if (typeof protocols !== 'undefined') {\n            completeHybiUpgrade2(protocols.split(/, */)[0]);\n        }\n        else {\n            completeHybiUpgrade2();\n        }\n    }\n  }\n\n  // optionally call external client verification handler\n  if (typeof this.options.verifyClient == 'function') {\n    var info = {\n      origin: origin,\n      secure: typeof req.connection.authorized !== 'undefined' || typeof req.connection.encrypted !== 'undefined',\n      req: req\n    };\n    if (this.options.verifyClient.length == 2) {\n      this.options.verifyClient(info, function(result) {\n        if (!result) abortConnection(socket, 401, 'Unauthorized')\n        else completeHybiUpgrade1();\n      });\n      return;\n    }\n    else if (!this.options.verifyClient(info)) {\n      abortConnection(socket, 401, 'Unauthorized');\n      return;\n    }\n  }\n\n  completeHybiUpgrade1();\n}\n\nfunction handleHixieUpgrade(req, socket, upgradeHead, cb) {\n  // handle premature socket errors\n  var errorHandler = function() {\n    try { socket.destroy(); } catch (e) {}\n  }\n  socket.on('error', errorHandler);\n\n  // bail if options prevent hixie\n  if (this.options.disableHixie) {\n    abortConnection(socket, 401, 'Hixie support disabled');\n    return;\n  }\n\n  // verify key presence\n  if (!req.headers['sec-websocket-key2']) {\n    abortConnection(socket, 400, 'Bad Request');\n    return;\n  }\n\n  var origin = req.headers['origin']\n    , self = this;\n\n  // setup handshake completion to run after client has been verified\n  var onClientVerified = function() {\n    var wshost;\n    if (!req.headers['x-forwarded-host'])\n        wshost = req.headers.host;\n    else\n        wshost = req.headers['x-forwarded-host'];\n    var location = ((req.headers['x-forwarded-proto'] === 'https' || socket.encrypted) ? 'wss' : 'ws') + '://' + wshost + req.url\n      , protocol = req.headers['sec-websocket-protocol'];\n\n    // handshake completion code to run once nonce has been successfully retrieved\n    var completeHandshake = function(nonce, rest) {\n      // calculate key\n      var k1 = req.headers['sec-websocket-key1']\n        , k2 = req.headers['sec-websocket-key2']\n        , md5 = crypto.createHash('md5');\n\n      [k1, k2].forEach(function (k) {\n        var n = parseInt(k.replace(/[^\\d]/g, ''))\n          , spaces = k.replace(/[^ ]/g, '').length;\n        if (spaces === 0 || n % spaces !== 0){\n          abortConnection(socket, 400, 'Bad Request');\n          return;\n        }\n        n /= spaces;\n        md5.update(String.fromCharCode(\n          n >> 24 & 0xFF,\n          n >> 16 & 0xFF,\n          n >> 8  & 0xFF,\n          n       & 0xFF));\n      });\n      md5.update(nonce.toString('binary'));\n\n      var headers = [\n          'HTTP/1.1 101 Switching Protocols'\n        , 'Upgrade: WebSocket'\n        , 'Connection: Upgrade'\n        , 'Sec-WebSocket-Location: ' + location\n      ];\n      if (typeof protocol != 'undefined') headers.push('Sec-WebSocket-Protocol: ' + protocol);\n      if (typeof origin != 'undefined') headers.push('Sec-WebSocket-Origin: ' + origin);\n\n      socket.setTimeout(0);\n      socket.setNoDelay(true);\n      try {\n        // merge header and hash buffer\n        var headerBuffer = new Buffer(headers.concat('', '').join('\\r\\n'));\n        var hashBuffer = new Buffer(md5.digest('binary'), 'binary');\n        var handshakeBuffer = new Buffer(headerBuffer.length + hashBuffer.length);\n        headerBuffer.copy(handshakeBuffer, 0);\n        hashBuffer.copy(handshakeBuffer, headerBuffer.length);\n\n        // do a single write, which - upon success - causes a new client websocket to be setup\n        socket.write(handshakeBuffer, 'binary', function(err) {\n          if (err) return; // do not create client if an error happens\n          var client = new WebSocket([req, socket, rest], {\n            protocolVersion: 'hixie-76',\n            protocol: protocol\n          });\n          if (self.options.clientTracking) {\n            self.clients.push(client);\n            client.on('close', function() {\n              var index = self.clients.indexOf(client);\n              if (index != -1) {\n                self.clients.splice(index, 1);\n              }\n            });\n          }\n\n          // signal upgrade complete\n          socket.removeListener('error', errorHandler);\n          cb(client);\n        });\n      }\n      catch (e) {\n        try { socket.destroy(); } catch (e) {}\n        return;\n      }\n    }\n\n    // retrieve nonce\n    var nonceLength = 8;\n    if (upgradeHead && upgradeHead.length >= nonceLength) {\n      var nonce = upgradeHead.slice(0, nonceLength);\n      var rest = upgradeHead.length > nonceLength ? upgradeHead.slice(nonceLength) : null;\n      completeHandshake.call(self, nonce, rest);\n    }\n    else {\n      // nonce not present in upgradeHead, so we must wait for enough data\n      // data to arrive before continuing\n      var nonce = new Buffer(nonceLength);\n      upgradeHead.copy(nonce, 0);\n      var received = upgradeHead.length;\n      var rest = null;\n      var handler = function (data) {\n        var toRead = Math.min(data.length, nonceLength - received);\n        if (toRead === 0) return;\n        data.copy(nonce, received, 0, toRead);\n        received += toRead;\n        if (received == nonceLength) {\n          socket.removeListener('data', handler);\n          if (toRead < data.length) rest = data.slice(toRead);\n          completeHandshake.call(self, nonce, rest);\n        }\n      }\n      socket.on('data', handler);\n    }\n  }\n\n  // verify client\n  if (typeof this.options.verifyClient == 'function') {\n    var info = {\n      origin: origin,\n      secure: typeof req.connection.authorized !== 'undefined' || typeof req.connection.encrypted !== 'undefined',\n      req: req\n    };\n    if (this.options.verifyClient.length == 2) {\n      var self = this;\n      this.options.verifyClient(info, function(result) {\n        if (!result) abortConnection(socket, 401, 'Unauthorized')\n        else onClientVerified.apply(self);\n      });\n      return;\n    }\n    else if (!this.options.verifyClient(info)) {\n      abortConnection(socket, 401, 'Unauthorized');\n      return;\n    }\n  }\n\n  // no client verification required\n  onClientVerified();\n}\n\nfunction abortConnection(socket, code, name) {\n  try {\n    var response = [\n      'HTTP/1.1 ' + code + ' ' + name,\n      'Content-type: text/html'\n    ];\n    socket.write(response.concat('', '').join('\\r\\n'));\n  }\n  catch (e) { /* ignore errors - we've aborted this connection */ }\n  finally {\n    // ensure that an early aborted connection is shut down completely\n    try { socket.destroy(); } catch (e) {}\n  }\n}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/openurl.js":"/**\n* @openurl\n* @from https://github.com/rauschma/openurl/blob/master/openurl.js\n* @example require(\"./openurl\").open(url);\n*/\n\nvar spawn = require('child_process').spawn;\nvar command;\n\nswitch(process.platform) {\n    case 'darwin':\n        command = 'open';\n        break;\n    case 'win32':\n        command = 'explorer.exe';\n        break;\n    case 'linux':\n        command = 'xdg-open';\n        break;\n    default:\n        throw new Error('Unsupported platform: ' + process.platform);\n}\n\n/**\n * Error handling is deliberately minimal, as this function is to be easy to use for shell scripting\n *\n * @param url The URL to open\n * @param callback A function with a single error argument. Optional.\n */\n\nfunction open(url, callback) {\n    var child = spawn(command, [url]);\n    var errorText = \"\";\n    child.stderr.setEncoding('utf8');\n    child.stderr.on('data', function (data) {\n        errorText += data;\n    });\n    child.stderr.on('end', function () {\n        if (errorText.length > 0) {\n            var error = new Error(errorText);\n            if (callback) {\n                callback(error);\n            } else {\n                throw error;\n            }\n        } else if (callback) {\n            callback(error);\n        }\n    });\n}\n\nexports.open = open;\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/output.js":"/**\n* @输出处理后的工程文件\n* @param {String} options.type 'default' : 默认输出js,css文件夹 如$ jdf o\n* @param {String} options.type 'hashtml' : hashtml下输出js,css和html文件夹 如$ jdf o -html\n* @param {String} options.type 'custom' : 自定义输出 如$ jdf o app/js/test.js\n* @param {String} options.list : 自定义输出的文件路径,如app/js/test.js\n* @param {Boolse} options.isbackup 是否备份\n* @param {Boolse} options.isdebug 是否为debug\n* @param {Function} options.callback 回调函数\n* @todo 只复制改动的文件\n*/\nvar path = require('path');\nvar fs = require('fs');\nvar Q = require(\"q\");\n\n\n//lib自身组件\nvar $ = require('./base.js');\nvar f = require('./file.js');\nvar jdf = require('./jdf.js');\nvar CssSprite = require('./cssSprite.js');\nvar Concat = require('./concat.js');\nvar CompressScheduler = require('./compressScheduler.js');\n\n//exports\nvar output = module.exports = {};\n\n/**\n * @init\n */\noutput.init = function(options){\n\t// console.log(options);\n\t\n\tif(jdf.config.build.hasCmdLog) console.log('jdf output ...');\t\n\t\n\tvar type = options.type,\n\t\tlist = options.list,\n\t\tisbackup = options.isbackup,\n\t\tisdebug = options.isdebug,\n\t\tcallback = options.callback;\n\n\tvar outputdirName = jdf.config.outputDirName;\n\tvar outputComment = jdf.config.output.comment;\n\tvar encoding = jdf.config.output.encoding;\n\tvar excludeFiles = jdf.config.output.excludeFiles;\n\t\texcludeFiles = excludeFiles ? excludeFiles + '|.vm|.scss|.less|.psd' : '.vm|.scss|.less|.psd';\n\n\tvar weinre = jdf.config.build.weinre;\n\tvar outputdir = outputdirName+'/'+ (options.projectPath || jdf.getProjectPath());\n\tvar isbackup = typeof(isbackup) == 'undefined' ? false : isbackup;\n\t\n\t//[notice]输出路径暂不可配置\n\tvar cssDir = path.normalize( jdf.bgCurrentDir + '/' + jdf.config.cssDir );\n\tvar imagesDir = path.normalize( jdf.bgCurrentDir + '/' + jdf.config.imagesDir );\n\tvar jsDir =  path.normalize( jdf.bgCurrentDir + '/' + jdf.config.jsDir );\n\tvar htmlDir = path.normalize( jdf.bgCurrentDir + '/' + jdf.config.htmlDir );\n\tvar widgetDir = path.normalize( jdf.bgCurrentDir + '/' + jdf.config.widgetDir );\n\n\tvar debugHtml = '';\n\tif(weinre){\n\t\tfs.readdirSync(htmlDir).forEach(function(name){\n\t\t\tvar pathname = path.join(htmlDir, name);\n\t\t\tif(f.isFile(pathname)){\n\t\t\t\tdebugHtml += '<li style=\"padding-bottom:0.2em;\"><a target=\"_blank\" href=\"'+mobileWeinre(pathname)+'\">'+name+'</a></li>';\n\t\t\t}\n\t\t});\n\n\t\tdebugHtml = '<ul>'+debugHtml+'</ul>';\n\n\t\tf.write(path.join(htmlDir, '_debug.html'), debugHtml);\n\t}\n\n\tvar core = function() {\n\t\tvar logText = 'jdf output success!';\n\t\tvar copyDefaultDir = function(){\n\t\t\t//jdf.config.baseDir是一期目录规划的问题\n\t\t\tvar cssOutputDir = outputdir + '/' + jdf.config.cssDir.replace(jdf.config.baseDir+'/', '');\n\t\t\tvar imagesOutputDir = outputdir + '/' + jdf.config.imagesDir;\n\t\t\tif(jdf.config.baseDir != ''){\n\t\t\t\timagesOutputDir = outputdir + '/' + jdf.config.imagesDir.replace(jdf.config.baseDir+'/', '');\n\t\t\t}\n\t\t\tvar jsOutputDir = outputdir + '/' + jdf.config.jsDir.replace(jdf.config.baseDir+'/', '');\n\n\t\t\t//图片目录不位于css/i中\n\t\t\tif(jdf.config.imagesDir.split(jdf.config.cssDir).length  == 1 ){\n\t\t\t\tf.copy(imagesDir, imagesOutputDir);\n\t\t\t}\n\t\t\t\n\t\t\tf.copy(cssDir, cssOutputDir, '(css|'+$.imageFileType()+')$', (excludeFiles ? excludeFiles : '(less|scss)$'), null, null, null, encoding);\n\t\t\t\n\t\t\tif(!jdf.config.build.es6Entry){\n\t\t\t\tf.copy(jsDir, jsOutputDir, (isdebug ? '(js|map)$' : 'js$'), (excludeFiles ? excludeFiles : 'babel$'), null, null, null, encoding);\n\t\t\t}\n\n\t\t\tf.copy(htmlDir, outputdir+'/'+ (\n\t\t\t\tjdf.config.outputHtmlDir == null \n\t\t\t\t? jdf.config.htmlDir \n\t\t\t\t: jdf.config.outputHtmlDir\n\t\t\t), null, excludeFiles, null, null, null, encoding);\n\n\t\t\t// 输出widget todo 可配置\n\t\t\tvar outputWidgetDir = outputdir+'/'+jdf.config.widgetDir;\n\t\t\tf.copy(widgetDir, outputWidgetDir,  '(js|css|'+$.imageFileType()+(isdebug ? '|map' : '') + ')$', (excludeFiles ? excludeFiles : '(less|scss|psd)$'), null, null, null, encoding);\n\t\t\t\n\t\t\tif(f.exists(widgetDir)){\n\t\t\t\t\n\t\t\t\t//将所有widget/images复制到html/images\n\t\t\t\tfs.readdirSync(widgetDir).forEach(function(dir){\n\t\t\t\t\tvar source = widgetDir + '/' + dir;\n\t\t\t\t\tif(f.isDir(source) && f.exists(source + '/images') ){\n\t\t\t\t\t\tf.mkdir(jdf.config.htmlDir+'/images');\n\t\t\t\t\t\tf.copy(source + '/images', outputdir + '/' + jdf.config.htmlDir+ '/images', null, null, null, null, null, encoding);\n\t\t\t\t\t};\n\t\t\t\t});\n\n\t\t\t\t//复制到widget的目标目录之后，再将空目录删除\n\t\t\t\tfs.readdirSync(outputWidgetDir).forEach(function(dir){\n\t\t\t\t\tvar realpath = fs.realpathSync(outputWidgetDir + '/' + dir);\n\t\t\t\t\tvar dirs = fs.readdirSync(realpath);\n\t\t\t\t\tvar files = f.getdirlist(realpath);\n\n\t\t\t\t\tif(files.length == 0 && dirs.length == 0){\n\t\t\t\t\t\tfs.rmdirSync(realpath);\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\t//combineWidgetCss下widget中的图片widgert/a/i/a.png输出至css/i/目录下\n\t\t\t\tif (jdf.config.output.combineWidgetCss){\n\t\t\t\t\tf.mkdir(imagesOutputDir);\n\t\t\t\t\tvar imgList = f.getdirlist(widgetDir, $.imageFileType()+'$');\n\t\t\t\t\timgList.forEach(function(imgListItem){\n\t\t\t\t\t\tf.copy(imgListItem, imagesOutputDir+'/'+ path.basename(imgListItem), null, null, null, null, null, encoding);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tvar customItemRes='';\n\t\tvar customTag= true;\n\n\t\tswitch (type){\n\t\t\tcase 'default' :\n\t\t\t\tcopyDefaultDir();\n\t\t\t\tbreak ;\n\t\t\tcase 'prod':\n\t\t\t\tcopyDefaultDir();\n\t\t\t\tbreak;\n\t\t\tcase 'pub':\n\t\t\t\tcopyDefaultDir();\n\t\t\t\tbreak;\t\n\t\t\tcase 'plain':\n\t\t\t\tcopyDefaultDir();\n\t\t\t\tcustomTag = false;\n\t\t\t\tbreak;\n\t\t\t// case 'hashtml': \n\t\t\t// \tcopyDefaultDir();\n\n\t\t\t// \tf.copy(htmlDir, outputdir+'/html', null, excludeFiles, null, null, null, encoding);\n\t\t\t// \tbreak;\n\t\t\tcase 'custom':\n\t\t\t\tif(!list) return;\n\t\t\t\tvar listArray = list.split(',');\n\t\t\t\tfor (var i=0; i<listArray.length; i++ ){\n\t\t\t\t\tvar item = listArray[i];\n\t\t\t\t\tif ( f.exists(item) ) {\n\t\t\t\t\t\tvar dirname = path.dirname(item);\n\t\t\t\t\t\tvar basename = path.basename(item);\n\t\t\t\t\t\tif($.is.less(basename) || $.is.sass(basename)){\n\t\t\t\t\t\t\tbasename = basename.replace(/(sass|scss|less)/g, 'css');\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tvar source = path.normalize( jdf.bgCurrentDir + '/'+ dirname  +'/'+ basename );\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (isbackup){ \n\t\t\t\t\t\t\tbackupProject(item, encoding);\n\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\tvar dirnameTemp = '';\n\t\t\t\t\t\t\tif (dirname != '.') {\n\t\t\t\t\t\t\t\tdirnameTemp = dirname.replace(jdf.config.baseDir,'');\n\t\t\t\t\t\t\t\tdirnameTemp = '/' + dirnameTemp;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tvar targetBase = outputdir + dirnameTemp;\n\t\t\t\t\t\t\tvar target = path.normalize(targetBase +'/'+ basename );\n\t\t\t\t\t\t\tvar targetdir = path.normalize(targetBase);\n\n\t\t\t\t\t\t\tf.mkdir(targetdir);\n\t\t\t\t\t\t\t//jdf u widget/xxx/时要过滤某些文件\n\t\t\t\t\t\t\tf.copy(source, target, null, (excludeFiles ? excludeFiles : '(vm|tpl|less|scss|psd)$'), null, null, null, encoding);\n\t\t\t\t\t\t\tcustomItemRes+=item+',';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (customItemRes == ''){\n\t\t\t\t\tcustomTag = false;\n\t\t\t\t\tconsole.log('jdf error ['+list+'] is not exists');\n\t\t\t\t}\n\t\t\t\tif (!isbackup) { logText = 'jdf output ['+customItemRes+'] done!';}\n\t\t\t\tbreak;\n\t\t}\n\n\t\t//backup jsdir, cssdir, widgetdir to tags dir\n\t\tif (type == 'backup') {\n\t\t\tbackupProject(undefined, encoding);\n\t\t}\n\n        if(customTag){\n            Q().then(function (){\n\t\t\t\t//css sprite\n\t\t\t\tif(!isbackup){\n\t\t\t\t\tif(jdf.config.output.cssSprite){\n\t\t\t\t\t\tCssSprite.init(outputdirName);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}).then(function (){\n\t\t\t\t//压缩 1.0\n\t\t\t\t/*\t\n\t\t\t\tif(!isbackup){\n\t\t\t\t\tvar Compress = require('./compress.js');\n\t\t\t\t\tCompress.init(outputdirName, isdebug);\t\t\n\t\t\t\t}*/\n\t\t\t\tif(jdf.config.build.hasCmdLog) console.log('jdf compress ...');\n\t\t\t\tCompressScheduler.init(outputdirName, isdebug, function(){\n\t\t\t\t\tQ().then(function (){\n\t                    //合并\n\t                    if(!isbackup){\n\t                        Concat.init(outputdirName);\n\t                    }\n\t                }).then(function (){\n\t                    //callback\n\t                    if(callback) callback();\n\t                }).then(function (){\n\t                    //log\n\t                    if(!isbackup){\n\t                        console.log(logText);\n\t                    }\n\t                });\n\t\t\t\t});\n\t\t\t})\n        }else{\n        \tconsole.log(logText);\n        }\n\t}\n\t\n\tif (f.exists(outputdirName)) {\n    \tf.del(outputdirName,function(){\n\t\t\tcore();\n\t\t});\n\t}else {\n\t\tcore();\n\t}\n}\n\n/**\n * @mobileWeinre\n * @在页面的body标签最后插入一个<script src=\"http://123.56.105.44:8080/target/target-script-min.js#20150810145518\"></script>\n */\nfunction mobileWeinre(pathname){\n\tvar timestamp = $.getTimestamp();\n\tvar weinreUrl = jdf.config.build.weinreUrl + '/target/target-script-min.js#' + timestamp;\n\tvar content = f.read(pathname);\n\n\tcontent = $.placeholder.insertBody(content, '<script src=\"' + weinreUrl + '\"></script>');\n\tf.write(pathname, content);\n\n\treturn jdf.config.build.weinreUrl + '/client#' + timestamp;\n}\n\n/**\n* @备份工程文件至 \"tags/日期\" 文件夹\n* @time 2014-3-18 15:20:43\n*/\nfunction backupProject(dirname, encoding){\n    var tagsDirName = 'tags/'+ $.getDay()+'/';\n\tvar tagsDir = jdf.getProjectParentPath(jdf.currentDir) +'/' +tagsDirName;\n\tvar logMsg = '';\n\n\t//backup all\n\tif (typeof(dirname) == 'undefined') {\n\t\tf.copy(jdf.currentDir +'/'+ jdf.config.cssDir, tagsDir  + jdf.config.cssDir, null, null, null, null, null, encoding);\n\t\tf.copy(jdf.currentDir +'/'+ jdf.config.jsDir, tagsDir +  jdf.config.jsDir, null, null, null, null, null, encoding);\n\t\tf.copy(jdf.currentDir +'/'+ jdf.config.widgetDir, tagsDir + jdf.config.widgetDir, null, null, null, null, null, encoding);\n\t\tlogMsg = jdf.config.cssDir +','+jdf.config.jsDir +','+jdf.config.widgetDir;\n\t}else {\n\t//custom backup\n\t\tf.copy(jdf.currentDir +'/'+ dirname, tagsDir + dirname, null, null, null, null, null, encoding);\n\t\tlogMsg = dirname;\n\t}\n\tconsole.log('jdf backup ['+logMsg+'] to \"'+ tagsDirName + '\" done! ');\n}","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/server.js":"/**\n* @simple server\n*/\nvar PORT = 3000;\nvar http = require('http');\nvar url=require('url');\nvar fs=require('fs');\nvar path=require('path');\n\nvar f = require('./file.js');\n//var jdf = require('./jdf.js');\n//var compress = require('./compress.js');\n\nvar mine = {\n  \"css\": \"text/css\",\n  \"gif\": \"image/gif\",\n  \"html\": \"text/html\",\n  \"tpl\": \"text/html\",\n  \"vm\": \"text/html\",\n  \"shtml\": \"text/html\",\n  \"ico\": \"image/x-icon\",\n  \"jpeg\": \"image/jpeg\",\n  \"jpg\": \"image/jpeg\",\n  \"js\": \"text/javascript\",\n  \"json\": \"application/json\",\n  \"pdf\": \"application/pdf\",\n  \"png\": \"image/png\",\n  \"svg\": \"image/svg+xml\",\n  \"swf\": \"application/x-shockwave-flash\",\n  \"tiff\": \"image/tiff\",\n  \"txt\": \"text/plain\",\n  \"wav\": \"audio/x-wav\",\n  \"wma\": \"audio/x-ms-wma\",\n  \"wmv\": \"video/x-ms-wmv\",\n  \"xml\": \"text/xml\",\n  \"ttf\":\"font/ttf\",\n  \"otf\":\"font/opentype\",\n  \"woff\":\"application/font-woff\",\n  \"woff2\":\"application/font-woff2\",\n  \"eot\":\"application/vnd.ms-fontobject\"\n};\n\n//exports\nvar server = module.exports = {};\n\n/**\n* @getIp\n*/\nserver.getIp = function(){\n\tvar net = require('os').networkInterfaces();\n    for(var key in net){\n        if(net.hasOwnProperty(key)){\n            var items = net[key];\n            if(items && items.length){\n                for(var i = 0; i < items.length; i++){\n                    var ip = String(items[i].address).trim();\n                    if(ip && /^\\d+(?:\\.\\d+){3}$/.test(ip) && ip !== '127.0.0.1'){\n                        return ip;\n                    }\n                }\n            }\n        }\n    }\n    return '127.0.0.1';\n};\n\n/**\n * @joinbuffers\n */\nserver.joinbuffers = function(bufferStore) {\n    var length = bufferStore.reduce(function(previous, current) {\n        return previous + current.length;\n    }, 0);\n\n    var data = new Buffer(length);\n    var startPos = 0;\n    bufferStore.forEach(function(buffer){\n        buffer.copy(data, startPos);\n        startPos += buffer.length;\n    });\n    return data;\n};\n\n/**\n* @init\n* @param {String} serverCurrentDir 服务器文件夹本地路径\n* @param {String} port 服务器端口号\n* @param {String} cdn cdn文件夹前缀 http://cdn.com\n* @param {String} replacePath cdn替换路径字符 如vip/2014 : http://cdn.com/vip/2014/js/vip.index.js ---> http://cdn.com/js/vip.index.js 本地调试反向代理适用\n* @param {String} debug debug模式下替换http链接中的projectPath\n* @param {Function} callback 调用完成回调函数\n*/\nserver.init = function(serverCurrentDir, port, cdn, replacePath, comboDebug, addJsDepends, callback){\n\n\tif (typeof(port) != 'undefined') {\n\t\tPORT = port;\n\t}\n\n\tif (typeof(comboDebug) == 'undefined') {\n\t\tcomboDebug = false;\n\t}\n\n\tvar config = http.createServer(function (request, response) {\n\t\tvar requestUrl = request.url;\n\t\tvar isComboUrl = /\\?\\?/.test(requestUrl);\n\t\tvar pathname = url.parse(requestUrl).pathname;\n\n\t\tif (typeof(serverCurrentDir) == 'undefined') {\n\t\t\tvar realPath = fs.realpathSync('.') +'/'+ pathname;\n\t\t}else {\n\t\t\tvar realPath = serverCurrentDir +'/'+ pathname;\n\t\t}\n\t\trealPath = decodeURI(realPath);\n\n\t\tvar ext = path.extname(realPath);\n\t\text = ext ? ext.slice(1) : 'unknown';\n\n\t\tif(isComboUrl){\n\t\t\t/**\n\t\t\t\t??a.js,b.js计算.js扩展名\n\t\t\t\t??a.css,b.css计算.css扩展名\n\t\t\t*/\n\t\t\tvar comboUrlTemp = requestUrl.split(',');\n\t\t\text = path.extname(comboUrlTemp[comboUrlTemp.length-1]);\n\t\t\text = ext ? ext.slice(1) : 'unknown';\n\t\t}\n\n\t\tif(typeof(replacePath) != 'undefined' && comboDebug){\n\t\t\t//替换掉路径中projectPath, 有风险吗?\n\t\t\trealPath = realPath.replace(replacePath,'');\n\t\t}\n\n\t\tvar response404 = function (){\n\t\t\tresponse.writeHead(404, {\n\t\t\t\t'Content-Type': 'text/html'\n\t\t\t});\n\t\t\tresponse.write('<meta charset=UTF-8><meta name=viewport content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no\"><center><h1>404 Not Found</h1></center><hr><center>'+server.copyright(PORT)+'</center>');\n\t\t\tresponse.end();\n\t\t}\n\n\t\tfs.exists(realPath, function (exists) {\n\t\t\tvar cdnUrl = cdn+pathname;\n\t\t\tif(!exists){\n\t\t\t\tresponse404();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (isComboUrl) {\n\t\t\t\t//cdn检测同名文件\n\t\t\t\t//todo增加短路径支持 requestUrl\n\t\t\t\tcdnUrl = requestUrl;\n\n\t\t\t\tvar contentType = mine[ext] || \"text/plain\";\n\t\t\t\tvar fileContent = '';\n\n\t\t\t\t//以??先分隔为数组\n\t\t\t\tvar comboUrl = requestUrl.split('??');\n\t\t\t\tvar comboFile = [];\n\n\t\t\t\tif(comboUrl.length > 0){\n\t\t\t\t\t//将头尾的斜杠去掉\n\t\t\t\t\t// comboUrl[0] = comboUrl[0].replace(/^\\//, '').replace(/\\/$/, '');\n\n\t\t\t\t\tif(comboUrl[1]){\n\t\t\t\t\t\t//以逗号将文件名称分隔为数组\n\t\t\t\t\t\tcomboFile = comboUrl[1].split(',');\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tcomboFile.forEach(function(file){\n\t\t\t\t\tvar fileDir = '';\n\t\t\t\t\tvar content = '';\n\n\t\t\t\t\t//将头尾的斜杠去掉\n\t\t\t\t\tfile = file.replace(/^\\//, '').replace(/\\/$/, '');\n\t\t\t\t\tif(comboUrl[0] !== ''){\n\t\t\t\t\t\tfileDir = comboUrl[0] + '/' + file;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tfileDir = file;\n\t\t\t\t\t}\n\n\t\t\t\t\tvar currentDir = serverCurrentDir + fileDir;\n\t\t\t\t\tif(f.exists(currentDir)){\n\t\t\t\t\t\tcontent = f.read(currentDir);\n\t\t\t\t\t\tif( typeof(addJsDepends) == 'function' ){\n\t\t\t\t\t\t\tcontent = addJsDepends(currentDir);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t//如果代码的末尾没有分号，则自动添加一个。以避免代码合并出现异常。\n\t\t\t\t\t\tif(!/[;\\r\\n]$/.test(content) && ext == 'js'){\n\t\t\t\t\t\t\tcontent += ';';\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfileContent += content;\n\t\t\t\t\t}else{\n\t\t\t\t\t\tfileDir = cdnUrl + fileDir;\n\t\t\t\t\t\tresponse404();\n\t\t\t\t\t}\n\t\t\t\t});\n\n\t\t\t\tresponse.writeHead(200, {\n\t\t\t\t\t'Content-Type': contentType\n\t\t\t\t});\n\t\t\t\tresponse.write(fileContent);\n\t\t\t\tresponse.end();\n\n\t\t\t} else {\n\t\t\t\tif(f.isDir(realPath)){\n\t\t\t\t\tfs.readdir(realPath, function (err, file) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\tresponse.writeHead(500, {\n\t\t\t\t\t\t\t\t'Content-Type': mine.html\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\tresponse.end(err);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresponse.writeHead(200, {\n\t\t\t\t\t\t\t\t'Content-Type': \"text/html\"\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\tvar html = server.getDirList(realPath, pathname, PORT);\n\t\t\t\t\t\t\tresponse.end(html, \"binary\");\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tif(f.isFile(realPath)){\n\t\t\t\t\tvar ext = path.extname(realPath);\n\t\t\t\t\text = ext.replace('.', '');\n\t\t\t\t\tvar contentType = mine[ext] || \"text/plain\";\n\t\t\t\t\tvar content = fs.readFileSync(realPath);\n\n    \t\t\t\tresponse.writeHead(200, {\n\t\t\t\t\t\t'Content-Type': contentType\n\t\t\t\t\t});\n\n\t\t\t\t\tresponse.end(content);\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t});\n\t\n\tconfig.listen(PORT, function(err){\n\t\tif(callback) callback(1);\n\t});\n\n\tconfig.on('error', function(err){\n\t\tif(callback) callback(0);\n\t});\n}\n\n/**\n* @get copyright\n*/\nserver.copyright = function (port){\n\tvar serverIp = server.getIp()+':'+port;\n\tvar copyright = '<p><strong style=\"font-size:1.2em\">jdf server </strong>'+\n\t\t' <strong>IP</strong> <a href=\"http://'+serverIp+'\">'+serverIp+'</a>   '+\t\n\t\t//'<span style=\"font-size:0.8em\">'+new Date()+'</span>  '+\n\t'</p>';\n\treturn copyright;\n}\n\n/**\n* @get dir list\n*/\nserver.getDirList = function(realPath, pathname, port){\n\t// console.log(realPath);\n\tvar dirname = '/';\n\tvar html = '<li style=\"padding-bottom:5px;\"><a href=\"../\">../</a></li>';\n\trealPath = path.normalize(realPath);\n\tpathname += '/';\n\tpathname = pathname.replace(/\\/\\//,'');\n\n\tfs.readdirSync(realPath).forEach(function(name){\n\t\tif( !/.Ds_Store$/.test(name) ){\n\t\t\t// console.log(name);\n\t\t\tvar url = pathname +'/'+name;\n\t\t\turl = url.replace(/\\/\\//g,'/');\n\t\t\turl = encodeURI(url);\n\t\t\tdirname = path.dirname(url);\n\t\t\tif(f.isDir('.'+url)){\n\t\t\t\turl = url + '/';\n\t\t\t\tname = name + '/';\n\t\t\t}\n\n\t\t\thtml += '<li style=\"padding-bottom:0.2em;\"><a href=\"'+url+'\">'+name+'</a></li>';\n\t\t}\n\t})\n\n\thtml = '<ul>' +html+ '</ul>';\n\thtml = '<!DOCTYPE html><html><head><meta charset=UTF-8><meta name=viewport content=\"width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no\"><h1>Index of '+dirname+'</h1><hr/>'+html+'<hr/> '+server.copyright(port);\n\treturn html;\n}\n","/home/travis/build/npmtest/node-npmtest-jdf/node_modules/jdf/lib/widget.js":"/**\n * @本地widget预览和发布至外端机器\n */\nvar path = require('path');\nvar fs = require('fs');\n\n//依赖lib\nvar $ = require('./base.js');\nvar f = require('./file.js');\nvar jdf = require('./jdf.js');\nvar Server = require('./server.js');\nvar Openurl = require(\"./openurl.js\");\nvar FindPort = require('./findPort');\n\nvar Node_watch = require('node-watch');\n\n//exports\nvar widget = module.exports;\n\n/**\n * @widget path check\n */\nwidget.pathCheck = function(name) {\n    if (typeof(name) == 'undefined') return true;\n\n    /*\n    if ( !/^widget\\//.test(name) ) {\n        console.log('jdf error widget name format error');\n        return true;\n    }*/\n\n    if (!f.exists('widget/' + name)) {\n        console.log('jdf error widget path is not exists');\n        return true;\n    }\n\n    return false;\n}\n\n/**\n * @本地预览页面templete\n * @todo: 放在server上控制\n */\nwidget.templete = function(str, title) {\n    if (typeof(str) == 'undefined' || !str) {\n        var str = '';\n    }\n\n    var css = '';\n    jdf.config.widget.css.forEach(function(item) {\n        css += '<link rel=\"stylesheet\" type=\"text/css\" href=\"' + item + '\" media=\"all\" />\\r\\n';\n    })\n\n    var js = '';\n    jdf.config.widget.js.forEach(function(item) {\n        js += '<script type=\"text/javascript\" src=\"' + item + '\"></script>\\r\\n';\n    })\n\n    return '<!DOCTYPE html>' + '\\r\\n' +\n        '<html>' + '\\r\\n' +\n        '<head>' + '\\r\\n' +\n        '<meta charset=\"utf-8\" />' + '\\r\\n' +\n        '<title>' + title + '</title>' + '\\r\\n' + css + js +\n        '</head>' + '\\r\\n' +\n        '<body>' + '\\r\\n' + str + '\\r\\n' +\n        '</body>' + '\\r\\n' +\n        '</html>';\n}\n\n/**\n * @path has \"widget\" \n */\nwidget.hasWidget = function(path) {\n    var reg = new RegExp(jdf.config.widgetDir, 'gm');\n    return reg.test(path);\n}\n\n/**\n * @预览所有widget\n * @example  jdf widget -all\n * @本地所有的widget中tpl,css,js拼装后html文件放在html中\n */\nwidget.all = function() {\n    jdf.bgMkdir();\n\n    var htmlDir = jdf.config.htmlDir;\n    f.mkdir(htmlDir);\n\n    var target = htmlDir + '/allwidget.html';\n\n    var widgetDir = f.currentDir() + '/' + jdf.config.widgetDir;\n    if (!f.exists(widgetDir)) {\n        console.log('jdf error widget not exists');\n        return;\n    }\n\n    var core = function() {\n        var widgetListHtml = '';\n        fs.readdirSync(widgetDir).forEach(function(item) {\n            if (f.excludeFiles(item)) {\n                widgetListHtml += '{%widget name=\"' + item + '\"%}\\r\\n';\n            }\n        });\n\n        var result = widget.templete('\\r\\n' + widgetListHtml, jdf.getProjectPath() + ' - all widget preview');\n        f.write(target, result);\n    }\n\n    core();\n    jdf.argvInit('build', '-open', function() {\n        //todo watch\n        //core();\n        Openurl.open('http://localhost:' + jdf.config.localServerPort + '/' + target);\n        console.log('jdf open you broswer to see it');\n    });\n}\n\n/**\n * @本地预览widget\n * @example  jdf widget -preview widget/header\n * @本地widget中tpl,css,js拼装后html文件放在当前widget中\n */\nwidget.preview = function(name) {\n    jdf.bgMkdir();\n\n    if (widget.pathCheck(name)) {\n        return;\n    }\n\n    var target = 'widget/' + name;\n    var widgetname = name;\n\n    var core = function() {\n        var result = widget.templete(null, widgetname);\n        fs.readdirSync(target).forEach(function(item) {\n            if (item && f.excludeFiles(item)) {\n                var itemContent = f.read(target + '/' + item);\n\n                if ($.is.tpl(item) || $.is.vm(item)) {\n                    hasTpl = true;\n                    itemContent = itemContent;\n                    result = $.placeholder.insertBody(result, itemContent);\n                }\n\n                if ($.is.css(item)) {\n                    result = $.placeholder.insertHead(result, $.placeholder.cssLink(item));\n                }\n\n                if ($.is.js(item)) {\n                    result = $.placeholder.insertHead(result, $.placeholder.jsLink(item));\n                }\n            }\n        });\n\n        var indexUrl = target + '/' + widgetname + '.html';\n        f.write(indexUrl, result);\n    }\n\n    core();\n\n    var localServerPort = jdf.config.localServerPort;\n    FindPort(localServerPort, function(data) {\n        if (!data) {\n            console.log('Port ' + localServerPort + ' is tack up');\n            localServerPort += 1000;\n            jdf.config.localServerPort = localServerPort;\n        }\n\n        Server.init(target + '/', jdf.config.localServerPort);\n        Openurl.open('http://localhost:' + jdf.config.localServerPort + '/' + widgetname + '.html');\n        console.log('jdf open you broswer to see it');\n\n        //监听\n        Node_watch(target, function(widgetname) {\n            core();\n        });\n    });\n}\n\n/**\n * @下载widget到当前项目文件夹\n * @example  jdf widget -install widget/name\n * @time 2014-3-14 14:50:29\n */\nwidget.install = function(name, force) {\n    var force = typeof(force) == 'undefined' ? false : force;\n    var ftp = require('./ftp.js');\n\n    ftp.tryConnect().done(function() {\n        download(name, force);\n    });\n\n    function download(name, force) {\n\n        var source = jdf.config.widgetServerDir + '/widget/' + name;\n        var target = f.currentDir() + '/widget/' + name;\n        var widgetname = name;\n\n        ftp.listMain(source, function(data) {\n            if (data != 'error') {\n                var version = '';\n                data.forEach(function(item) {\n                    version = item.name;\n                })\n\n                if (!parseInt(version)) {\n                    version = '';\n                }\n\n                var widgetNameVersion = widgetname + '/' + version;\n\n                if (f.exists(target) && !force) {\n                    ftp.client.end();\n                    console.log('jdf warnning widget [' + widgetname + '] is exists in current project');\n                } else {\n\n                    downloadMain(source + '/' + version, target, function(data) {\n                        if (data == 'error') {\n                            console.log('jdf warnning widget [' + widgetNameVersion + '] is not exists on server ');\n                        } else {\n                            console.log('jdf widget [' + widgetNameVersion + '] install done from server ');\n                        }\n                        f.readJSON(target + '/component.json', function(data) {\n                            for (name in data.dependencies) {\n                                download(name, force);\n                            }\n                            ftp.client.end();\n                        });\n                    });\n                }\n            } else {\n                console.log('jdf error [widget.install] ftp error!');\n            }\n        });\n    }\n\n    function downloadMain(source, target, callback, isEnd) {\n        ftp.listMain(source, function(data) {\n            if (data != 'error') {\n                f.mkdir(target);\n                var serverNum = 0,\n                    localNum = 0;\n                data.forEach(function(item) {\n                    if (item.type == 'file') {\n                        serverNum += 1;\n                        var sourcePut = source + '/' + item.name;\n                        var targetPut = target + '/' + item.name;\n\n                        ftp.get(sourcePut, targetPut, function() {\n                            localNum += 1;\n                            if (serverNum == localNum) {\n                                if (callback) callback();\n                            }\n                        });\n                    }\n                })\n            } else {\n                if (callback) callback(data);\n            };\n        });\n    }\n\n}\n\n/**\n * @发布widget至server\n * @time 2014-3-14 14:50:29\n * @example  jdf widget -publish widget/name\n * @todo 增加name验证和版本控制\n */\n\nwidget.publish = function(name, force) {\n    var publishDir = jdf.config.widgetServerDir + '/widget';\n\n    var force = typeof(force) == 'undefined' ? false : force;\n    if (widget.pathCheck(name)) {\n        return;\n    }\n\n    var cUrl = 'widget/' + name + '/' + 'component.json';\n    f.readJSON(cUrl, function(data) {\n        if (data) {\n            var cName = data.name;\n            var cVersion = data.version;\n            var ftp = require('./ftp.js');\n            var target = publishDir + '/' + name + '/' + cVersion;\n            ftp.mkdir(publishDir + '/' + name);\n\n            ftp.list(target, function(data) {\n                if (data == 'error' || force) {\n                    ftp.mkdir(publishDir + '/' + name + '/');\n                    ftp.mkdir(target);\n\n                    ftp.uploadMain('widget/' + name, target, null, null, null, null, null, function(err) {\n                        console.log('jdf widget \"' + '' + name + '/' + cVersion + '\" publish done!');\n                    });\n                } else {\n                    console.log('jdf warnning \"' + name + '/' + cVersion + '\" is exists in server');\n                }\n            });\n        }\n    });\n}\n\n/**\n * @取得所有widget的列表\n * @time 2014-6-23 11:04:00\n */\nwidget.list = function() {\n    var publishDir = jdf.config.widgetServerDir + '/widget';\n\n    var ftp = require('./ftp.js');\n    ftp.list(publishDir, function(data) {\n        if (data) {\n            console.log('jdf widget list: ');\n            console.log('----------------');\n            data.forEach(function(item) {\n                console.log(item.name);\n            })\n        }\n        ftp.client.end();\n    })\n}\n\n/**\n * @根据关键字搜索所有widget\n * @time 2014-3-14 14:50:29\n */\nwidget.search = function(name) {\n\n}\n\n\n/**\n * @widget自动生成目录\n * @time 2014-6-23 11:04:00\n */\nwidget.create = function(name) {\n    var widgetDir = 'widget/' + name;\n    if (f.exists(widgetDir)) {\n        console.log('jdf warnning : widget [' + name + '] is exists');\n        return;\n    }\n\n    console.log('jdf tips: if you create it, input \"y\" else input \"n\" ');\n    var Prompt = require('simple-prompt');\n    var questions = [{\n        question: 'vm',\n        required: true\n    }, {\n        question: 'js'\n    }, {\n        question: 'scss'\n    }, {\n        question: 'json'\n    }];\n    var profile = new Prompt(questions);\n    profile.create().then(function(error, answers) {\n        if (error) {\n            return;\n        }\n        var createFilesArray = ['component.json'];\n        if (answers.vm == 'y') createFilesArray.push(name + '.vm');\n        if (answers.js == 'y') createFilesArray.push(name + '.js');\n        if (answers.scss == 'y') createFilesArray.push(name + '.scss');\n        if (answers.json == 'y') createFilesArray.push(name + '.json');\n\n        f.mkdir(widgetDir);\n        //jdf.config.widget.createFiles\n        createFilesArray.forEach(function(item) {\n            f.write(widgetDir + '/' + item, '');\n        });\n\n        //给compoent.json写入默认的内容\n        var componentJson = '{\\r\\n' +\n            '   \"name\": \"' + name + '\",\\r\\n' +\n            '   \"version\": \"1.0.0\",\\r\\n' +\n            '   \"dependencies\": {}\\r\\n' +\n            '}';\n        f.write(widgetDir + '/component.json', componentJson);\n\n        console.log('jdf widget [' + name + '] create done');\n    });\n}\n"}